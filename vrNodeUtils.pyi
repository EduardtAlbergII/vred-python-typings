from vrNodePtr import NodePtr, vrNodePtr
from vrFieldAccess import FieldContainerPtr
from vrOSGTypes import Vec3f
from typing import Any

__name__: str
__doc__: str
__package__: str
__spec__: ModuleSpec

def __loader__(self) -> None: ...
def addFaceNormals(self, root_node: NodePtr) -> None: ...
def cacheVBO(self, node: NodePtr) -> None: ...
def calcFaceNormalRepresentation(self, length: float) -> None: ...
def calcFaceNormals(self, root_node: NodePtr) -> None: ...
def calcNormalAndBitangent(self, root_node: vrNodePtr, textureUnit: int, tangentTarget: int, binormalTarget: int) -> None: ...
def calcSecondaryColorRepresentation(self, length: float) -> None: ...
def calcVertexColorRepresentation(self, length: float) -> None: ...
def calcVertexNormalRepresentation(self, length: float) -> None: ...
def calcVertexNormals(self, root_node: NodePtr, angle: float) -> None: ...
def convertAllToComponentTransform(self, root_node: NodePtr) -> None: ...
def convertAllToTransform(self, root_node: NodePtr) -> None: ...
def createAttachment(self, type: str) -> FieldContainerPtr: ...
def createBox(
    self, size_x: float, size_y: float, size_z: float, res_x: int, res_y: int, res_z: int, red: float, green: float, blue: float, alpha: float
) -> vrNodePtr: ...
def createCone(
    self, height: float, radius: float, sides: int, create_side: bool, create_bottom: bool, red: float, green: float, blue: float
) -> vrNodePtr: ...
def createCylinder(
    self, height: float, radius: float, sides: int, create_side: bool, create_top: bool, create_bottom: bool, red: float, green: float, blue: float
) -> vrNodePtr: ...
def createEnvBox(
    self, size: float, res_x: int, res_y: int, res_z: int, red: float, green: float, blue: float, transparency: float, texture: str
) -> vrNodePtr: ...
def createLatLongSphere(self, latres: int, longres: int, radius: float, red: float, green: float, blue: float) -> vrNodePtr: ...
def createLine(self, ax: float, ay: float, az: float, bx: float, by: float, bz: float, red: float, green: float, blue: float) -> vrNodePtr: ...
def createMipmaps(self) -> None: ...
def createPlane(self, size_x: float, size_y: float, res_x: int, res_y: int, red: float, green: float, blue: float) -> vrNodePtr: ...
def createShellNodes(self, node: NodePtr) -> bool: ...
def createSphere(self, resolution: int, radius: float, red: float, green: float, blue: float) -> vrNodePtr: ...
def degToRad(self, degrees: Any) -> float: ...
def downscaleTextures(self, factor: int) -> None: ...
def findLargestGeometry(self, max_tris_limit: int) -> NodePtr: ...
def getBoundingBoxCenter(self, node: NodePtr, worldSpace: bool) -> Vec3f: ...
def getMirroredNodes(self, root_node: NodePtr, invert: bool) -> list: ...
def getTransformNodeEulerRotationOrder(self, node: NodePtr) -> str: ...
def getTransformNodeRotatePivot(self, node: NodePtr, worldSpace: bool) -> Vec3f: ...
def getTransformNodeRotatePivotTranslation(self, node: NodePtr) -> Vec3f: ...
def getTransformNodeRotation(self, node: NodePtr) -> Vec3f: ...
def getTransformNodeRotationOrientation(self, node: NodePtr) -> Vec3f: ...
def getTransformNodeScale(self, node: NodePtr) -> Vec3f: ...
def getTransformNodeScalePivot(self, node: NodePtr, worldSpace: bool) -> Vec3f: ...
def getTransformNodeScalePivotTranslation(self, node: NodePtr) -> Vec3f: ...
def getTransformNodeShear(self, node: NodePtr) -> Vec3f: ...
def getTransformNodeTranslation(self, node: NodePtr, worldSpace: bool) -> Vec3f: ...
def isBSide(self, node: NodePtr) -> bool: ...
def normalizeNormals(self, root_node: vrNodePtr) -> None: ...
def normalizeSurfaces(self, root_node: vrNodePtr) -> None: ...
def offsetAlongNormal(self, root_node: vrNodePtr, offset: Any) -> None: ...
def optimizeShellSurfaces(self, node: NodePtr) -> None: ...
def optimizeTextures(self) -> None: ...
def removeUnreferencedNodes(self, node: NodePtr) -> None: ...
def setDisplayList(self, node: NodePtr, enable: bool) -> None: ...
def setGeometryType(self, nodes: list, geoTypes: list) -> None: ...
def setTexturesPriority(self, priority: float) -> None: ...
def setToBSide(self, node: NodePtr, isBSide: bool, node2: NodePtr, isBSide2: bool) -> None: ...
def setTransformNodeEulerRotationOrder(self, node: NodePtr, rotationOrder: str) -> None: ...
def setTransformNodeRotatePivot(self, node: NodePtr, x: float, y: float, z: float, worldSpace: bool) -> None: ...
def setTransformNodeRotatePivotTranslation(self, node: NodePtr, x: float, y: float, z: float) -> None: ...
def setTransformNodeRotation(self, node: NodePtr, x: float, y: float, z: float) -> None: ...
def setTransformNodeRotationOrientation(self, node: NodePtr, x: float, y: float, z: float) -> None: ...
def setTransformNodeScale(self, node: NodePtr, x: float, y: float, z: float) -> None: ...
def setTransformNodeScalePivot(self, node: NodePtr, x: float, y: float, z: float, worldSpace: bool) -> None: ...
def setTransformNodeScalePivotTranslation(self, node: NodePtr, x: float, y: float, z: float) -> None: ...
def setTransformNodeShear(self, node: NodePtr, xy: float, xz: float, yz: float) -> None: ...
def setTransformNodeTranslation(self, node: NodePtr, x: float, y: float, z: float, worldSpace: bool) -> None: ...
def setVBO(self, node: NodePtr, enable: bool) -> None: ...
def swapFaceNormals(self, root_node: vrNodePtr) -> None: ...
def swapNormals(self, root_node: vrNodePtr) -> None: ...
def swapVertexNormals(self, root_node: vrNodePtr) -> None: ...
def unshareCores(self, node: NodePtr) -> None: ...
def updateAmbientOcclusionData(self, root_node: Any) -> None: ...
