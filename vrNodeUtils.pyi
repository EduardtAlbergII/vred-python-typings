from vrNodePtr import NodePtr, vrNodePtr
from vrFieldAccess import FieldContainerPtr
from vrOSGTypes import Vec3f
from typing import Any

__name__: str
__doc__: str
__package__: str
__spec__: ModuleSpec

def __loader__() -> None: ...
def addFaceNormals(root_node: NodePtr) -> None: ...
def cacheVBO(node: NodePtr) -> None: ...
def calcFaceNormalRepresentation(length: float) -> None: ...
def calcFaceNormals(root_node: NodePtr) -> None: ...
def calcNormalAndBitangent(root_node: vrNodePtr, textureUnit: int, tangentTarget: int, binormalTarget: int) -> None: ...
def calcSecondaryColorRepresentation(length: float) -> None: ...
def calcVertexColorRepresentation(length: float) -> None: ...
def calcVertexNormalRepresentation(length: float) -> None: ...
def calcVertexNormals(root_node: NodePtr, angle: float) -> None: ...
def convertAllToComponentTransform(root_node: NodePtr) -> None: ...
def convertAllToTransform(root_node: NodePtr) -> None: ...
def createAttachment(type: str) -> FieldContainerPtr: ...
def createBox(
    size_x: float, size_y: float, size_z: float, res_x: int, res_y: int, res_z: int, red: float, green: float, blue: float, alpha: float
) -> vrNodePtr: ...
def createCone(
    height: float, radius: float, sides: int, create_side: bool, create_bottom: bool, red: float, green: float, blue: float
) -> vrNodePtr: ...
def createCylinder(
    height: float, radius: float, sides: int, create_side: bool, create_top: bool, create_bottom: bool, red: float, green: float, blue: float
) -> vrNodePtr: ...
def createEnvBox(
    size: float, res_x: int, res_y: int, res_z: int, red: float, green: float, blue: float, transparency: float, texture: str
) -> vrNodePtr: ...
def createLatLongSphere(latres: int, longres: int, radius: float, red: float, green: float, blue: float) -> vrNodePtr: ...
def createLine(ax: float, ay: float, az: float, bx: float, by: float, bz: float, red: float, green: float, blue: float) -> vrNodePtr: ...
def createMipmaps() -> None: ...
def createPlane(size_x: float, size_y: float, res_x: int, res_y: int, red: float, green: float, blue: float) -> vrNodePtr: ...
def createShellNodes(node: NodePtr) -> bool: ...
def createSphere(resolution: int, radius: float, red: float, green: float, blue: float) -> vrNodePtr: ...
def degToRad(degrees: Any) -> float: ...
def downscaleTextures(factor: int) -> None: ...
def findLargestGeometry(max_tris_limit: int) -> NodePtr: ...
def getBoundingBoxCenter(node: NodePtr, worldSpace: bool) -> Vec3f: ...
def getMirroredNodes(root_node: NodePtr, invert: bool) -> list: ...
def getTransformNodeEulerRotationOrder(node: NodePtr) -> str: ...
def getTransformNodeRotatePivot(node: NodePtr, worldSpace: bool) -> Vec3f: ...
def getTransformNodeRotatePivotTranslation(node: NodePtr) -> Vec3f: ...
def getTransformNodeRotation(node: NodePtr) -> Vec3f: ...
def getTransformNodeRotationOrientation(node: NodePtr) -> Vec3f: ...
def getTransformNodeScale(node: NodePtr) -> Vec3f: ...
def getTransformNodeScalePivot(node: NodePtr, worldSpace: bool) -> Vec3f: ...
def getTransformNodeScalePivotTranslation(node: NodePtr) -> Vec3f: ...
def getTransformNodeShear(node: NodePtr) -> Vec3f: ...
def getTransformNodeTranslation(node: NodePtr, worldSpace: bool) -> Vec3f: ...
def isBSide(node: NodePtr) -> bool: ...
def normalizeNormals(root_node: vrNodePtr) -> None: ...
def normalizeSurfaces(root_node: vrNodePtr) -> None: ...
def offsetAlongNormal(root_node: vrNodePtr, offset: Any) -> None: ...
def optimizeShellSurfaces(node: NodePtr) -> None: ...
def optimizeTextures() -> None: ...
def removeUnreferencedNodes(node: NodePtr) -> None: ...
def setDisplayList(node: NodePtr, enable: bool) -> None: ...
def setGeometryType(nodes: list, geoTypes: list) -> None: ...
def setTexturesPriority(priority: float) -> None: ...
def setToBSide(node: NodePtr, isBSide: bool, node2: NodePtr, isBSide2: bool) -> None: ...
def setTransformNodeEulerRotationOrder(node: NodePtr, rotationOrder: str) -> None: ...
def setTransformNodeRotatePivot(node: NodePtr, x: float, y: float, z: float, worldSpace: bool) -> None: ...
def setTransformNodeRotatePivotTranslation(node: NodePtr, x: float, y: float, z: float) -> None: ...
def setTransformNodeRotation(node: NodePtr, x: float, y: float, z: float) -> None: ...
def setTransformNodeRotationOrientation(node: NodePtr, x: float, y: float, z: float) -> None: ...
def setTransformNodeScale(node: NodePtr, x: float, y: float, z: float) -> None: ...
def setTransformNodeScalePivot(node: NodePtr, x: float, y: float, z: float, worldSpace: bool) -> None: ...
def setTransformNodeScalePivotTranslation(node: NodePtr, x: float, y: float, z: float) -> None: ...
def setTransformNodeShear(node: NodePtr, xy: float, xz: float, yz: float) -> None: ...
def setTransformNodeTranslation(node: NodePtr, x: float, y: float, z: float, worldSpace: bool) -> None: ...
def setVBO(node: NodePtr, enable: bool) -> None: ...
def swapFaceNormals(root_node: vrNodePtr) -> None: ...
def swapNormals(root_node: vrNodePtr) -> None: ...
def swapVertexNormals(root_node: vrNodePtr) -> None: ...
def unshareCores(node: NodePtr) -> None: ...
def updateAmbientOcclusionData(root_node: Any) -> None: ...
