from builtins import NoneType
from vrNodePtr import vrNodePtr
from vrOSGTypes import Pnt3f, Vec2f, Vec3f
from typing import Any

__name__: str
__doc__: NoneType
__package__: str
__spec__: ModuleSpec
OVRButton_System: int
OVRButton_ApplicationMenu: int
OVRButton_Grip: int
OVRButton_DPad_Left: int
OVRButton_DPad_Up: int
OVRButton_DPad_Right: int
OVRButton_DPad_Down: int
OVRButton_A: int
OVRButton_ProximitySensor: int
OVRButton_Axis0: int
OVRButton_Axis1: int
OVRButton_Axis2: int
OVRButton_Axis3: int
OVRButton_Axis4: int
Finger_Thumb: int
Finger_Index: int
Finger_Middle: int
Finger_Ring: int
Finger_Pinky: int
Pose_Pointing: int
Pose_Picking: int
Pose_ThumbsUp: int
Pose_Fist: int
Hand_Left: int
Hand_Right: int
Hand_Undefined: int
Visualization_Controller: int
Visualization_Hand: int
Visualization_ControllerAndHand: int

def __loader__(self) -> None: ...
def getOpenVRFrameTimings(self) -> vrOpenVRFrameTimings: ...
def getOpenVRTrackingOrigin(self) -> Pnt3f: ...
def getOpenVRTrackingOriginType(self) -> int: ...
def resetOpenVRHMDPose(self) -> None: ...
def setOpenVRControllerTracking(self, s: bool) -> None: ...
def setOpenVRHMDForceInterleavedReprojection(self, s: bool) -> None: ...
def setOpenVRHMDMirrorTextureView(self, eyeMode: int) -> None: ...
def setOpenVRHMDTracking(self, s: bool) -> None: ...
def setOpenVRHMDUseHiddenAreaMesh(self, s: bool) -> None: ...
def setOpenVRTracking(self, s: bool) -> None: ...
def setOpenVRTrackingOrigin(self, position: Pnt3f) -> None: ...
def setOpenVRTrackingOriginType(self, originType: int) -> None: ...

class vrOpenVRController:
    __module__: str
    __doc__: str
    __instance_size__: int
    def __class__(self) -> None: ...
    def __delattr__(self) -> None: ...
    def __dir__(self, /): ...
    def __eq__(self) -> None: ...
    def __format__(self, format_spec, /): ...
    def __ge__(self) -> None: ...
    def __getattribute__(self) -> None: ...
    def __getstate__(self, /): ...
    def __gt__(self) -> None: ...
    def __hash__(self) -> None: ...
    def __init__(self, name: str) -> None: ...
    def __init_subclass__(cls) -> None: ...
    def __le__(self) -> None: ...
    def __lt__(self) -> None: ...
    def __ne__(self) -> None: ...
    def __new__(cls) -> None: ...
    def __reduce__(self) -> None: ...
    def __reduce_ex__(self, protocol, /): ...
    def __repr__(self) -> None: ...
    def __setattr__(self) -> None: ...
    def __sizeof__(self, /): ...
    def __str__(self) -> None: ...
    def __subclasshook__(self) -> None: ...
    def addLoop(self) -> None: ...
    def buttonPositionChanged(self, id: Any, position: tuple) -> None: ...
    def buttonPressed(self, id: Any) -> None: ...
    def buttonReleased(self, id: Any) -> None: ...
    def buttonTouched(self, id: Any) -> None: ...
    def buttonUntouched(self, id: Any) -> None: ...
    def callAllConnected(self) -> None: ...
    def connect(self, o: object, arg1: object, arg2: object) -> bool: ...
    def connectSignal(self, signal: str, slot: object, arg1: object, arg2: object) -> bool: ...
    def controllerMoved(self) -> None: ...
    def emitSignal(self, signal: str, arg1: object, arg2: object) -> None: ...
    def getButtonPosition(self, id: Any) -> Vec2f: ...
    def getHandRole(self) -> int: ...
    def getModuleName(self) -> None: ...
    def getTouchpadPosition(self) -> Vec2f: ...
    def getTriggerRatio(self) -> float: ...
    def getVisualizationMode(self) -> int: ...
    def getWorldMatrix(self) -> list: ...
    def gripPressed(self) -> None: ...
    def gripReleased(self) -> None: ...
    def handPoseStarted(self, poseId: int) -> None: ...
    def handPoseStopped(self, poseId: int) -> None: ...
    def handRoleChanged(self, role: int) -> None: ...
    def handTouchContinues(self, touchedNodeId: int, fingerId: int) -> None: ...
    def handTouchStarted(self, touchedNodeId: int, fingerId: int) -> None: ...
    def handTouchStopped(self, touchedNodeId: int, fingerId: int) -> None: ...
    def isActive(self) -> bool: ...
    def isButtonPressed(self, id: Any) -> bool: ...
    def isButtonSupported(self, id: Any) -> bool: ...
    def isButtonTouched(self, id: Any) -> bool: ...
    def isGripPressed(self) -> bool: ...
    def isHandAnimationEnabled(self) -> bool: ...
    def isHandInteractionEnabled(self) -> bool: ...
    def isHandPoseActive(self, poseId: int) -> None: ...
    def isHandTouchPointVisualizationEnabled(self) -> bool: ...
    def isMenuButtonPressed(self) -> bool: ...
    def isTouchpadPressed(self) -> bool: ...
    def isTouchpadTouched(self) -> bool: ...
    def isTriggerPressed(self) -> bool: ...
    def isVisible(self) -> bool: ...
    def loop(self) -> None: ...
    def menuButtonPressed(self) -> None: ...
    def menuButtonReleased(self) -> None: ...
    def pickNode(self) -> vrNodePtr: ...
    def pickNodeEx(self) -> tuple: ...
    def pickNodeWithFinger(self, fingerId: int) -> tuple: ...
    def recEvent(self, state: int) -> None: ...
    def removeConnections(self) -> None: ...
    def setActive(self, state: int) -> None: ...
    def setCustomPickingDirection(self, origin: Pnt3f, direction: Vec3f, color: Vec3f) -> None: ...
    def setHandAnimationEnabled(self, enabled: bool) -> None: ...
    def setHandInteractionEnabled(self, enabled: bool) -> None: ...
    def setHandRole(self, role: int) -> None: ...
    def setHandTouchPointVisualizationEnabled(self, enabled: bool) -> None: ...
    def setPickingAxis(self, axis: int) -> None: ...
    def setUpdateGUIEnabled(self, state: bool) -> None: ...
    def setVisible(self, visible: bool) -> None: ...
    def setVisualizationMode(self, mode: int) -> None: ...
    def showPickingAxis(self, on: bool) -> None: ...
    def subLoop(self) -> None: ...
    def touchpadPositionChanged(self, position: tuple) -> None: ...
    def touchpadPressed(self) -> None: ...
    def touchpadReleased(self) -> None: ...
    def touchpadTouched(self) -> None: ...
    def touchpadUntouched(self) -> None: ...
    def triggerHapticPulse(self, axis: int, duration: int) -> None: ...
    def triggerPressed(self) -> None: ...
    def triggerReleased(self) -> None: ...

class vrOpenVRFrameTimings:
    __module__: str
    __doc__: str
    __instance_size__: int
    def __class__(self) -> None: ...
    def __delattr__(self) -> None: ...
    def __dir__(self, /): ...
    def __eq__(self) -> None: ...
    def __format__(self, format_spec, /): ...
    def __ge__(self) -> None: ...
    def __getattribute__(self) -> None: ...
    def __getstate__(self, /): ...
    def __gt__(self) -> None: ...
    def __hash__(self) -> None: ...
    def __init__(self, source: vrOpenVRFrameTimings) -> None: ...
    def __init_subclass__(cls) -> None: ...
    def __le__(self) -> None: ...
    def __lt__(self) -> None: ...
    def __ne__(self) -> None: ...
    def __new__(cls) -> None: ...
    def __reduce__(self) -> None: ...
    def __reduce_ex__(self, protocol, /): ...
    def __repr__(self) -> None: ...
    def __setattr__(self) -> None: ...
    def __sizeof__(self, /): ...
    def __str__(self) -> None: ...
    def __subclasshook__(self) -> None: ...
    def getClientFrameInterval(self) -> float: ...
    def getCompositorIdleCpu(self) -> float: ...
    def getCompositorRenderCpu(self) -> float: ...
    def getCompositorRenderGpu(self) -> float: ...
    def getCompositorRenderStart(self) -> float: ...
    def getCompositorUpdateEnd(self) -> float: ...
    def getCompositorUpdateStart(self) -> float: ...
    def getFrameId(self) -> int: ...
    def getFrameIndex(self) -> int: ...
    def getMulticastCopyTimeCpu(self) -> float: ...
    def getNewFrameReady(self) -> float: ...
    def getNewPosesReady(self) -> float: ...
    def getNumDroppedFrames(self) -> int: ...
    def getNumFramePresents(self) -> int: ...
    def getNumMisPresented(self) -> int: ...
    def getPostSubmitCpu(self) -> float: ...
    def getPostSubmitGpu(self) -> float: ...
    def getPreSubmitGpu(self) -> float: ...
    def getPresentCallCpu(self) -> float: ...
    def getRenderTimeCpu(self) -> float: ...
    def getReprojectionFlag(self) -> int: ...
    def getSubmitCpu(self) -> float: ...
    def getSubmitFrameTime(self) -> float: ...
    def getSystemTimeInSeconds(self) -> float: ...
    def getTimeBetweenRenderCpu(self) -> float: ...
    def getTimeBetweenSubmitCpu(self) -> float: ...
    def getTimeBetweenWaitGetPosesCpu(self) -> float: ...
    def getTotalRenderGpu(self) -> float: ...
    def getWaitForPresentCpu(self) -> float: ...
    def getWaitGetPosesCalled(self) -> float: ...
    def getWaitGetPosesCpu(self) -> float: ...
