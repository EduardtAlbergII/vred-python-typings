from PySide6.QtGui import *
from PySide6.QtCore import *
from typing import *

__name__: str
__doc__: NoneType
__package__: str
__spec__: ModuleSpec
REPEAT: TextureWrapMode
MIRRORED_REPEAT: TextureWrapMode
DECAL: TextureWrapMode
CLAMP: TextureWrapMode
REPEAT_REPEAT: TextureWrapMode
MIRRORED_REPEAT_REPEAT: TextureWrapMode
DECAL_REPEAT: TextureWrapMode
CLAMP_REPEAT: TextureWrapMode
REPEAT_MIRRORED_REPEAT: TextureWrapMode
MIRRORED_REPEAT_MIRRORED_REPEAT: TextureWrapMode
DECAL_MIRRORED_REPEAT: TextureWrapMode
CLAMP_MIRRORED_REPEAT: TextureWrapMode
REPEAT_DECAL: TextureWrapMode
MIRRORED_REPEAT_DECAL: TextureWrapMode
DECAL_DECAL: TextureWrapMode
CLAMP_DECAL: TextureWrapMode
REPEAT_CLAMP: TextureWrapMode
MIRRORED_REPEAT_CLAMP: TextureWrapMode
DECAL_CLAMP: TextureWrapMode
CLAMP_CLAMP: TextureWrapMode
def QIntList(self) -> None: ...
def TextureWrapMode(self) -> None: ...
def __loader__(self) -> None: ...
def vrMaterialEntryType(self) -> None: ...

class vrdNode:
    children: getset_descriptor
    __doc__: NoneType
    __module__: str
    nameProperty: str
    visibilityFlagProperty: str
    selectableFlagProperty: str
    lockedProperty: str
    visibleProperty: str
    boundingBoxProperty: str
    worldBoundingBoxProperty: str
    def __copy__(self) -> None: ...
    def __delattr__(self) -> None: ...
    def __dir__(self, /): ...
    def __eq__(self) -> None: ...
    def __format__(self, format_spec, /): ...
    def __ge__(self) -> None: ...
    def __getattribute__(self) -> None: ...
    def __getstate__(self, /): ...
    def __gt__(self) -> None: ...
    def __hash__(self) -> None: ...
    def __init__(self) -> None: ...
    def __init_subclass__(cls) -> None: ...
    def __le__(self) -> None: ...
    def __lshift__(self) -> None: ...
    def __lt__(self) -> None: ...
    def __ne__(self) -> None: ...
    def __new__(cls) -> None: ...
    def __reduce__(self, /): ...
    def __reduce_ex__(self, protocol, /): ...
    def __repr__(self) -> None: ...
    def __rlshift__(self) -> None: ...
    def __rrshift__(self) -> None: ...
    def __rshift__(self) -> None: ...
    def __setattr__(self) -> None: ...
    def __sizeof__(self, /): ...
    def __str__(self) -> None: ...
    def __subclasshook__(self) -> None: ...
    def applyMaterial(self, material: vrdMaterial) -> None: ...
    def asType(self, arg__1: object) -> object: ...
    def getBoundingBox(self) -> vrdBoundingBox: ...
    def getChild(self, index: int) -> vrdNode: ...
    def getChildCount(self) -> int: ...
    def getChildIndex(self, child: vrdNode) -> int: ...
    def getChildren(self) -> List[vrdNode]: ...
    def getChildrenRecursive(self) -> List[vrdNode]: ...
    def getChildrenRef(self) -> vrdNodeList: ...
    def getLocked(self) -> bool: ...
    def getMaterial(self) -> vrdMaterial: ...
    def getName(self) -> str: ...
    def getObjectId(self) -> int: ...
    def getOrCreateTransformNode(self) -> vrdNode: ...
    def getParent(self) -> vrdNode: ...
    def getPath(self) -> str: ...
    def getSelectableFlag(self) -> bool: ...
    def getSharedNodes(self) -> List[vrdNode]: ...
    def getSynchronizedNodes(self) -> List[vrdNode]: ...
    def getUniquePath(self) -> str: ...
    def getVisibilityFlag(self) -> bool: ...
    def getWorldBoundingBox(self) -> vrdBoundingBox: ...
    def getWorldTransform(self) -> QMatrix4x4: ...
    def hasParent(self, parent: vrdNode) -> bool: ...
    def isEditable(self) -> bool: ...
    def isEditedAsset(self) -> bool: ...
    def isGroup(self) -> bool: ...
    def isImplicitShared(self) -> bool: ...
    def isNull(self) -> bool: ...
    def isShared(self) -> bool: ...
    def isSharedWith(self, node: vrdNode) -> bool: ...
    def isSynchronized(self) -> bool: ...
    def isType(self, arg__1: object) -> bool: ...
    def isValid(self) -> bool: ...
    def isVisible(self) -> bool: ...
    def setLocked(self, locked: bool) -> None: ...
    def setName(self, name: str) -> None: ...
    def setSelectableFlag(self, selectable: bool) -> None: ...
    def setVisibilityFlag(self, visible: bool) -> None: ...

class vrAnnotationService:
    __doc__: NoneType
    __module__: str
    staticMetaObject: QMetaObject
    def __delattr__(self) -> None: ...
    def __dir__(self, /): ...
    def __eq__(self) -> None: ...
    def __format__(self, format_spec, /): ...
    def __ge__(self) -> None: ...
    def __getattribute__(self) -> None: ...
    def __getstate__(self, /): ...
    def __gt__(self) -> None: ...
    def __hash__(self) -> None: ...
    def __init__(self) -> None: ...
    def __init_subclass__(cls) -> None: ...
    def __le__(self) -> None: ...
    def __lt__(self) -> None: ...
    def __ne__(self) -> None: ...
    def __new__(cls) -> None: ...
    def __reduce__(self, /): ...
    def __reduce_ex__(self, protocol, /): ...
    def __repr__(self) -> None: ...
    def __setattr__(self) -> None: ...
    def __sizeof__(self, /): ...
    def __str__(self) -> None: ...
    def __subclasshook__(self) -> None: ...
    def annotationCreated(self) -> None: ...
    def annotationsAdded(self) -> None: ...
    def annotationsDeleted(self) -> None: ...
    def blockSignals(self, b: bool) -> bool: ...
    def childEvent(self, event: QChildEvent) -> None: ...
    def children(self) -> List[QObject]: ...
    def connect(self) -> None: ...
    def connectNotify(self, signal: QMetaMethod) -> None: ...
    def createAnnotation(self, name: str) -> vrdAnnotationNode: ...
    def customEvent(self, event: QEvent) -> None: ...
    def deleteAnnotation(self, annotation: vrdAnnotationNode) -> None: ...
    def deleteLater(self) -> None: ...
    def destroyed(self) -> None: ...
    def disconnect(self) -> None: ...
    def disconnectNotify(self, signal: QMetaMethod) -> None: ...
    def dumpObjectInfo(self) -> None: ...
    def dumpObjectTree(self) -> None: ...
    def duplicateAnnotation(self, annotation: vrdAnnotationNode) -> vrdAnnotationNode: ...
    def dynamicPropertyNames(self) -> List[QByteArray]: ...
    def emit(self, arg__1: bytes, *args: None) -> bool: ...
    def event(self, event: QEvent) -> bool: ...
    def eventFilter(self, watched: QObject, event: QEvent) -> bool: ...
    def findAnnotation(self, name: str) -> vrdAnnotationNode: ...
    def findChild(self, type: type, name: str = {}, options: Qt.FindChildOptions = Qt.FindChildOption.FindChildrenRecursively) -> object: ...
    def getAnnotationRoot(self) -> vrdNode: ...
    def getAnnotations(self) -> List[vrdAnnotationNode]: ...
    def getDefaultBackgroundColor(self) -> QColor: ...
    def getDefaultFontColor(self) -> QColor: ...
    def getDefaultLineColor(self) -> QColor: ...
    def getDefaultScalingMode(self) -> vrAnnotationTypes.ScalingMode: ...
    def getDefaultSize(self) -> float: ...
    def getDefaultUseSceneNodeVisibility(self) -> bool: ...
    def getSelection(self) -> List[vrdAnnotationNode]: ...
    def getShowAnnotations(self) -> bool: ...
    def inherits(self, classname: bytes) -> bool: ...
    def init(self) -> None: ...
    def installEventFilter(self, filterObj: QObject) -> None: ...
    def isSignalConnected(self, signal: QMetaMethod) -> bool: ...
    def isWidgetType(self) -> bool: ...
    def isWindowType(self) -> bool: ...
    def killTimer(self, id: int) -> None: ...
    def loadAnnotations(self, path: str) -> List[vrdAnnotationNode]: ...
    def metaObject(self) -> QMetaObject: ...
    def moveToThread(self, thread: QThread) -> None: ...
    def objectName(self) -> str: ...
    def objectNameChanged(self) -> None: ...
    def parent(self) -> QObject: ...
    def pickAnnotation(self, annotation: vrdAnnotationNode) -> None: ...
    def property(self, name: str) -> Any: ...
    def receivers(self, signal: bytes) -> int: ...
    def removeEventFilter(self, obj: QObject) -> None: ...
    def saveAnnotations(self, annotations: Sequence[vrdAnnotationNode], path: str) -> None: ...
    def selectionChanged(self) -> None: ...
    def sender(self) -> QObject: ...
    def senderSignalIndex(self) -> int: ...
    def setDefaultBackgroundColor(self, color: Union[QColor, QRgba64, Any, Qt.GlobalColor, str, int]) -> None: ...
    def setDefaultFontColor(self, color: Union[QColor, QRgba64, Any, Qt.GlobalColor, str, int]) -> None: ...
    def setDefaultLineColor(self, color: Union[QColor, QRgba64, Any, Qt.GlobalColor, str, int]) -> None: ...
    def setDefaultScalingMode(self, mode: vrAnnotationTypes.ScalingMode) -> None: ...
    def setDefaultSize(self, size: float) -> None: ...
    def setDefaultUseSceneNodeVisibility(self, use: bool) -> None: ...
    def setObjectName(self, name: str) -> None: ...
    def setParent(self, parent: QObject) -> None: ...
    def setProperty(self, name: str, value: Any) -> bool: ...
    def setSelection(self, annotations: Sequence[vrdAnnotationNode]) -> None: ...
    def setShowAnnotations(self, value: bool) -> None: ...
    def showAnnotationsChanged(self) -> None: ...
    def signalsBlocked(self) -> bool: ...
    def startTimer(self, interval: int, timerType: Qt.TimerType = Qt.TimerType.CoarseTimer) -> int: ...
    def thread(self) -> QThread: ...
    def timerEvent(self, event: QTimerEvent) -> None: ...
    def tr(self) -> None: ...

class vrAnnotationTypes:
    __doc__: NoneType
    __module__: str
    def ScalingMode(self) -> None: ...
    def __delattr__(self) -> None: ...
    def __dir__(self, /): ...
    def __eq__(self) -> None: ...
    def __format__(self, format_spec, /): ...
    def __ge__(self) -> None: ...
    def __getattribute__(self) -> None: ...
    def __getstate__(self, /): ...
    def __gt__(self) -> None: ...
    def __hash__(self) -> None: ...
    def __init__(self) -> None: ...
    def __init_subclass__(cls) -> None: ...
    def __le__(self) -> None: ...
    def __lt__(self) -> None: ...
    def __ne__(self) -> None: ...
    def __new__(cls) -> None: ...
    def __reduce__(self, /): ...
    def __reduce_ex__(self, protocol, /): ...
    def __repr__(self) -> None: ...
    def __setattr__(self) -> None: ...
    def __sizeof__(self, /): ...
    def __str__(self) -> None: ...
    def __subclasshook__(self) -> None: ...

class vrAssetsService:
    __doc__: NoneType
    __module__: str
    staticMetaObject: QMetaObject
    def __delattr__(self) -> None: ...
    def __dir__(self, /): ...
    def __eq__(self) -> None: ...
    def __format__(self, format_spec, /): ...
    def __ge__(self) -> None: ...
    def __getattribute__(self) -> None: ...
    def __getstate__(self, /): ...
    def __gt__(self) -> None: ...
    def __hash__(self) -> None: ...
    def __init__(self) -> None: ...
    def __init_subclass__(cls) -> None: ...
    def __le__(self) -> None: ...
    def __lt__(self) -> None: ...
    def __ne__(self) -> None: ...
    def __new__(cls) -> None: ...
    def __reduce__(self, /): ...
    def __reduce_ex__(self, protocol, /): ...
    def __repr__(self) -> None: ...
    def __setattr__(self) -> None: ...
    def __sizeof__(self, /): ...
    def __str__(self) -> None: ...
    def __subclasshook__(self) -> None: ...
    def assetsChanged(self) -> None: ...
    def blockSignals(self, b: bool) -> bool: ...
    def childEvent(self, event: QChildEvent) -> None: ...
    def children(self) -> List[QObject]: ...
    def connect(self) -> None: ...
    def connectNotify(self, signal: QMetaMethod) -> None: ...
    def customEvent(self, event: QEvent) -> None: ...
    def deleteLater(self) -> None: ...
    def destroyed(self) -> None: ...
    def disconnect(self) -> None: ...
    def disconnectNotify(self, signal: QMetaMethod) -> None: ...
    def dumpObjectInfo(self) -> None: ...
    def dumpObjectTree(self) -> None: ...
    def dynamicPropertyNames(self) -> List[QByteArray]: ...
    def emit(self, arg__1: bytes, *args: None) -> bool: ...
    def event(self, event: QEvent) -> bool: ...
    def eventFilter(self, watched: QObject, event: QEvent) -> bool: ...
    def findChild(self, type: type, name: str = {}, options: Qt.FindChildOptions = Qt.FindChildOption.FindChildrenRecursively) -> object: ...
    def inherits(self, classname: bytes) -> bool: ...
    def init(self) -> None: ...
    def installEventFilter(self, filterObj: QObject) -> None: ...
    def isSignalConnected(self, signal: QMetaMethod) -> bool: ...
    def isWidgetType(self) -> bool: ...
    def isWindowType(self) -> bool: ...
    def killTimer(self, id: int) -> None: ...
    def loadGeometriesByUUID(self, uuids: Sequence[str], parentNode: vrdNode = Default(vrdNode)) -> List[vrdNode]: ...
    def loadMetadataSetsByUUID(self, uuids: Sequence[str]) -> List[vrdMetadataSet]: ...
    def loadSceneplatesByUUID(self, uuids: Sequence[str], parentNode: vrdNode = Default(vrdNode)) -> List[vrdNode]: ...
    def metaObject(self) -> QMetaObject: ...
    def moveToThread(self, thread: QThread) -> None: ...
    def objectName(self) -> str: ...
    def objectNameChanged(self) -> None: ...
    def parent(self) -> QObject: ...
    def property(self, name: str) -> Any: ...
    def receivers(self, signal: bytes) -> int: ...
    def removeEventFilter(self, obj: QObject) -> None: ...
    def sender(self) -> QObject: ...
    def senderSignalIndex(self) -> int: ...
    def setObjectName(self, name: str) -> None: ...
    def setParent(self, parent: QObject) -> None: ...
    def setProperty(self, name: str, value: Any) -> bool: ...
    def signalsBlocked(self) -> bool: ...
    def startTimer(self, interval: int, timerType: Qt.TimerType = Qt.TimerType.CoarseTimer) -> int: ...
    def thread(self) -> QThread: ...
    def timerEvent(self, event: QTimerEvent) -> None: ...
    def tr(self) -> None: ...

class vrBakeService:
    __doc__: NoneType
    __module__: str
    staticMetaObject: QMetaObject
    def __delattr__(self) -> None: ...
    def __dir__(self, /): ...
    def __eq__(self) -> None: ...
    def __format__(self, format_spec, /): ...
    def __ge__(self) -> None: ...
    def __getattribute__(self) -> None: ...
    def __getstate__(self, /): ...
    def __gt__(self) -> None: ...
    def __hash__(self) -> None: ...
    def __init__(self) -> None: ...
    def __init_subclass__(cls) -> None: ...
    def __le__(self) -> None: ...
    def __lt__(self) -> None: ...
    def __ne__(self) -> None: ...
    def __new__(cls) -> None: ...
    def __reduce__(self, /): ...
    def __reduce_ex__(self, protocol, /): ...
    def __repr__(self) -> None: ...
    def __setattr__(self) -> None: ...
    def __sizeof__(self, /): ...
    def __str__(self) -> None: ...
    def __subclasshook__(self) -> None: ...
    def blockSignals(self, b: bool) -> bool: ...
    def childEvent(self, event: QChildEvent) -> None: ...
    def children(self) -> List[QObject]: ...
    def connect(self) -> None: ...
    def connectNotify(self, signal: QMetaMethod) -> None: ...
    def customEvent(self, event: QEvent) -> None: ...
    def deleteLater(self) -> None: ...
    def destroyed(self) -> None: ...
    def disconnect(self) -> None: ...
    def disconnectNotify(self, signal: QMetaMethod) -> None: ...
    def dumpObjectInfo(self) -> None: ...
    def dumpObjectTree(self) -> None: ...
    def dynamicPropertyNames(self) -> List[QByteArray]: ...
    def emit(self, arg__1: bytes, *args: None) -> bool: ...
    def event(self, event: QEvent) -> bool: ...
    def eventFilter(self, watched: QObject, event: QEvent) -> bool: ...
    def findChild(self, type: type, name: str = {}, options: Qt.FindChildOptions = Qt.FindChildOption.FindChildrenRecursively) -> object: ...
    def getTonemapLightmapPreviews(self) -> bool: ...
    def inherits(self, classname: bytes) -> bool: ...
    def init(self) -> None: ...
    def installEventFilter(self, filterObj: QObject) -> None: ...
    def isSignalConnected(self, signal: QMetaMethod) -> bool: ...
    def isWidgetType(self) -> bool: ...
    def isWindowType(self) -> bool: ...
    def killTimer(self, id: int) -> None: ...
    def loadLightmaps(self, geometryNodes: Sequence[vrdGeometryNode], filePaths: Sequence[str]) -> None: ...
    def metaObject(self) -> QMetaObject: ...
    def moveToThread(self, thread: QThread) -> None: ...
    def objectName(self) -> str: ...
    def objectNameChanged(self) -> None: ...
    def onPresetsChanged(self) -> None: ...
    def parent(self) -> QObject: ...
    def progressChanged(self) -> None: ...
    def progressFinished(self) -> None: ...
    def progressStarted(self) -> None: ...
    def property(self, name: str) -> Any: ...
    def receivers(self, signal: bytes) -> int: ...
    def removeEventFilter(self, obj: QObject) -> None: ...
    def repathLightmaps(self, geometryNodes: Sequence[vrdGeometryNode], path: str) -> None: ...
    def saveLightmaps(self, geometryNodes: Sequence[vrdGeometryNode], path: str) -> None: ...
    def sender(self) -> QObject: ...
    def senderSignalIndex(self) -> int: ...
    def setObjectName(self, name: str) -> None: ...
    def setParent(self, parent: QObject) -> None: ...
    def setProperty(self, name: str, value: Any) -> bool: ...
    def setTonemapLightmapPreviews(self, value: bool) -> None: ...
    def signalsBlocked(self) -> bool: ...
    def startTimer(self, interval: int, timerType: Qt.TimerType = Qt.TimerType.CoarseTimer) -> int: ...
    def thread(self) -> QThread: ...
    def timerEvent(self, event: QTimerEvent) -> None: ...
    def tonemapLightmapPreviewsChanged(self) -> None: ...
    def tr(self) -> None: ...

class vrBakeTypes:
    __doc__: NoneType
    __module__: str
    None_: BakeType
    Vertex: BakeType
    Texture: BakeType
    def AmbientOcclusionWeight(self) -> None: ...
    def BakeState(self) -> None: ...
    def BakeType(self) -> None: ...
    def DenoiserType(self) -> None: ...
    def DirectIlluminationMode(self) -> None: ...
    def IlluminationQuality(self) -> None: ...
    def Renderer(self) -> None: ...
    def SubdivisionQuality(self) -> None: ...
    def UVGeneration(self) -> None: ...
    def __delattr__(self) -> None: ...
    def __dir__(self, /): ...
    def __eq__(self) -> None: ...
    def __format__(self, format_spec, /): ...
    def __ge__(self) -> None: ...
    def __getattribute__(self) -> None: ...
    def __getstate__(self, /): ...
    def __gt__(self) -> None: ...
    def __hash__(self) -> None: ...
    def __init__(self) -> None: ...
    def __init_subclass__(cls) -> None: ...
    def __le__(self) -> None: ...
    def __lt__(self) -> None: ...
    def __ne__(self) -> None: ...
    def __new__(cls) -> None: ...
    def __reduce__(self, /): ...
    def __reduce_ex__(self, protocol, /): ...
    def __repr__(self) -> None: ...
    def __setattr__(self) -> None: ...
    def __sizeof__(self, /): ...
    def __str__(self) -> None: ...
    def __subclasshook__(self) -> None: ...

class vrCADFileTypes:
    __doc__: NoneType
    __module__: str
    Cinema4D: FileType
    Cosmo: FileType
    DesignWeb: FileType
    FBX: FileType
    Obj: FileType
    OpenSG: FileType
    PLMXML: FileType
    Python: FileType
    ThreeDS: FileType
    VRED: FileType
    VRML: FileType
    ACIS: FileType
    Alias: FileType
    AutoCAD: FileType
    CatiaV4: FileType
    CatiaV5: FileType
    DGN: FileType
    Inventor: FileType
    JT: FileType
    NX: FileType
    IGES: FileType
    Parasolid: FileType
    ProE: FileType
    Rhino: FileType
    Sketchup: FileType
    SolidEdge: FileType
    SolidWorks: FileType
    Step: FileType
    STL: FileType
    USD: FileType
    C3MF: FileType
    IFC: FileType
    SLP: FileType
    Generic: FileType
    Undefined: FileType
    Unsupported: FileType
    First: FileType
    Last: FileType
    kSucceeded: JobState
    kFailed: JobState
    kAborted: JobState
    kIncomplete: JobState
    kRunning: JobState
    kUnknown: JobState
    def FileType(self) -> None: ...
    def JobState(self) -> None: ...
    def __delattr__(self) -> None: ...
    def __dir__(self, /): ...
    def __eq__(self) -> None: ...
    def __format__(self, format_spec, /): ...
    def __ge__(self) -> None: ...
    def __getattribute__(self) -> None: ...
    def __getstate__(self, /): ...
    def __gt__(self) -> None: ...
    def __hash__(self) -> None: ...
    def __init__(self) -> None: ...
    def __init_subclass__(cls) -> None: ...
    def __le__(self) -> None: ...
    def __lt__(self) -> None: ...
    def __ne__(self) -> None: ...
    def __new__(cls) -> None: ...
    def __reduce__(self, /): ...
    def __reduce_ex__(self, protocol, /): ...
    def __repr__(self) -> None: ...
    def __setattr__(self) -> None: ...
    def __sizeof__(self, /): ...
    def __str__(self) -> None: ...
    def __subclasshook__(self) -> None: ...

class vrCameraFromAtUp:
    __doc__: NoneType
    __hash__: NoneType
    __module__: str
    def __copy__(self) -> None: ...
    def __delattr__(self) -> None: ...
    def __dir__(self, /): ...
    def __eq__(self) -> None: ...
    def __format__(self, format_spec, /): ...
    def __ge__(self) -> None: ...
    def __getattribute__(self) -> None: ...
    def __getstate__(self, /): ...
    def __gt__(self) -> None: ...
    def __init__(self) -> None: ...
    def __init_subclass__(cls) -> None: ...
    def __le__(self) -> None: ...
    def __lshift__(self) -> None: ...
    def __lt__(self) -> None: ...
    def __ne__(self) -> None: ...
    def __new__(cls) -> None: ...
    def __reduce__(self, /): ...
    def __reduce_ex__(self, protocol, /): ...
    def __repr__(self) -> None: ...
    def __rlshift__(self) -> None: ...
    def __rrshift__(self) -> None: ...
    def __rshift__(self) -> None: ...
    def __setattr__(self) -> None: ...
    def __sizeof__(self, /): ...
    def __str__(self) -> None: ...
    def __subclasshook__(self) -> None: ...
    def getAt(self) -> QVector3D: ...
    def getFrom(self) -> QVector3D: ...
    def getUp(self) -> QVector3D: ...
    def setAt(self, at: QVector3D) -> None: ...
    def setFrom(self, from_: QVector3D) -> None: ...
    def setUp(self, up: QVector3D) -> None: ...

class vrCameraService:
    __doc__: NoneType
    __module__: str
    staticMetaObject: QMetaObject
    def __delattr__(self) -> None: ...
    def __dir__(self, /): ...
    def __eq__(self) -> None: ...
    def __format__(self, format_spec, /): ...
    def __ge__(self) -> None: ...
    def __getattribute__(self) -> None: ...
    def __getstate__(self, /): ...
    def __gt__(self) -> None: ...
    def __hash__(self) -> None: ...
    def __init__(self) -> None: ...
    def __init_subclass__(cls) -> None: ...
    def __le__(self) -> None: ...
    def __lt__(self) -> None: ...
    def __ne__(self) -> None: ...
    def __new__(cls) -> None: ...
    def __reduce__(self, /): ...
    def __reduce_ex__(self, protocol, /): ...
    def __repr__(self) -> None: ...
    def __setattr__(self) -> None: ...
    def __sizeof__(self, /): ...
    def __str__(self) -> None: ...
    def __subclasshook__(self) -> None: ...
    def attributesPasted(self) -> None: ...
    def blockSignals(self, b: bool) -> bool: ...
    def cameraActivated(self) -> None: ...
    def cameraAnimationStopped(self) -> None: ...
    def cameraTrackFinished(self) -> None: ...
    def cameraTrackStarted(self) -> None: ...
    def camerasChanged(self) -> None: ...
    def childEvent(self, event: QChildEvent) -> None: ...
    def children(self) -> List[QObject]: ...
    def connect(self) -> None: ...
    def connectNotify(self, signal: QMetaMethod) -> None: ...
    def copiedNodesAvailable(self) -> bool: ...
    def copyNodes(self, nodes: Sequence[vrdNode]) -> None: ...
    def createCamera(self, name: str, mode: vrCameraTypes.CameraProjectionMode = vrCameraTypes.CameraProjectionMode.ProjectionPerspective, constraint: vrCameraTypes.CameraConstraint = vrCameraTypes.CameraConstraint.ConstraintNone, sceneGraphParentNode: vrdNode = Default(vrdNode), cameraGraphParentNode: vrdNode = Default(vrdNode)) -> vrdCameraNode: ...
    def createCameraGroup(self, name: str, cameraGraphParentNode: vrdNode = Default(vrdNode)) -> vrdNode: ...
    def createCameraTrack(self, name: str, cameraNode: vrdCameraNode = Default(vrdCameraNode)) -> vrdCameraTrackNode: ...
    def createViewpoint(self, name: str, cameraTrack: vrdCameraTrackNode = Default(vrdCameraTrackNode)) -> vrdViewpointNode: ...
    def customEvent(self, event: QEvent) -> None: ...
    def deleteLater(self) -> None: ...
    def destroyed(self) -> None: ...
    def disconnect(self) -> None: ...
    def disconnectNotify(self, signal: QMetaMethod) -> None: ...
    def dumpObjectInfo(self) -> None: ...
    def dumpObjectTree(self) -> None: ...
    def duplicateNode(self, node: vrdNode) -> vrdNode: ...
    def dynamicPropertyNames(self) -> List[QByteArray]: ...
    def emit(self, arg__1: bytes, *args: None) -> bool: ...
    def event(self, event: QEvent) -> bool: ...
    def eventFilter(self, watched: QObject, event: QEvent) -> bool: ...
    def findChild(self, type: type, name: str = {}, options: Qt.FindChildOptions = Qt.FindChildOption.FindChildrenRecursively) -> object: ...
    def getActiveCamera(self, useCameraGraph: bool = False) -> vrdCameraNode: ...
    def getAllCameraTracks(self) -> List[vrdCameraTrackNode]: ...
    def getAllViewpoints(self) -> List[vrdViewpointNode]: ...
    def getCamera(self, name: str, useCameraGraph: bool = False) -> vrdCameraNode: ...
    def getCameraNames(self) -> List[str]: ...
    def getCameraRoot(self) -> vrdNode: ...
    def getCameras(self, useCameraGraph: bool = False) -> List[vrdCameraNode]: ...
    def getSelectedNodes(self) -> List[vrdNode]: ...
    def getViewpoint(self, name: str) -> vrdViewpointNode: ...
    def getViewpointCreationMode(self) -> vrCameraTypes.ViewpointCreationMode: ...
    def inherits(self, classname: bytes) -> bool: ...
    def init(self) -> None: ...
    def installEventFilter(self, filterObj: QObject) -> None: ...
    def isSignalConnected(self, signal: QMetaMethod) -> bool: ...
    def isWidgetType(self) -> bool: ...
    def isWindowType(self) -> bool: ...
    def killTimer(self, id: int) -> None: ...
    def load(self, filename: str) -> List[vrdNode]: ...
    def metaObject(self) -> QMetaObject: ...
    def moveToThread(self, thread: QThread) -> None: ...
    def objectName(self) -> str: ...
    def objectNameChanged(self) -> None: ...
    def parent(self) -> QObject: ...
    def pasteAttributes(self, cameras: Sequence[vrdCameraBaseNode], option: vrCameraTypes.PasteOption = vrCameraTypes.PasteOption.PasteAllAttributes) -> None: ...
    def pasteNodes(self, targetNodes: Sequence[vrdNode]) -> List[vrdNode]: ...
    def property(self, name: str) -> Any: ...
    def receivers(self, signal: bytes) -> int: ...
    def removeEventFilter(self, obj: QObject) -> None: ...
    def requestGUIUpdate(self) -> None: ...
    def saveCameras(self, nodes: Sequence[vrdNode], filename: str) -> bool: ...
    def saveNodes(self, nodes: Sequence[vrdNode], filename: str) -> bool: ...
    def saveViewpoints(self, filename: str) -> bool: ...
    def selectionChanged(self) -> None: ...
    def sender(self) -> QObject: ...
    def senderSignalIndex(self) -> int: ...
    def setObjectName(self, name: str) -> None: ...
    def setParent(self, parent: QObject) -> None: ...
    def setProperty(self, name: str, value: Any) -> bool: ...
    def setSelectedNodes(self, nodes: Sequence[vrdNode]) -> None: ...
    def setViewpointCreationMode(self, mode: vrCameraTypes.ViewpointCreationMode) -> None: ...
    def signalsBlocked(self) -> bool: ...
    def startTimer(self, interval: int, timerType: Qt.TimerType = Qt.TimerType.CoarseTimer) -> int: ...
    def thread(self) -> QThread: ...
    def timerEvent(self, event: QTimerEvent) -> None: ...
    def tr(self) -> None: ...
    def viewChanged(self) -> None: ...
    def viewWentIdle(self) -> None: ...
    def viewpointActivated(self) -> None: ...
    def zoomToNodes(self, nodes: Sequence[vrdNode]) -> None: ...

class vrCameraTypes:
    __doc__: NoneType
    __module__: str
    XYZ: VanishingLinesType
    XY: VanishingLinesType
    XZ: VanishingLinesType
    YZ: VanishingLinesType
    IgnoreTrackingMatrix: ViewpointCreationMode
    IncludeTrackingMatrix: ViewpointCreationMode
    InvalidCameraTrack: CameraTrackType
    RegularCameraTrack: CameraTrackType
    RenderQueueCameraTrack: CameraTrackType
    VariantSetCameraTrack: CameraTrackType
    ProjectionPerspective: CameraProjectionMode
    ProjectionOrthographic: CameraProjectionMode
    ProjectionSphericalMap: CameraProjectionMode
    ProjectionPetersMap: CameraProjectionMode
    ProjectionVerticalCross: CameraProjectionMode
    ProjectionHorizontalCross: CameraProjectionMode
    ProjectionOmnidirectional: CameraProjectionMode
    ProjectionCustomMatrix: CameraProjectionMode
    ConstraintNone: CameraConstraint
    ConstraintAim: CameraConstraint
    ConstraintAimUp: CameraConstraint
    TonemapperReinhardLuminance: CameraTonemapper
    TonemapperReinhardRGB: CameraTonemapper
    TonemapperLogarithmicLuminance: CameraTonemapper
    TonemapperLogarithmicRGB: CameraTonemapper
    TonemapperFilmic: CameraTonemapper
    TonemapperPhysicalCamera: CameraTonemapper
    TonemapperLuminance: CameraTonemapper
    TonemapperIlluminance: CameraTonemapper
    StereoLayoutTopBottom: CameraStereoLayout
    StereoLayoutLeftRight: CameraStereoLayout
    StereoLayoutLeftEye: CameraStereoLayout
    StereoLayoutRightEye: CameraStereoLayout
    CandelaMappingLogarithmicRGB: CameraCandelaMapping
    CandelaMappingLogarithmicHSV: CameraCandelaMapping
    CandelaMappingLinearRGB: CameraCandelaMapping
    CandelaMappingLinearHSV: CameraCandelaMapping
    CameraResponseCurveLuminance: CameraResponseCurveMode
    CameraResponseCurveRed: CameraResponseCurveMode
    CameraResponseCurveGreen: CameraResponseCurveMode
    CameraResponseCurveBlue: CameraResponseCurveMode
    CameraResponseCurveRGB: CameraResponseCurveMode
    CustomCurve: CameraSensorResponse
    SyncolorAces10: CameraSensorResponse
    SyncolorAces07: CameraSensorResponse
    SRGBColorspace: CameraColorspace
    Aces10Colorspace: CameraColorspace
    BlendOff: BlendMode
    BlendVignette: BlendMode
    BlendImage: BlendMode
    CameraLeftEye: CameraEye
    CameraRightEye: CameraEye
    X: CameraAxis
    Y: CameraAxis
    Z: CameraAxis
    CollisionTriangleBased: CollisionStructureBuildMethod
    CollisionBoundingBoxBased: CollisionStructureBuildMethod
    TurntableCounterClockwise: TurntableDirection
    TurntableClockwise: TurntableDirection
    PasteAllAttributes: PasteOption
    PasteViewingAttributes: PasteOption
    PasteCameraAttributes: PasteOption
    PasteTonemappingAttributes: PasteOption
    PasteColorCorrectionAttributes: PasteOption
    PasteGlowAttributes: PasteOption
    PasteGlareAttributes: PasteOption
    PasteBlendingAttributes: PasteOption
    PasteFogAttributes: PasteOption
    PastePerspectiveMatchAttributes: PasteOption
    LocalSpace: CameraSpace
    GlobalSpace: CameraSpace
    Vertical: FovMode
    Horizontal: FovMode
    Realistic: FogFalloffMode
    Linear: FogFalloffMode
    UltraLow: InteractiveDofQuality
    Low: InteractiveDofQuality
    Medium: InteractiveDofQuality
    High: InteractiveDofQuality
    UltraHigh: InteractiveDofQuality
    Off: DepthOfFieldMode
    Stillframe: DepthOfFieldMode
    Always: DepthOfFieldMode
    def BlendMode(self) -> None: ...
    def CameraAxis(self) -> None: ...
    def CameraCandelaMapping(self) -> None: ...
    def CameraColorspace(self) -> None: ...
    def CameraConstraint(self) -> None: ...
    def CameraEye(self) -> None: ...
    def CameraProjectionMode(self) -> None: ...
    def CameraResponseCurveMode(self) -> None: ...
    def CameraSensorResponse(self) -> None: ...
    def CameraSpace(self) -> None: ...
    def CameraStereoLayout(self) -> None: ...
    def CameraTonemapper(self) -> None: ...
    def CameraTrackType(self) -> None: ...
    def CollisionStructureBuildMethod(self) -> None: ...
    def DepthOfFieldMode(self) -> None: ...
    def FogFalloffMode(self) -> None: ...
    def FovMode(self) -> None: ...
    def InteractiveDofQuality(self) -> None: ...
    def PasteOption(self) -> None: ...
    def TurntableDirection(self) -> None: ...
    def VanishingLinesType(self) -> None: ...
    def ViewpointCreationMode(self) -> None: ...
    def __delattr__(self) -> None: ...
    def __dir__(self, /): ...
    def __eq__(self) -> None: ...
    def __format__(self, format_spec, /): ...
    def __ge__(self) -> None: ...
    def __getattribute__(self) -> None: ...
    def __getstate__(self, /): ...
    def __gt__(self) -> None: ...
    def __hash__(self) -> None: ...
    def __init__(self) -> None: ...
    def __init_subclass__(cls) -> None: ...
    def __le__(self) -> None: ...
    def __lt__(self) -> None: ...
    def __ne__(self) -> None: ...
    def __new__(cls) -> None: ...
    def __reduce__(self, /): ...
    def __reduce_ex__(self, protocol, /): ...
    def __repr__(self) -> None: ...
    def __setattr__(self) -> None: ...
    def __sizeof__(self, /): ...
    def __str__(self) -> None: ...
    def __subclasshook__(self) -> None: ...

class vrClusterManagerService:
    __doc__: NoneType
    __module__: str
    staticMetaObject: QMetaObject
    def __delattr__(self) -> None: ...
    def __dir__(self, /): ...
    def __eq__(self) -> None: ...
    def __format__(self, format_spec, /): ...
    def __ge__(self) -> None: ...
    def __getattribute__(self) -> None: ...
    def __getstate__(self, /): ...
    def __gt__(self) -> None: ...
    def __hash__(self) -> None: ...
    def __init__(self) -> None: ...
    def __init_subclass__(cls) -> None: ...
    def __le__(self) -> None: ...
    def __lt__(self) -> None: ...
    def __ne__(self) -> None: ...
    def __new__(cls) -> None: ...
    def __reduce__(self, /): ...
    def __reduce_ex__(self, protocol, /): ...
    def __repr__(self) -> None: ...
    def __setattr__(self) -> None: ...
    def __sizeof__(self, /): ...
    def __str__(self) -> None: ...
    def __subclasshook__(self) -> None: ...
    def blockSignals(self, b: bool) -> bool: ...
    def childEvent(self, event: QChildEvent) -> None: ...
    def children(self) -> List[QObject]: ...
    def connect(self) -> None: ...
    def connectNotify(self, signal: QMetaMethod) -> None: ...
    def customEvent(self, event: QEvent) -> None: ...
    def deleteLater(self) -> None: ...
    def destroyed(self) -> None: ...
    def disconnect(self) -> None: ...
    def disconnectNotify(self, signal: QMetaMethod) -> None: ...
    def disconnected(self) -> None: ...
    def dumpObjectInfo(self) -> None: ...
    def dumpObjectTree(self) -> None: ...
    def dynamicPropertyNames(self) -> List[QByteArray]: ...
    def emit(self, arg__1: bytes, *args: None) -> bool: ...
    def event(self, event: QEvent) -> bool: ...
    def eventFilter(self, watched: QObject, event: QEvent) -> bool: ...
    def findChild(self, type: type, name: str = {}, options: Qt.FindChildOptions = Qt.FindChildOption.FindChildrenRecursively) -> object: ...
    def getJobQueuesNames(self) -> List[str]: ...
    def getSessionBookingId(self) -> str: ...
    def inherits(self, classname: bytes) -> bool: ...
    def init(self) -> None: ...
    def installEventFilter(self, filterObj: QObject) -> None: ...
    def isManagerConnected(self) -> bool: ...
    def isSignalConnected(self, signal: QMetaMethod) -> bool: ...
    def isWidgetType(self) -> bool: ...
    def isWindowType(self) -> bool: ...
    def killTimer(self, id: int) -> None: ...
    def login(self, server: str, user: str, passwd: str) -> bool: ...
    def logoff(self) -> None: ...
    def metaObject(self) -> QMetaObject: ...
    def moveToThread(self, thread: QThread) -> None: ...
    def objectName(self) -> str: ...
    def objectNameChanged(self) -> None: ...
    def parent(self) -> QObject: ...
    def property(self, name: str) -> Any: ...
    def receivers(self, signal: bytes) -> int: ...
    def removeEventFilter(self, obj: QObject) -> None: ...
    def sendToJobQueue(self, type: vrClusterTypes.JobType, jobQueue: str) -> bool: ...
    def sender(self) -> QObject: ...
    def senderSignalIndex(self) -> int: ...
    def sessionEndWarning(self) -> None: ...
    def sessionEnded(self) -> None: ...
    def sessionStarting(self) -> None: ...
    def setObjectName(self, name: str) -> None: ...
    def setParent(self, parent: QObject) -> None: ...
    def setProperty(self, name: str, value: Any) -> bool: ...
    def signalsBlocked(self) -> bool: ...
    def startSession(self, bookingId: str) -> bool: ...
    def startTimer(self, interval: int, timerType: Qt.TimerType = Qt.TimerType.CoarseTimer) -> int: ...
    def thread(self) -> QThread: ...
    def timerEvent(self, event: QTimerEvent) -> None: ...
    def tr(self) -> None: ...

class vrClusterService:
    __doc__: NoneType
    __module__: str
    staticMetaObject: QMetaObject
    def __delattr__(self) -> None: ...
    def __dir__(self, /): ...
    def __eq__(self) -> None: ...
    def __format__(self, format_spec, /): ...
    def __ge__(self) -> None: ...
    def __getattribute__(self) -> None: ...
    def __getstate__(self, /): ...
    def __gt__(self) -> None: ...
    def __hash__(self) -> None: ...
    def __init__(self) -> None: ...
    def __init_subclass__(cls) -> None: ...
    def __le__(self) -> None: ...
    def __lt__(self) -> None: ...
    def __ne__(self) -> None: ...
    def __new__(cls) -> None: ...
    def __reduce__(self, /): ...
    def __reduce_ex__(self, protocol, /): ...
    def __repr__(self) -> None: ...
    def __setattr__(self) -> None: ...
    def __sizeof__(self, /): ...
    def __str__(self) -> None: ...
    def __subclasshook__(self) -> None: ...
    def abortProgress(self) -> None: ...
    def blockSignals(self, b: bool) -> bool: ...
    def childEvent(self, event: QChildEvent) -> None: ...
    def children(self) -> List[QObject]: ...
    def configChanged(self) -> None: ...
    def connect(self) -> None: ...
    def connectNotify(self, signal: QMetaMethod) -> None: ...
    def customEvent(self, event: QEvent) -> None: ...
    def deleteLater(self) -> None: ...
    def destroyed(self) -> None: ...
    def disconnect(self) -> None: ...
    def disconnectNotify(self, signal: QMetaMethod) -> None: ...
    def dumpObjectInfo(self) -> None: ...
    def dumpObjectTree(self) -> None: ...
    def dynamicPropertyNames(self) -> List[QByteArray]: ...
    def emit(self, arg__1: bytes, *args: None) -> bool: ...
    def event(self, event: QEvent) -> bool: ...
    def eventFilter(self, watched: QObject, event: QEvent) -> bool: ...
    def findChild(self, type: type, name: str = {}, options: Qt.FindChildOptions = Qt.FindChildOption.FindChildrenRecursively) -> object: ...
    def getAllowMultipleServers(self) -> bool: ...
    def getConfig(self) -> str: ...
    def getConsumptionBasedLicensing(self) -> bool: ...
    def getIgnoreNotEnoughMemory(self) -> bool: ...
    def getLocalLicenseCheckout(self) -> bool: ...
    def getRunningNodes(self) -> List[str]: ...
    def getShowTestImage(self) -> bool: ...
    def getShowTiles(self) -> bool: ...
    def hasLicense(self) -> bool: ...
    def hostListToConfig(self, hostList: str) -> str: ...
    def inherits(self, classname: bytes) -> bool: ...
    def init(self) -> None: ...
    def installEventFilter(self, filterObj: QObject) -> None: ...
    def isRestarting(self) -> bool: ...
    def isRunning(self) -> bool: ...
    def isSignalConnected(self, signal: QMetaMethod) -> bool: ...
    def isWidgetType(self) -> bool: ...
    def isWindowType(self) -> bool: ...
    def killTimer(self, id: int) -> None: ...
    def loadConfig(self, fileName: str) -> bool: ...
    def metaObject(self) -> QMetaObject: ...
    def moveToThread(self, thread: QThread) -> None: ...
    def multipleServersFound(self) -> None: ...
    def notEnoughMemoryFound(self) -> None: ...
    def objectName(self) -> str: ...
    def objectNameChanged(self) -> None: ...
    def parent(self) -> QObject: ...
    def progressChanged(self) -> None: ...
    def progressFinished(self) -> None: ...
    def property(self, name: str) -> Any: ...
    def receivers(self, signal: bytes) -> int: ...
    def removeEventFilter(self, obj: QObject) -> None: ...
    def runSpeedTest(self) -> List[str]: ...
    def runningNodesChanged(self) -> None: ...
    def sender(self) -> QObject: ...
    def senderSignalIndex(self) -> int: ...
    def setAllowMultipleServers(self, value: bool) -> None: ...
    def setConfig(self, configuration: str) -> None: ...
    def setConsumptionBasedLicensing(self, value: bool) -> None: ...
    def setDefaultConfig(self) -> None: ...
    def setEyeSeparation(self, value: float) -> None: ...
    def setIgnoreNotEnoughMemory(self, value: bool) -> None: ...
    def setLocalLicenseCheckout(self, value: bool) -> None: ...
    def setObjectName(self, name: str) -> None: ...
    def setParent(self, parent: QObject) -> None: ...
    def setProperty(self, name: str, value: Any) -> bool: ...
    def setShowTestImage(self, value: bool) -> None: ...
    def setShowTiles(self, value: bool) -> None: ...
    def setZeroParallax(self, value: float) -> None: ...
    def signalsBlocked(self) -> bool: ...
    def start(self) -> bool: ...
    def startTimer(self, interval: int, timerType: Qt.TimerType = Qt.TimerType.CoarseTimer) -> int: ...
    def started(self) -> None: ...
    def stop(self) -> None: ...
    def stopped(self) -> None: ...
    def thread(self) -> QThread: ...
    def timerEvent(self, event: QTimerEvent) -> None: ...
    def tr(self) -> None: ...

class vrClusterTypes:
    __doc__: NoneType
    __module__: str
    def JobType(self) -> None: ...
    def __delattr__(self) -> None: ...
    def __dir__(self, /): ...
    def __eq__(self) -> None: ...
    def __format__(self, format_spec, /): ...
    def __ge__(self) -> None: ...
    def __getattribute__(self) -> None: ...
    def __getstate__(self, /): ...
    def __gt__(self) -> None: ...
    def __hash__(self) -> None: ...
    def __init__(self) -> None: ...
    def __init_subclass__(cls) -> None: ...
    def __le__(self) -> None: ...
    def __lt__(self) -> None: ...
    def __ne__(self) -> None: ...
    def __new__(cls) -> None: ...
    def __reduce__(self, /): ...
    def __reduce_ex__(self, protocol, /): ...
    def __repr__(self) -> None: ...
    def __setattr__(self) -> None: ...
    def __sizeof__(self, /): ...
    def __str__(self) -> None: ...
    def __subclasshook__(self) -> None: ...

class vrConstraintService:
    __doc__: NoneType
    __module__: str
    staticMetaObject: QMetaObject
    def __delattr__(self) -> None: ...
    def __dir__(self, /): ...
    def __eq__(self) -> None: ...
    def __format__(self, format_spec, /): ...
    def __ge__(self) -> None: ...
    def __getattribute__(self) -> None: ...
    def __getstate__(self, /): ...
    def __gt__(self) -> None: ...
    def __hash__(self) -> None: ...
    def __init__(self) -> None: ...
    def __init_subclass__(cls) -> None: ...
    def __le__(self) -> None: ...
    def __lt__(self) -> None: ...
    def __ne__(self) -> None: ...
    def __new__(cls) -> None: ...
    def __reduce__(self, /): ...
    def __reduce_ex__(self, protocol, /): ...
    def __repr__(self) -> None: ...
    def __setattr__(self) -> None: ...
    def __sizeof__(self, /): ...
    def __str__(self) -> None: ...
    def __subclasshook__(self) -> None: ...
    def blockSignals(self, b: bool) -> bool: ...
    def childEvent(self, event: QChildEvent) -> None: ...
    def children(self) -> List[QObject]: ...
    def connect(self) -> None: ...
    def connectNotify(self, signal: QMetaMethod) -> None: ...
    def createAimConstraint(self, targetNodes: Sequence[vrdNode], upTargetNodes: Sequence[vrdNode], constrainedNode: vrdNode) -> vrdAimConstraintNode: ...
    def createOrientationConstraint(self, targetNodes: Sequence[vrdNode], constrainedNode: vrdNode) -> vrdOrientationConstraintNode: ...
    def createParentConstraint(self, targetNodes: Sequence[vrdNode], constrainedNode: vrdNode, maintainOffset: bool) -> vrdParentConstraintNode: ...
    def createPositionConstraint(self, targetNodes: Sequence[vrdNode], constrainedNode: vrdNode, maintainOffset: bool) -> vrdPositionConstraintNode: ...
    def customEvent(self, event: QEvent) -> None: ...
    def deleteConstraint(self, constraintNode: vrdConstraintNode) -> bool: ...
    def deleteLater(self) -> None: ...
    def destroyed(self) -> None: ...
    def disconnect(self) -> None: ...
    def disconnectNotify(self, signal: QMetaMethod) -> None: ...
    def dumpObjectInfo(self) -> None: ...
    def dumpObjectTree(self) -> None: ...
    def dynamicPropertyNames(self) -> List[QByteArray]: ...
    def emit(self, arg__1: bytes, *args: None) -> bool: ...
    def event(self, event: QEvent) -> bool: ...
    def eventFilter(self, watched: QObject, event: QEvent) -> bool: ...
    def findChild(self, type: type, name: str = {}, options: Qt.FindChildOptions = Qt.FindChildOption.FindChildrenRecursively) -> object: ...
    def findConstrainedNode(self, constrainedNode: vrdNode) -> List[vrdConstraintNode]: ...
    def getConstraints(self) -> List[vrdConstraintNode]: ...
    def inherits(self, classname: bytes) -> bool: ...
    def init(self) -> None: ...
    def installEventFilter(self, filterObj: QObject) -> None: ...
    def isSignalConnected(self, signal: QMetaMethod) -> bool: ...
    def isWidgetType(self) -> bool: ...
    def isWindowType(self) -> bool: ...
    def killTimer(self, id: int) -> None: ...
    def metaObject(self) -> QMetaObject: ...
    def moveToThread(self, thread: QThread) -> None: ...
    def objectName(self) -> str: ...
    def objectNameChanged(self) -> None: ...
    def parent(self) -> QObject: ...
    def property(self, name: str) -> Any: ...
    def receivers(self, signal: bytes) -> int: ...
    def removeEventFilter(self, obj: QObject) -> None: ...
    def sender(self) -> QObject: ...
    def senderSignalIndex(self) -> int: ...
    def setObjectName(self, name: str) -> None: ...
    def setParent(self, parent: QObject) -> None: ...
    def setProperty(self, name: str, value: Any) -> bool: ...
    def signalsBlocked(self) -> bool: ...
    def startTimer(self, interval: int, timerType: Qt.TimerType = Qt.TimerType.CoarseTimer) -> int: ...
    def thread(self) -> QThread: ...
    def timerEvent(self, event: QTimerEvent) -> None: ...
    def tr(self) -> None: ...

class vrDecoreService:
    __doc__: NoneType
    __module__: str
    staticMetaObject: QMetaObject
    def __delattr__(self) -> None: ...
    def __dir__(self, /): ...
    def __eq__(self) -> None: ...
    def __format__(self, format_spec, /): ...
    def __ge__(self) -> None: ...
    def __getattribute__(self) -> None: ...
    def __getstate__(self, /): ...
    def __gt__(self) -> None: ...
    def __hash__(self) -> None: ...
    def __init__(self) -> None: ...
    def __init_subclass__(cls) -> None: ...
    def __le__(self) -> None: ...
    def __lt__(self) -> None: ...
    def __ne__(self) -> None: ...
    def __new__(cls) -> None: ...
    def __reduce__(self, /): ...
    def __reduce_ex__(self, protocol, /): ...
    def __repr__(self) -> None: ...
    def __setattr__(self) -> None: ...
    def __sizeof__(self, /): ...
    def __str__(self) -> None: ...
    def __subclasshook__(self) -> None: ...
    def blockSignals(self, b: bool) -> bool: ...
    def childEvent(self, event: QChildEvent) -> None: ...
    def children(self) -> List[QObject]: ...
    def connect(self) -> None: ...
    def connectNotify(self, signal: QMetaMethod) -> None: ...
    def customEvent(self, event: QEvent) -> None: ...
    def decore(self, nodes: Sequence[vrdNode], treatAsCombinedObject: bool, settings: vrdDecoreSettings) -> None: ...
    def deleteLater(self) -> None: ...
    def destroyed(self) -> None: ...
    def disconnect(self) -> None: ...
    def disconnectNotify(self, signal: QMetaMethod) -> None: ...
    def dumpObjectInfo(self) -> None: ...
    def dumpObjectTree(self) -> None: ...
    def dynamicPropertyNames(self) -> List[QByteArray]: ...
    def emit(self, arg__1: bytes, *args: None) -> bool: ...
    def event(self, event: QEvent) -> bool: ...
    def eventFilter(self, watched: QObject, event: QEvent) -> bool: ...
    def findChild(self, type: type, name: str = {}, options: Qt.FindChildOptions = Qt.FindChildOption.FindChildrenRecursively) -> object: ...
    def getSettings(self) -> vrdDecoreSettings: ...
    def inherits(self, classname: bytes) -> bool: ...
    def init(self) -> None: ...
    def installEventFilter(self, filterObj: QObject) -> None: ...
    def isSignalConnected(self, signal: QMetaMethod) -> bool: ...
    def isWidgetType(self) -> bool: ...
    def isWindowType(self) -> bool: ...
    def killTimer(self, id: int) -> None: ...
    def metaObject(self) -> QMetaObject: ...
    def moveToThread(self, thread: QThread) -> None: ...
    def objectName(self) -> str: ...
    def objectNameChanged(self) -> None: ...
    def parent(self) -> QObject: ...
    def property(self, name: str) -> Any: ...
    def receivers(self, signal: bytes) -> int: ...
    def removeEventFilter(self, obj: QObject) -> None: ...
    def sender(self) -> QObject: ...
    def senderSignalIndex(self) -> int: ...
    def setObjectName(self, name: str) -> None: ...
    def setParent(self, parent: QObject) -> None: ...
    def setProperty(self, name: str, value: Any) -> bool: ...
    def setSettings(self, settings: vrdDecoreSettings) -> None: ...
    def settingsChanged(self) -> None: ...
    def signalsBlocked(self) -> bool: ...
    def startTimer(self, interval: int, timerType: Qt.TimerType = Qt.TimerType.CoarseTimer) -> int: ...
    def thread(self) -> QThread: ...
    def timerEvent(self, event: QTimerEvent) -> None: ...
    def tr(self) -> None: ...

class vrDeviceService:
    __doc__: NoneType
    __module__: str
    staticMetaObject: QMetaObject
    def __delattr__(self) -> None: ...
    def __dir__(self, /): ...
    def __eq__(self) -> None: ...
    def __format__(self, format_spec, /): ...
    def __ge__(self) -> None: ...
    def __getattribute__(self) -> None: ...
    def __getstate__(self, /): ...
    def __gt__(self) -> None: ...
    def __hash__(self) -> None: ...
    def __init__(self) -> None: ...
    def __init_subclass__(cls) -> None: ...
    def __le__(self) -> None: ...
    def __lt__(self) -> None: ...
    def __ne__(self) -> None: ...
    def __new__(cls) -> None: ...
    def __reduce__(self, /): ...
    def __reduce_ex__(self, protocol, /): ...
    def __repr__(self) -> None: ...
    def __setattr__(self) -> None: ...
    def __sizeof__(self, /): ...
    def __str__(self) -> None: ...
    def __subclasshook__(self) -> None: ...
    def activateInteraction(self, interaction: str) -> None: ...
    def addBlockedDeviceModelOrSerial(self, modelOrSerial: str) -> None: ...
    def blockSignals(self, b: bool) -> bool: ...
    def childEvent(self, event: QChildEvent) -> None: ...
    def children(self) -> List[QObject]: ...
    def connect(self) -> None: ...
    def connectNotify(self, signal: QMetaMethod) -> None: ...
    def createInteraction(self, name: str) -> vrdDeviceInteraction: ...
    def createVRDevice(self, name: str) -> vrdVRDevice: ...
    def customEvent(self, event: QEvent) -> None: ...
    def deactivateInteraction(self, interaction: str) -> None: ...
    def deleteLater(self) -> None: ...
    def deleteVRDevice(self, device: vrdVRDevice) -> None: ...
    def destroyed(self) -> None: ...
    def deviceActionTriggered(self) -> None: ...
    def deviceCollisionStarted(self) -> None: ...
    def deviceCollisionStopped(self) -> None: ...
    def deviceMoved(self) -> None: ...
    def disconnect(self) -> None: ...
    def disconnectNotify(self, signal: QMetaMethod) -> None: ...
    def dumpObjectInfo(self) -> None: ...
    def dumpObjectTree(self) -> None: ...
    def dynamicPropertyNames(self) -> List[QByteArray]: ...
    def emit(self, arg__1: bytes, *args: None) -> bool: ...
    def event(self, event: QEvent) -> bool: ...
    def eventFilter(self, watched: QObject, event: QEvent) -> bool: ...
    def findChild(self, type: type, name: str = {}, options: Qt.FindChildOptions = Qt.FindChildOption.FindChildrenRecursively) -> object: ...
    def getActiveInteractionGroup(self) -> str: ...
    def getBlockedDeviceModelsOrSerials(self) -> List[str]: ...
    def getConnectedVRDevices(self) -> List[vrdVRDevice]: ...
    def getInteraction(self, name: str) -> vrdDeviceInteraction: ...
    def getInteractions(self) -> List[vrdDeviceInteraction]: ...
    def getLeftTrackedHand(self) -> vrdTrackedHand: ...
    def getRightTrackedHand(self) -> vrdTrackedHand: ...
    def getTrackingOrigin(self) -> QVector3D: ...
    def getVRDevice(self, name: str) -> vrdVRDevice: ...
    def getVRDeviceBySerialNumber(self, serialNumber: str) -> vrdVRDevice: ...
    def inherits(self, classname: bytes) -> bool: ...
    def init(self) -> None: ...
    def installEventFilter(self, filterObj: QObject) -> None: ...
    def isBlockedDeviceModelOrSerial(self, modelOrSerial: str) -> bool: ...
    def isSignalConnected(self, signal: QMetaMethod) -> bool: ...
    def isWidgetType(self) -> bool: ...
    def isWindowType(self) -> bool: ...
    def killTimer(self, id: int) -> None: ...
    def metaObject(self) -> QMetaObject: ...
    def moveToThread(self, thread: QThread) -> None: ...
    def objectName(self) -> str: ...
    def objectNameChanged(self) -> None: ...
    def parent(self) -> QObject: ...
    def property(self, name: str) -> Any: ...
    def receivers(self, signal: bytes) -> int: ...
    def removeBlockedDeviceModelOrSerial(self, modelOrSerial: str) -> None: ...
    def removeEventFilter(self, obj: QObject) -> None: ...
    def removeInteraction(self, interaction: vrdDeviceInteraction) -> None: ...
    def sender(self) -> QObject: ...
    def senderSignalIndex(self) -> int: ...
    def setActiveInteractionGroup(self, interactionGroup: str) -> None: ...
    def setBlockedDeviceModelsOrSerials(self, modelsOrSerials: Sequence[str]) -> None: ...
    def setObjectName(self, name: str) -> None: ...
    def setParent(self, parent: QObject) -> None: ...
    def setProperty(self, name: str, value: Any) -> bool: ...
    def setTrackingOrigin(self, position: QVector3D) -> None: ...
    def signalsBlocked(self) -> bool: ...
    def startTimer(self, interval: int, timerType: Qt.TimerType = Qt.TimerType.CoarseTimer) -> int: ...
    def thread(self) -> QThread: ...
    def timerEvent(self, event: QTimerEvent) -> None: ...
    def tr(self) -> None: ...

class vrFileIOService:
    __doc__: NoneType
    __module__: str
    staticMetaObject: QMetaObject
    def __delattr__(self) -> None: ...
    def __dir__(self, /): ...
    def __eq__(self) -> None: ...
    def __format__(self, format_spec, /): ...
    def __ge__(self) -> None: ...
    def __getattribute__(self) -> None: ...
    def __getstate__(self, /): ...
    def __gt__(self) -> None: ...
    def __hash__(self) -> None: ...
    def __init__(self) -> None: ...
    def __init_subclass__(cls) -> None: ...
    def __le__(self) -> None: ...
    def __lt__(self) -> None: ...
    def __ne__(self) -> None: ...
    def __new__(cls) -> None: ...
    def __reduce__(self, /): ...
    def __reduce_ex__(self, protocol, /): ...
    def __repr__(self) -> None: ...
    def __setattr__(self) -> None: ...
    def __sizeof__(self, /): ...
    def __str__(self) -> None: ...
    def __subclasshook__(self) -> None: ...
    def abortImport(self, importId: int) -> None: ...
    def abortJobs(self, jobIds: Sequence[int]) -> None: ...
    def addLoadedMaterial(self) -> None: ...
    def addedGeometry(self) -> None: ...
    def blockSignals(self, b: bool) -> bool: ...
    def checkCadType(self, file: str) -> None: ...
    def childEvent(self, event: QChildEvent) -> None: ...
    def childFileImportAdded(self) -> None: ...
    def childFileImportFinished(self) -> None: ...
    def children(self) -> List[QObject]: ...
    def childrenFileConversionFinished(self) -> None: ...
    def connect(self) -> None: ...
    def connectNotify(self, signal: QMetaMethod) -> None: ...
    def conversionFinished(self) -> None: ...
    def conversionProgressChanged(self) -> None: ...
    def customEvent(self, event: QEvent) -> None: ...
    def deleteLater(self) -> None: ...
    def destroyed(self) -> None: ...
    def disconnect(self) -> None: ...
    def disconnectNotify(self, signal: QMetaMethod) -> None: ...
    def dumpObjectInfo(self) -> None: ...
    def dumpObjectTree(self) -> None: ...
    def dynamicPropertyNames(self) -> List[QByteArray]: ...
    def emit(self, arg__1: bytes, *args: None) -> bool: ...
    def event(self, event: QEvent) -> bool: ...
    def eventFilter(self, watched: QObject, event: QEvent) -> bool: ...
    def exportNodes(self, file: str, nodes: Sequence[vrdNode], synchronousConversion: bool = False) -> int: ...
    def exportedFile(self) -> None: ...
    def fileAddedToLoadQueue(self) -> None: ...
    def fileAddedToScene(self) -> None: ...
    def fileConversionAborted(self) -> None: ...
    def fileConversionFailed(self) -> None: ...
    def fileConversionFinished(self) -> None: ...
    def fileConversionProgressChanged(self) -> None: ...
    def fileConversionStarted(self) -> None: ...
    def fileConversionSucceded(self) -> None: ...
    def fileLoadingFailed(self) -> None: ...
    def fileLoadingFinished(self) -> None: ...
    def fileLoadingProgressChanged(self) -> None: ...
    def fileLoadingStarted(self) -> None: ...
    def fileTypeReceived(self) -> None: ...
    def findChild(self, type: type, name: str = {}, options: Qt.FindChildOptions = Qt.FindChildOption.FindChildrenRecursively) -> object: ...
    def getBaseFileSuffix(self, file: str) -> str: ...
    def getExportSettings(self, fileType: vrCADFileTypes.FileType) -> vrdFileExportSettings: ...
    def getExportSettingsFromPreferences(self, fileType: vrCADFileTypes.FileType) -> vrdFileExportSettings: ...
    def getFileName(self) -> str: ...
    def getFileTypeByFileName(self, file: str) -> vrCADFileTypes.FileType: ...
    def getImageReadFilter(self) -> str: ...
    def getImageWriteFilter(self) -> str: ...
    def getImportSettings(self, fileType: vrCADFileTypes.FileType) -> vrdAtfSettings: ...
    def getImportSettingsFromPreferences(self, fileType: vrCADFileTypes.FileType) -> vrdAtfSettings: ...
    def getMaxNumImportProcesses(self) -> int: ...
    def getMergeProjectAnnotations(self) -> bool: ...
    def getProjectMergeSettings(self) -> vrdProjectMergeSettings: ...
    def getReadFileTypesFilter(self, mode: vrFileTypes.FileExtensionFilterMode) -> str: ...
    def getSceneImportSettings(self) -> vrdSceneImportSettings: ...
    def getStreamName(self) -> str: ...
    def getVREDDataDir(self) -> str: ...
    def getVREDDir(self) -> str: ...
    def getVREDExamplesDir(self) -> str: ...
    def getVREDFileTypesFilter(self) -> str: ...
    def getWriteFileTypesFilter(self, filename: str = '', includeExportFormats: bool = True) -> str: ...
    def hasSmartReferences(self, file: str) -> bool: ...
    def importAtfFile(self, file: str, parent: vrdNode) -> vrdNode: ...
    def importFiles(self, files: Sequence[str], parent: vrdNode, atfConversionOutputDir: str = '', loadConvertedAtfFiles: bool = True, removeConvertedAtfFiles: bool = True, loadBehavior: bool = True) -> int: ...
    def importFinished(self) -> None: ...
    def importMissingFiles(self, node: vrdNode, removeConvertedAtfFiles: bool = True) -> int: ...
    def importPLMXMLFile(self, file: str, parent: vrdNode) -> vrdNode: ...
    def importProgressChanged(self) -> None: ...
    def inherits(self, classname: bytes) -> bool: ...
    def init(self) -> None: ...
    def inlineImageSequences(self) -> None: ...
    def installEventFilter(self, filterObj: QObject) -> None: ...
    def isAtfFile(self, file: str) -> bool: ...
    def isConvertedAtfTree(self, root: vrdNode) -> bool: ...
    def isReadOnly(self) -> bool: ...
    def isSignalConnected(self, signal: QMetaMethod) -> bool: ...
    def isSupportedFile(self, file: str) -> bool: ...
    def isVredProject(self, file: str) -> bool: ...
    def isWidgetType(self) -> bool: ...
    def isWindowType(self) -> bool: ...
    def jobBelongsToImport(self, jobId: int, importId: int) -> bool: ...
    def killTimer(self, id: int) -> None: ...
    def loadFile(self, file: str) -> bool: ...
    def loadedGeometry(self) -> None: ...
    def metaObject(self) -> QMetaObject: ...
    def moveToThread(self, thread: QThread) -> None: ...
    def newFile(self) -> None: ...
    def newScene(self) -> None: ...
    def objectName(self) -> str: ...
    def objectNameChanged(self) -> None: ...
    def parent(self) -> QObject: ...
    def preExportGeometry(self) -> None: ...
    def preNewScene(self) -> None: ...
    def preQuit(self) -> None: ...
    def progress(self) -> None: ...
    def project(self) -> None: ...
    def projectLoad(self) -> None: ...
    def projectLoadFinished(self) -> None: ...
    def projectLoaded(self) -> None: ...
    def projectMerged(self) -> None: ...
    def projectSave(self) -> None: ...
    def projectSaved(self) -> None: ...
    def property(self, name: str) -> Any: ...
    def receivers(self, signal: bytes) -> int: ...
    def reimportNodes(self, nodes: Sequence[vrdNode]) -> List[vrdNode]: ...
    def removeEventFilter(self, obj: QObject) -> None: ...
    def saveFile(self, file: str) -> bool: ...
    def saveNodes(self, file: str, nodes: Sequence[vrdNode], includeEnvironmentGeometries: bool, filterBSides: bool = False) -> bool: ...
    def savedGeometry(self) -> None: ...
    def sender(self) -> QObject: ...
    def senderSignalIndex(self) -> int: ...
    def sequences(self) -> None: ...
    def setExportSettings(self, fileType: vrCADFileTypes.FileType, settings: vrdFileExportSettings) -> None: ...
    def setImportSettings(self, fileType: vrCADFileTypes.FileType, settings: vrdAtfSettings) -> None: ...
    def setMaxNumImportProcesses(self, value: int) -> None: ...
    def setObjectName(self, name: str) -> None: ...
    def setParent(self, parent: QObject) -> None: ...
    def setProjectMergeSettings(self, settings: vrdProjectMergeSettings) -> None: ...
    def setProperty(self, name: str, value: Any) -> bool: ...
    def setSceneImportSettings(self, settings: vrdSceneImportSettings) -> None: ...
    def signalsBlocked(self) -> bool: ...
    def startTimer(self, interval: int, timerType: Qt.TimerType = Qt.TimerType.CoarseTimer) -> int: ...
    def startingConversion(self) -> None: ...
    def startingImport(self) -> None: ...
    def thread(self) -> QThread: ...
    def timerEvent(self, event: QTimerEvent) -> None: ...
    def tr(self) -> None: ...
    def undoInlineImageSequences(self) -> None: ...
    def validateAtfTree(self, file: str, root: vrdNode, parent: vrdNode) -> None: ...

class vrFileTypes:
    __doc__: NoneType
    __module__: str
    NativeFileTypes: FileExtensionFilterMode
    ExternalFileTypes: FileExtensionFilterMode
    PythonFileType: FileExtensionFilterMode
    AllFileTypes: FileExtensionFilterMode
    def FileExtensionFilterMode(self) -> None: ...
    def __delattr__(self) -> None: ...
    def __dir__(self, /): ...
    def __eq__(self) -> None: ...
    def __format__(self, format_spec, /): ...
    def __ge__(self) -> None: ...
    def __getattribute__(self) -> None: ...
    def __getstate__(self, /): ...
    def __gt__(self) -> None: ...
    def __hash__(self) -> None: ...
    def __init__(self) -> None: ...
    def __init_subclass__(cls) -> None: ...
    def __le__(self) -> None: ...
    def __lt__(self) -> None: ...
    def __ne__(self) -> None: ...
    def __new__(cls) -> None: ...
    def __reduce__(self, /): ...
    def __reduce_ex__(self, protocol, /): ...
    def __repr__(self) -> None: ...
    def __setattr__(self) -> None: ...
    def __sizeof__(self, /): ...
    def __str__(self) -> None: ...
    def __subclasshook__(self) -> None: ...

class vrGPUService:
    __doc__: NoneType
    __module__: str
    staticMetaObject: QMetaObject
    def __delattr__(self) -> None: ...
    def __dir__(self, /): ...
    def __eq__(self) -> None: ...
    def __format__(self, format_spec, /): ...
    def __ge__(self) -> None: ...
    def __getattribute__(self) -> None: ...
    def __getstate__(self, /): ...
    def __gt__(self) -> None: ...
    def __hash__(self) -> None: ...
    def __init__(self) -> None: ...
    def __init_subclass__(cls) -> None: ...
    def __le__(self) -> None: ...
    def __lt__(self) -> None: ...
    def __ne__(self) -> None: ...
    def __new__(cls) -> None: ...
    def __reduce__(self, /): ...
    def __reduce_ex__(self, protocol, /): ...
    def __repr__(self) -> None: ...
    def __setattr__(self) -> None: ...
    def __sizeof__(self, /): ...
    def __str__(self) -> None: ...
    def __subclasshook__(self) -> None: ...
    def blockSignals(self, b: bool) -> bool: ...
    def childEvent(self, event: QChildEvent) -> None: ...
    def children(self) -> List[QObject]: ...
    def connect(self) -> None: ...
    def connectNotify(self, signal: QMetaMethod) -> None: ...
    def customEvent(self, event: QEvent) -> None: ...
    def deleteLater(self) -> None: ...
    def destroyed(self) -> None: ...
    def disconnect(self) -> None: ...
    def disconnectNotify(self, signal: QMetaMethod) -> None: ...
    def dumpObjectInfo(self) -> None: ...
    def dumpObjectTree(self) -> None: ...
    def dynamicPropertyNames(self) -> List[QByteArray]: ...
    def emit(self, arg__1: bytes, *args: None) -> bool: ...
    def event(self, event: QEvent) -> bool: ...
    def eventFilter(self, watched: QObject, event: QEvent) -> bool: ...
    def findChild(self, type: type, name: str = {}, options: Qt.FindChildOptions = Qt.FindChildOption.FindChildrenRecursively) -> object: ...
    def gpuStateInfo(self) -> List[vrdGpuStateInfo]: ...
    def inherits(self, classname: bytes) -> bool: ...
    def init(self) -> None: ...
    def installEventFilter(self, filterObj: QObject) -> None: ...
    def isSignalConnected(self, signal: QMetaMethod) -> bool: ...
    def isWidgetType(self) -> bool: ...
    def isWindowType(self) -> bool: ...
    def killTimer(self, id: int) -> None: ...
    def metaObject(self) -> QMetaObject: ...
    def moveToThread(self, thread: QThread) -> None: ...
    def objectName(self) -> str: ...
    def objectNameChanged(self) -> None: ...
    def openGLInfo(self) -> vrdOpenGLInfo: ...
    def parent(self) -> QObject: ...
    def property(self, name: str) -> Any: ...
    def raytracingInfo(self) -> vrdRaytracingInfo: ...
    def receivers(self, signal: bytes) -> int: ...
    def removeEventFilter(self, obj: QObject) -> None: ...
    def sender(self) -> QObject: ...
    def senderSignalIndex(self) -> int: ...
    def setObjectName(self, name: str) -> None: ...
    def setParent(self, parent: QObject) -> None: ...
    def setProperty(self, name: str, value: Any) -> bool: ...
    def signalsBlocked(self) -> bool: ...
    def startTimer(self, interval: int, timerType: Qt.TimerType = Qt.TimerType.CoarseTimer) -> int: ...
    def thread(self) -> QThread: ...
    def timerEvent(self, event: QTimerEvent) -> None: ...
    def tr(self) -> None: ...

class vrGPUTypes:
    __doc__: NoneType
    __module__: str
    AMD: OpenGLVendor
    NVIDIA: OpenGLVendor
    Intel: OpenGLVendor
    Mesa: OpenGLVendor
    LLVMPipe: OpenGLVendor
    DoubleBufferedStereo: OpenGLFeature
    MulticastSLI: OpenGLFeature
    SinglePassStereo: OpenGLFeature
    VariableRateShading: OpenGLFeature
    def OpenGLFeature(self) -> None: ...
    def OpenGLVendor(self) -> None: ...
    def __delattr__(self) -> None: ...
    def __dir__(self, /): ...
    def __eq__(self) -> None: ...
    def __format__(self, format_spec, /): ...
    def __ge__(self) -> None: ...
    def __getattribute__(self) -> None: ...
    def __getstate__(self, /): ...
    def __gt__(self) -> None: ...
    def __hash__(self) -> None: ...
    def __init__(self) -> None: ...
    def __init_subclass__(cls) -> None: ...
    def __le__(self) -> None: ...
    def __lt__(self) -> None: ...
    def __ne__(self) -> None: ...
    def __new__(cls) -> None: ...
    def __reduce__(self, /): ...
    def __reduce_ex__(self, protocol, /): ...
    def __repr__(self) -> None: ...
    def __setattr__(self) -> None: ...
    def __sizeof__(self, /): ...
    def __str__(self) -> None: ...
    def __subclasshook__(self) -> None: ...

class vrGUIService:
    __doc__: NoneType
    __module__: str
    staticMetaObject: QMetaObject
    def DialogType(self) -> None: ...
    def ViewCubePosition(self) -> None: ...
    def ViewCubeSize(self) -> None: ...
    def __delattr__(self) -> None: ...
    def __dir__(self, /): ...
    def __eq__(self) -> None: ...
    def __format__(self, format_spec, /): ...
    def __ge__(self) -> None: ...
    def __getattribute__(self) -> None: ...
    def __getstate__(self, /): ...
    def __gt__(self) -> None: ...
    def __hash__(self) -> None: ...
    def __init__(self) -> None: ...
    def __init_subclass__(cls) -> None: ...
    def __le__(self) -> None: ...
    def __lt__(self) -> None: ...
    def __ne__(self) -> None: ...
    def __new__(cls) -> None: ...
    def __reduce__(self, /): ...
    def __reduce_ex__(self, protocol, /): ...
    def __repr__(self) -> None: ...
    def __setattr__(self) -> None: ...
    def __sizeof__(self, /): ...
    def __str__(self) -> None: ...
    def __subclasshook__(self) -> None: ...
    def blockSignals(self, b: bool) -> bool: ...
    def childEvent(self, event: QChildEvent) -> None: ...
    def children(self) -> List[QObject]: ...
    def colorThemeChanged(self) -> None: ...
    def connect(self) -> None: ...
    def connectNotify(self, signal: QMetaMethod) -> None: ...
    def customEvent(self, event: QEvent) -> None: ...
    def deleteLater(self) -> None: ...
    def destroyed(self) -> None: ...
    def disconnect(self) -> None: ...
    def disconnectNotify(self, signal: QMetaMethod) -> None: ...
    def dumpObjectInfo(self) -> None: ...
    def dumpObjectTree(self) -> None: ...
    def dynamicPropertyNames(self) -> List[QByteArray]: ...
    def emit(self, arg__1: bytes, *args: None) -> bool: ...
    def event(self, event: QEvent) -> bool: ...
    def eventFilter(self, watched: QObject, event: QEvent) -> bool: ...
    def findChild(self, type: type, name: str = {}, options: Qt.FindChildOptions = Qt.FindChildOption.FindChildrenRecursively) -> object: ...
    def getFileDialogPath(self, type: vrGUIService.DialogType) -> str: ...
    def getViewCubeOpacity(self) -> float: ...
    def getViewCubePosition(self) -> vrGUIService.ViewCubePosition: ...
    def getViewCubeSize(self) -> vrGUIService.ViewCubeSize: ...
    def inherits(self, classname: bytes) -> bool: ...
    def init(self) -> None: ...
    def installEventFilter(self, filterObj: QObject) -> None: ...
    def isNavBarVisible(self) -> bool: ...
    def isSignalConnected(self, signal: QMetaMethod) -> bool: ...
    def isViewCubeVisible(self) -> bool: ...
    def isWidgetType(self) -> bool: ...
    def isWindowType(self) -> bool: ...
    def killTimer(self, id: int) -> None: ...
    def metaObject(self) -> QMetaObject: ...
    def moveToThread(self, thread: QThread) -> None: ...
    def objectName(self) -> str: ...
    def objectNameChanged(self) -> None: ...
    def openExportDialog(self, file: str, nodes: Sequence[vrdNode]) -> None: ...
    def openExportSceneDialog(self, file: str) -> None: ...
    def openImportDialog(self, files: Sequence[str], parent: vrdNode = Default(vrdNode)) -> None: ...
    def parent(self) -> QObject: ...
    def property(self, name: str) -> Any: ...
    def receivers(self, signal: bytes) -> int: ...
    def recentFilesChanged(self) -> None: ...
    def removeEventFilter(self, obj: QObject) -> None: ...
    def sender(self) -> QObject: ...
    def senderSignalIndex(self) -> int: ...
    def setFileDialogPath(self, type: vrGUIService.DialogType, path: str) -> None: ...
    def setNavBarVisible(self, value: bool) -> None: ...
    def setObjectName(self, name: str) -> None: ...
    def setParent(self, parent: QObject) -> None: ...
    def setProperty(self, name: str, value: Any) -> bool: ...
    def setViewCubeOpacity(self, value: float) -> None: ...
    def setViewCubePosition(self, value: vrGUIService.ViewCubePosition) -> None: ...
    def setViewCubeSize(self, value: vrGUIService.ViewCubeSize) -> None: ...
    def setViewCubeVisible(self, value: bool) -> None: ...
    def signalsBlocked(self) -> bool: ...
    def startTimer(self, interval: int, timerType: Qt.TimerType = Qt.TimerType.CoarseTimer) -> int: ...
    def thread(self) -> QThread: ...
    def timerEvent(self, event: QTimerEvent) -> None: ...
    def tr(self) -> None: ...
    def viewInNewRenderWindow(self, nodes: Sequence[vrdNode]) -> None: ...

class vrGeometryService:
    __doc__: NoneType
    __module__: str
    staticMetaObject: QMetaObject
    def __delattr__(self) -> None: ...
    def __dir__(self, /): ...
    def __eq__(self) -> None: ...
    def __format__(self, format_spec, /): ...
    def __ge__(self) -> None: ...
    def __getattribute__(self) -> None: ...
    def __getstate__(self, /): ...
    def __gt__(self) -> None: ...
    def __hash__(self) -> None: ...
    def __init__(self) -> None: ...
    def __init_subclass__(cls) -> None: ...
    def __le__(self) -> None: ...
    def __lt__(self) -> None: ...
    def __ne__(self) -> None: ...
    def __new__(cls) -> None: ...
    def __reduce__(self, /): ...
    def __reduce_ex__(self, protocol, /): ...
    def __repr__(self) -> None: ...
    def __setattr__(self) -> None: ...
    def __sizeof__(self, /): ...
    def __str__(self) -> None: ...
    def __subclasshook__(self) -> None: ...
    def applyTessellation(self, nodes: Sequence[vrdNode], settings: vrdTessellationSettings, preserveUVs: bool = False) -> None: ...
    def blockSignals(self, b: bool) -> bool: ...
    def childEvent(self, event: QChildEvent) -> None: ...
    def children(self) -> List[QObject]: ...
    def connect(self) -> None: ...
    def connectNotify(self, signal: QMetaMethod) -> None: ...
    def createBox(self, parent: vrdNode, size: QVector3D, resolutionX: int = 10, resolutionY: int = 10, resolutionZ: int = 10, color: Union[QColor, QRgba64, Any, Qt.GlobalColor, str, int] = QColor.fromRgbF(1.000000, 1.000000, 1.000000, 1.000000)) -> vrdNode: ...
    def createCone(self, parent: vrdNode, height: float, radius: float, sides: int = 20, createSide: bool = True, createBottom: bool = True, color: Union[QColor, QRgba64, Any, Qt.GlobalColor, str, int] = QColor.fromRgbF(1.000000, 1.000000, 1.000000, 1.000000)) -> vrdNode: ...
    def createCylinder(self, parent: vrdNode, height: float, radius: float, sides: int = 20, showSide: bool = True, showTop: bool = True, showBottom: bool = True, color: Union[QColor, QRgba64, Any, Qt.GlobalColor, str, int] = QColor.fromRgbF(1.000000, 1.000000, 1.000000, 1.000000)) -> vrdNode: ...
    def createDome(self, parent: vrdNode, baseRadius: float, groundRadius: float, latres: int = 64, longres: int = 64, color: Union[QColor, QRgba64, Any, Qt.GlobalColor, str, int] = QColor.fromRgbF(1.000000, 1.000000, 1.000000, 1.000000)) -> vrdNode: ...
    def createLine(self, parent: vrdNode, point1: QVector3D, point2: QVector3D, color: Union[QColor, QRgba64, Any, Qt.GlobalColor, str, int] = QColor.fromRgbF(1.000000, 1.000000, 1.000000, 1.000000)) -> vrdNode: ...
    def createPlane(self, parent: vrdNode, size: QVector2D, resolutionX: int = 10, resolutionY: int = 10, color: Union[QColor, QRgba64, Any, Qt.GlobalColor, str, int] = QColor.fromRgbF(1.000000, 1.000000, 1.000000, 1.000000)) -> vrdNode: ...
    def createSphere(self, parent: vrdNode, radius: float, latres: int = 50, longres: int = 50, color: Union[QColor, QRgba64, Any, Qt.GlobalColor, str, int] = QColor.fromRgbF(1.000000, 1.000000, 1.000000, 1.000000)) -> vrdNode: ...
    def createTorus(self, parent: vrdNode, innerRadius: int, outerRadius: int, sides: int = 32, rings: int = 32, color: Union[QColor, QRgba64, Any, Qt.GlobalColor, str, int] = QColor.fromRgbF(1.000000, 1.000000, 1.000000, 1.000000)) -> vrdNode: ...
    def customEvent(self, event: QEvent) -> None: ...
    def deleteLater(self) -> None: ...
    def destroyed(self) -> None: ...
    def disconnect(self) -> None: ...
    def disconnectNotify(self, signal: QMetaMethod) -> None: ...
    def dumpObjectInfo(self) -> None: ...
    def dumpObjectTree(self) -> None: ...
    def dynamicPropertyNames(self) -> List[QByteArray]: ...
    def emit(self, arg__1: bytes, *args: None) -> bool: ...
    def event(self, event: QEvent) -> bool: ...
    def eventFilter(self, watched: QObject, event: QEvent) -> bool: ...
    def findChild(self, type: type, name: str = {}, options: Qt.FindChildOptions = Qt.FindChildOption.FindChildrenRecursively) -> object: ...
    def getTessellationSettings(self, node: vrdNode = Default(vrdNode)) -> vrdTessellationSettings: ...
    def hasBSides(self, root: vrdNode = Default(vrdNode)) -> bool: ...
    def hasDegenerateTriangles(self, root: vrdNode) -> bool: ...
    def inherits(self, classname: bytes) -> bool: ...
    def init(self) -> None: ...
    def installEventFilter(self, filterObj: QObject) -> None: ...
    def isSignalConnected(self, signal: QMetaMethod) -> bool: ...
    def isWidgetType(self) -> bool: ...
    def isWindowType(self) -> bool: ...
    def killTimer(self, id: int) -> None: ...
    def mergeGeometry(self, nodes: Sequence[vrdNode], material: vrdMaterial, visibilityMode: vrGeometryTypes.VisibilityMergeMode = vrGeometryTypes.VisibilityMergeMode.MergeByVisibility) -> List[vrdNode]: ...
    def mergeGeometryByMaterial(self, nodes: Sequence[vrdNode], visibilityMode: vrGeometryTypes.VisibilityMergeMode = vrGeometryTypes.VisibilityMergeMode.MergeByVisibility) -> List[vrdNode]: ...
    def metaObject(self) -> QMetaObject: ...
    def moveToThread(self, thread: QThread) -> None: ...
    def objectName(self) -> str: ...
    def objectNameChanged(self) -> None: ...
    def parent(self) -> QObject: ...
    def property(self, name: str) -> Any: ...
    def receivers(self, signal: bytes) -> int: ...
    def removeBSideNodes(self, nodes: Sequence[vrdNode]) -> None: ...
    def removeEventFilter(self, obj: QObject) -> None: ...
    def sender(self) -> QObject: ...
    def senderSignalIndex(self) -> int: ...
    def setObjectName(self, name: str) -> None: ...
    def setParent(self, parent: QObject) -> None: ...
    def setProperty(self, name: str, value: Any) -> bool: ...
    def setToBSide(self, nodes: Sequence[vrdNode], enable: bool) -> None: ...
    def signalsBlocked(self) -> bool: ...
    def splitGeometry(self, nodes: Sequence[vrdNode], maxPrimitives: int = 1) -> None: ...
    def startTimer(self, interval: int, timerType: Qt.TimerType = Qt.TimerType.CoarseTimer) -> int: ...
    def subdivideGeometry(self, nodes: Sequence[vrdNode], maxEdgeLength: float) -> None: ...
    def subdivideGeometryPhong(self, nodes: Sequence[vrdNode], iterations: int) -> None: ...
    def thread(self) -> QThread: ...
    def timerEvent(self, event: QTimerEvent) -> None: ...
    def tr(self) -> None: ...
    def unsplitFromPrimitives(self, nodes: Sequence[vrdNode]) -> None: ...

class vrGeometryTypes:
    __doc__: NoneType
    __module__: str
    Unknown: PrimitiveType
    Points: PrimitiveType
    Lines: PrimitiveType
    LineStrip: PrimitiveType
    Triangles: PrimitiveType
    MergeByVisibility: VisibilityMergeMode
    MergeOnlyVisible: VisibilityMergeMode
    MergeAllKeepVisibility: VisibilityMergeMode
    def DecoreMode(self) -> None: ...
    def DecoreSubObjectMode(self) -> None: ...
    def DecoreTransparentObjectMode(self) -> None: ...
    def PrimitiveType(self) -> None: ...
    def VisibilityMergeMode(self) -> None: ...
    def __delattr__(self) -> None: ...
    def __dir__(self, /): ...
    def __eq__(self) -> None: ...
    def __format__(self, format_spec, /): ...
    def __ge__(self) -> None: ...
    def __getattribute__(self) -> None: ...
    def __getstate__(self, /): ...
    def __gt__(self) -> None: ...
    def __hash__(self) -> None: ...
    def __init__(self) -> None: ...
    def __init_subclass__(cls) -> None: ...
    def __le__(self) -> None: ...
    def __lt__(self) -> None: ...
    def __ne__(self) -> None: ...
    def __new__(cls) -> None: ...
    def __reduce__(self, /): ...
    def __reduce_ex__(self, protocol, /): ...
    def __repr__(self) -> None: ...
    def __setattr__(self) -> None: ...
    def __sizeof__(self, /): ...
    def __str__(self) -> None: ...
    def __subclasshook__(self) -> None: ...

class vrHMDService:
    __doc__: NoneType
    __module__: str
    staticMetaObject: QMetaObject
    def XRRenderModeChanged(self) -> None: ...
    def __delattr__(self) -> None: ...
    def __dir__(self, /): ...
    def __eq__(self) -> None: ...
    def __format__(self, format_spec, /): ...
    def __ge__(self) -> None: ...
    def __getattribute__(self) -> None: ...
    def __getstate__(self, /): ...
    def __gt__(self) -> None: ...
    def __hash__(self) -> None: ...
    def __init__(self) -> None: ...
    def __init_subclass__(cls) -> None: ...
    def __le__(self) -> None: ...
    def __lt__(self) -> None: ...
    def __ne__(self) -> None: ...
    def __new__(cls) -> None: ...
    def __reduce__(self, /): ...
    def __reduce_ex__(self, protocol, /): ...
    def __repr__(self) -> None: ...
    def __setattr__(self) -> None: ...
    def __sizeof__(self, /): ...
    def __str__(self) -> None: ...
    def __subclasshook__(self) -> None: ...
    def blockSignals(self, b: bool) -> bool: ...
    def childEvent(self, event: QChildEvent) -> None: ...
    def children(self) -> List[QObject]: ...
    def connect(self) -> None: ...
    def connectNotify(self, signal: QMetaMethod) -> None: ...
    def customEvent(self, event: QEvent) -> None: ...
    def deleteLater(self) -> None: ...
    def destroyed(self) -> None: ...
    def disconnect(self) -> None: ...
    def disconnectNotify(self, signal: QMetaMethod) -> None: ...
    def dumpObjectInfo(self) -> None: ...
    def dumpObjectTree(self) -> None: ...
    def dynamicPropertyNames(self) -> List[QByteArray]: ...
    def emit(self, arg__1: bytes, *args: None) -> bool: ...
    def event(self, event: QEvent) -> bool: ...
    def eventFilter(self, watched: QObject, event: QEvent) -> bool: ...
    def eyeGazeChanged(self) -> None: ...
    def findChild(self, type: type, name: str = {}, options: Qt.FindChildOptions = Qt.FindChildOption.FindChildrenRecursively) -> object: ...
    def foveatedRenderingStateChanged(self) -> None: ...
    def getActiveOpenXRRuntimeName(self) -> str: ...
    def getActiveOpenXRSystemName(self) -> str: ...
    def getDefaultRenderMode(self) -> vrXRealityTypes.XRRenderMode: ...
    def getDepthTextureEnabled(self) -> bool: ...
    def getEyeGaze(self) -> vrdEyeGaze: ...
    def getEyeTrackingEnabled(self) -> bool: ...
    def getFovealRegionSize(self) -> float: ...
    def getFoveatedRenderingEnabled(self) -> bool: ...
    def getFoveatedRenderingQuality(self, preset: vrRenderTypes.FoveatedQualityPreset) -> vrdFoveatedQuality: ...
    def getFoveatedRenderingQualityPreset(self) -> vrRenderTypes.FoveatedQualityPreset: ...
    def getMixedRealityEyeOffsetPercentage(self) -> float: ...
    def getMixedRealityHandDepthEstimationEnabled(self) -> bool: ...
    def getOpenXRDepthLayerCompositionEnabled(self) -> bool: ...
    def getVarjoRenderSettings(self) -> vrdVarjoRenderSettings: ...
    def getXRRenderMode(self) -> vrXRealityTypes.XRRenderMode: ...
    def handDepthEstimationChanged(self) -> None: ...
    def hmdStatusChanged(self) -> None: ...
    def hmdStatusWillChange(self) -> None: ...
    def inherits(self, classname: bytes) -> bool: ...
    def init(self) -> None: ...
    def installEventFilter(self, filterObj: QObject) -> None: ...
    def isEyeTrackingActive(self) -> bool: ...
    def isHmdActive(self) -> bool: ...
    def isMixedRealitySupported(self) -> bool: ...
    def isSignalConnected(self, signal: QMetaMethod) -> bool: ...
    def isWidgetType(self) -> bool: ...
    def isWindowType(self) -> bool: ...
    def isXRRenderModeSupported(self, mode: vrXRealityTypes.XRRenderMode) -> bool: ...
    def killTimer(self, id: int) -> None: ...
    def metaObject(self) -> QMetaObject: ...
    def moveToThread(self, thread: QThread) -> None: ...
    def objectName(self) -> str: ...
    def objectNameChanged(self) -> None: ...
    def parent(self) -> QObject: ...
    def property(self, name: str) -> Any: ...
    def receivers(self, signal: bytes) -> int: ...
    def removeEventFilter(self, obj: QObject) -> None: ...
    def sender(self) -> QObject: ...
    def senderSignalIndex(self) -> int: ...
    def setDefaultRenderMode(self, mode: vrXRealityTypes.XRRenderMode) -> None: ...
    def setDepthTextureEnabled(self, enabled: bool) -> None: ...
    def setEyeTrackingEnabled(self, enabled: bool) -> None: ...
    def setFovealRegionSize(self, size: float) -> None: ...
    def setFoveatedRenderingCustomQuality(self, quality: vrdFoveatedQuality) -> None: ...
    def setFoveatedRenderingEnabled(self, enabled: bool) -> None: ...
    def setFoveatedRenderingQualityPreset(self, preset: vrRenderTypes.FoveatedQualityPreset) -> None: ...
    def setMixedRealityEyeOffsetPercentage(self, offset: float) -> None: ...
    def setMixedRealityHandDepthEstimationEnabled(self, enabled: bool) -> None: ...
    def setObjectName(self, name: str) -> None: ...
    def setOpenXRDepthLayerCompositionEnabled(self, enable: bool) -> None: ...
    def setParent(self, parent: QObject) -> None: ...
    def setProperty(self, name: str, value: Any) -> bool: ...
    def setVarjoRenderSettings(self, settings: vrdVarjoRenderSettings) -> None: ...
    def setXRRenderMode(self, mode: vrXRealityTypes.XRRenderMode) -> None: ...
    def signalsBlocked(self) -> bool: ...
    def startTimer(self, interval: int, timerType: Qt.TimerType = Qt.TimerType.CoarseTimer) -> int: ...
    def thread(self) -> QThread: ...
    def timerEvent(self, event: QTimerEvent) -> None: ...
    def tr(self) -> None: ...

class vrHandTypes:
    __doc__: NoneType
    __module__: str
    Undefined: HandRole
    LeftHand: HandRole
    RightHand: HandRole
    Thumb: FingerType
    Index: FingerType
    Middle: FingerType
    Ring: FingerType
    Pinky: FingerType
    NoGesture: HandTrackingGesture
    TapPalmGesture: HandTrackingGesture
    TapToBackOfHandGesture: HandTrackingGesture
    TwoGesture: HandTrackingGesture
    ThreeGesture: HandTrackingGesture
    RockGesture: HandTrackingGesture
    PointingGesture: HandTrackingGesture
    OpenHandGesture: HandTrackingGesture
    FistGesture: HandTrackingGesture
    PeaceGesture: HandTrackingGesture
    ThumbsUpGesture: HandTrackingGesture
    PinchingGesture: HandTrackingGesture
    CustomHandTracking: HandTrackingType
    VarjoUltraleapHandTracking: HandTrackingType
    def FingerType(self) -> None: ...
    def HandRole(self) -> None: ...
    def HandTrackingGesture(self) -> None: ...
    def HandTrackingType(self) -> None: ...
    def __delattr__(self) -> None: ...
    def __dir__(self, /): ...
    def __eq__(self) -> None: ...
    def __format__(self, format_spec, /): ...
    def __ge__(self) -> None: ...
    def __getattribute__(self) -> None: ...
    def __getstate__(self, /): ...
    def __gt__(self) -> None: ...
    def __hash__(self) -> None: ...
    def __init__(self) -> None: ...
    def __init_subclass__(cls) -> None: ...
    def __le__(self) -> None: ...
    def __lt__(self) -> None: ...
    def __ne__(self) -> None: ...
    def __new__(cls) -> None: ...
    def __reduce__(self, /): ...
    def __reduce_ex__(self, protocol, /): ...
    def __repr__(self) -> None: ...
    def __setattr__(self) -> None: ...
    def __sizeof__(self, /): ...
    def __str__(self) -> None: ...
    def __subclasshook__(self) -> None: ...

class vrImageService:
    __doc__: NoneType
    __module__: str
    staticMetaObject: QMetaObject
    def __delattr__(self) -> None: ...
    def __dir__(self, /): ...
    def __eq__(self) -> None: ...
    def __format__(self, format_spec, /): ...
    def __ge__(self) -> None: ...
    def __getattribute__(self) -> None: ...
    def __getstate__(self, /): ...
    def __gt__(self) -> None: ...
    def __hash__(self) -> None: ...
    def __init__(self) -> None: ...
    def __init_subclass__(cls) -> None: ...
    def __le__(self) -> None: ...
    def __lt__(self) -> None: ...
    def __ne__(self) -> None: ...
    def __new__(cls) -> None: ...
    def __reduce__(self, /): ...
    def __reduce_ex__(self, protocol, /): ...
    def __repr__(self) -> None: ...
    def __setattr__(self) -> None: ...
    def __sizeof__(self, /): ...
    def __str__(self) -> None: ...
    def __subclasshook__(self) -> None: ...
    def blockSignals(self, b: bool) -> bool: ...
    def childEvent(self, event: QChildEvent) -> None: ...
    def children(self) -> List[QObject]: ...
    def connect(self) -> None: ...
    def connectNotify(self, signal: QMetaMethod) -> None: ...
    def createImage(self, source: vrdImage = Default(vrdImage)) -> vrdImage: ...
    def customEvent(self, event: QEvent) -> None: ...
    def deleteLater(self) -> None: ...
    def destroyed(self) -> None: ...
    def disconnect(self) -> None: ...
    def disconnectNotify(self, signal: QMetaMethod) -> None: ...
    def dumpObjectInfo(self) -> None: ...
    def dumpObjectTree(self) -> None: ...
    def dynamicPropertyNames(self) -> List[QByteArray]: ...
    def emit(self, arg__1: bytes, *args: None) -> bool: ...
    def event(self, event: QEvent) -> bool: ...
    def eventFilter(self, watched: QObject, event: QEvent) -> bool: ...
    def findChild(self, type: type, name: str = {}, options: Qt.FindChildOptions = Qt.FindChildOption.FindChildrenRecursively) -> object: ...
    def getShareMode(self) -> vrImageTypes.ShareMode: ...
    def inherits(self, classname: bytes) -> bool: ...
    def init(self) -> None: ...
    def installEventFilter(self, filterObj: QObject) -> None: ...
    def isSignalConnected(self, signal: QMetaMethod) -> bool: ...
    def isWidgetType(self) -> bool: ...
    def isWindowType(self) -> bool: ...
    def killTimer(self, id: int) -> None: ...
    def loadImage(self, filename: str, loadType: vrImageTypes.LoadType = vrImageTypes.LoadType.Default, loadOptions: int = 0) -> vrdImage: ...
    def metaObject(self) -> QMetaObject: ...
    def moveToThread(self, thread: QThread) -> None: ...
    def objectName(self) -> str: ...
    def objectNameChanged(self) -> None: ...
    def parent(self) -> QObject: ...
    def property(self, name: str) -> Any: ...
    def readImageInformation(self, filename: str) -> str: ...
    def receivers(self, signal: bytes) -> int: ...
    def releaseImage(self, image: vrdImage) -> None: ...
    def removeEventFilter(self, obj: QObject) -> None: ...
    def reuseImage(self, source: vrdImage) -> vrdImage: ...
    def saveImage(self, image: vrdImage, filename: str) -> bool: ...
    def saveImageSequence(self, image: vrdImage, directory: str) -> bool: ...
    def sender(self) -> QObject: ...
    def senderSignalIndex(self) -> int: ...
    def setObjectName(self, name: str) -> None: ...
    def setParent(self, parent: QObject) -> None: ...
    def setProperty(self, name: str, value: Any) -> bool: ...
    def setShareMode(self, mode: vrImageTypes.ShareMode) -> None: ...
    def signalsBlocked(self) -> bool: ...
    def startTimer(self, interval: int, timerType: Qt.TimerType = Qt.TimerType.CoarseTimer) -> int: ...
    def thread(self) -> QThread: ...
    def timerEvent(self, event: QTimerEvent) -> None: ...
    def tr(self) -> None: ...

class vrImageTypes:
    __doc__: NoneType
    __module__: str
    DontReuse: LoadOptionsBitmask
    def LoadOptionsBitmask(self) -> None: ...
    def LoadType(self) -> None: ...
    def ShareMode(self) -> None: ...
    def __copy__(self) -> None: ...
    def __delattr__(self) -> None: ...
    def __dir__(self, /): ...
    def __eq__(self) -> None: ...
    def __format__(self, format_spec, /): ...
    def __ge__(self) -> None: ...
    def __getattribute__(self) -> None: ...
    def __getstate__(self, /): ...
    def __gt__(self) -> None: ...
    def __hash__(self) -> None: ...
    def __init__(self) -> None: ...
    def __init_subclass__(cls) -> None: ...
    def __le__(self) -> None: ...
    def __lt__(self) -> None: ...
    def __ne__(self) -> None: ...
    def __new__(cls) -> None: ...
    def __reduce__(self, /): ...
    def __reduce_ex__(self, protocol, /): ...
    def __repr__(self) -> None: ...
    def __setattr__(self) -> None: ...
    def __sizeof__(self, /): ...
    def __str__(self) -> None: ...
    def __subclasshook__(self) -> None: ...

class vrImmersiveInteractionService:
    __doc__: NoneType
    __module__: str
    staticMetaObject: QMetaObject
    def __delattr__(self) -> None: ...
    def __dir__(self, /): ...
    def __eq__(self) -> None: ...
    def __format__(self, format_spec, /): ...
    def __ge__(self) -> None: ...
    def __getattribute__(self) -> None: ...
    def __getstate__(self, /): ...
    def __gt__(self) -> None: ...
    def __hash__(self) -> None: ...
    def __init__(self) -> None: ...
    def __init_subclass__(cls) -> None: ...
    def __le__(self) -> None: ...
    def __lt__(self) -> None: ...
    def __ne__(self) -> None: ...
    def __new__(cls) -> None: ...
    def __reduce__(self, /): ...
    def __reduce_ex__(self, protocol, /): ...
    def __repr__(self) -> None: ...
    def __setattr__(self) -> None: ...
    def __sizeof__(self, /): ...
    def __str__(self) -> None: ...
    def __subclasshook__(self) -> None: ...
    def activateGroundCalibrationMode(self, rightHand: bool) -> None: ...
    def automaticCollisionObjectCreationChanged(self) -> None: ...
    def blockSignals(self, b: bool) -> bool: ...
    def childEvent(self, event: QChildEvent) -> None: ...
    def children(self) -> List[QObject]: ...
    def connect(self) -> None: ...
    def connectNotify(self, signal: QMetaMethod) -> None: ...
    def controllerVisualizationModeChanged(self) -> None: ...
    def createMultiMarker(self, multiMarkerName: str, markerNames: Sequence[str], markerType: vrXRealityTypes.MarkerTypes) -> vrdMultiMarker: ...
    def customEvent(self, event: QEvent) -> None: ...
    def deleteLater(self) -> None: ...
    def destroyed(self) -> None: ...
    def disconnect(self) -> None: ...
    def disconnectNotify(self, signal: QMetaMethod) -> None: ...
    def dumpObjectInfo(self) -> None: ...
    def dumpObjectTree(self) -> None: ...
    def dynamicPropertyNames(self) -> List[QByteArray]: ...
    def emit(self, arg__1: bytes, *args: None) -> bool: ...
    def event(self, event: QEvent) -> bool: ...
    def eventFilter(self, watched: QObject, event: QEvent) -> bool: ...
    def findChild(self, type: type, name: str = {}, options: Qt.FindChildOptions = Qt.FindChildOption.FindChildrenRecursively) -> object: ...
    def getActiveHMDSupportsHandTracking(self) -> bool: ...
    def getAutoCreateCollisionObjects(self) -> bool: ...
    def getControlMode(self) -> vrImmersiveInteractionTypes.ControlMode: ...
    def getControllerVisualizationMode(self) -> vrVRInputDeviceTypes.VisualizationMode: ...
    def getDetectedMarkers(self, markerType: vrXRealityTypes.MarkerTypes) -> List[vrdMarker]: ...
    def getHandTrackingEnabled(self) -> bool: ...
    def getHandTrackingOffset(self) -> QMatrix4x4: ...
    def getHandTrackingType(self) -> vrHandTypes.HandTrackingType: ...
    def getMarker(self, name: str, markerType: vrXRealityTypes.MarkerTypes) -> vrdMarker: ...
    def getMinMarkerConfidence(self) -> float: ...
    def getPointerRayScaleRange(self) -> QVector2D: ...
    def getPointerScalingDistance(self) -> float: ...
    def getPointerSphereScaleRange(self) -> QVector2D: ...
    def getPreferredTooltipsMode(self) -> bool: ...
    def getRelativeTeleportOrientation(self) -> bool: ...
    def getTeleportAvailability(self) -> List[vrXRealityTypes.XRRenderMode]: ...
    def getTeleportGroundHeight(self) -> float: ...
    def getTeleportGroundMode(self) -> vrImmersiveInteractionTypes.TeleportGroundMode: ...
    def getTeleportRange(self) -> float: ...
    def hideControllerMessage(self, message: vrdNode) -> None: ...
    def hmdStatusChanged(self) -> None: ...
    def inherits(self, classname: bytes) -> bool: ...
    def init(self) -> None: ...
    def installEventFilter(self, filterObj: QObject) -> None: ...
    def isHmdActive(self) -> bool: ...
    def isSignalConnected(self, signal: QMetaMethod) -> bool: ...
    def isWidgetType(self) -> bool: ...
    def isWindowType(self) -> bool: ...
    def killTimer(self, id: int) -> None: ...
    def markersDetected(self) -> None: ...
    def markersUpdated(self) -> None: ...
    def metaObject(self) -> QMetaObject: ...
    def moveToThread(self, thread: QThread) -> None: ...
    def objectName(self) -> str: ...
    def objectNameChanged(self) -> None: ...
    def parent(self) -> QObject: ...
    def pickingMoved(self, hit: vrdRayIntersection) -> None: ...
    def pickingPressed(self, hit: vrdRayIntersection) -> None: ...
    def pickingReleased(self, hit: vrdRayIntersection) -> None: ...
    def property(self, name: str) -> Any: ...
    def receivers(self, signal: bytes) -> int: ...
    def removeEventFilter(self, obj: QObject) -> None: ...
    def sender(self) -> QObject: ...
    def senderSignalIndex(self) -> int: ...
    def setAutoCreateCollisionObjects(self, automatic: bool) -> None: ...
    def setControlMode(self, mode: vrImmersiveInteractionTypes.ControlMode) -> None: ...
    def setControllerVisualizationMode(self, mode: vrVRInputDeviceTypes.VisualizationMode) -> None: ...
    def setDefaultInteractionsActive(self, active: bool) -> None: ...
    def setHandTrackingEnabled(self, value: bool) -> None: ...
    def setHandTrackingOffset(self, offset: Union[QMatrix4x4, QTransform]) -> None: ...
    def setHandTrackingType(self, type: vrHandTypes.HandTrackingType) -> None: ...
    def setInteractionActive(self, name: str, active: bool) -> None: ...
    def setMarkerTrackingType(self, markerIds: Sequence[int], trackingType: vrXRealityTypes.MarkerTrackingTypes) -> None: ...
    def setMinMarkerConfidence(self, confidence: float) -> None: ...
    def setObjectName(self, name: str) -> None: ...
    def setParent(self, parent: QObject) -> None: ...
    def setPointerRayScaleRange(self, value: QVector2D) -> None: ...
    def setPointerScalingDistance(self, value: float) -> None: ...
    def setPointerSphereScaleRange(self, value: QVector2D) -> None: ...
    def setPreferredControllerVisualizeMode(self, mode: vrVRInputDeviceTypes.VisualizationMode) -> None: ...
    def setPreferredTooltipsMode(self, show: bool) -> None: ...
    def setProperty(self, name: str, value: Any) -> bool: ...
    def setRelativeTeleportOrientation(self, isRelative: bool) -> None: ...
    def setTeleportAvailability(self, modes: Sequence[vrXRealityTypes.XRRenderMode]) -> None: ...
    def setTeleportGroundHeight(self, height: float) -> None: ...
    def setTeleportGroundMode(self, mode: vrImmersiveInteractionTypes.TeleportGroundMode) -> None: ...
    def setTeleportRange(self, range: float) -> None: ...
    def setViewpointMode(self, adjustHeight: bool, adjustOrientation: bool = True, adjustPosition: bool = True) -> None: ...
    def showControllerMessage(self, data: vrdDeviceMessageData, rightHand: bool) -> vrdNode: ...
    def showTooltipsOnStartChanged(self) -> None: ...
    def signalsBlocked(self) -> bool: ...
    def startTimer(self, interval: int, timerType: Qt.TimerType = Qt.TimerType.CoarseTimer) -> int: ...
    def teleportGroundModeChanged(self) -> None: ...
    def thread(self) -> QThread: ...
    def timerEvent(self, event: QTimerEvent) -> None: ...
    def tr(self) -> None: ...

class vrImmersiveInteractionTypes:
    __doc__: NoneType
    __module__: str
    OnGeometry: TeleportGroundMode
    OnGroundPlane: TeleportGroundMode
    TriggerPointer: ControlMode
    ButtonPointer: ControlMode
    def ControlMode(self) -> None: ...
    def TeleportGroundMode(self) -> None: ...
    def __delattr__(self) -> None: ...
    def __dir__(self, /): ...
    def __eq__(self) -> None: ...
    def __format__(self, format_spec, /): ...
    def __ge__(self) -> None: ...
    def __getattribute__(self) -> None: ...
    def __getstate__(self, /): ...
    def __gt__(self) -> None: ...
    def __hash__(self) -> None: ...
    def __init__(self) -> None: ...
    def __init_subclass__(cls) -> None: ...
    def __le__(self) -> None: ...
    def __lt__(self) -> None: ...
    def __ne__(self) -> None: ...
    def __new__(cls) -> None: ...
    def __reduce__(self, /): ...
    def __reduce_ex__(self, protocol, /): ...
    def __repr__(self) -> None: ...
    def __setattr__(self) -> None: ...
    def __sizeof__(self, /): ...
    def __str__(self) -> None: ...
    def __subclasshook__(self) -> None: ...

class vrImmersiveUiService:
    __doc__: NoneType
    __module__: str
    staticMetaObject: QMetaObject
    def __delattr__(self) -> None: ...
    def __dir__(self, /): ...
    def __eq__(self) -> None: ...
    def __format__(self, format_spec, /): ...
    def __ge__(self) -> None: ...
    def __getattribute__(self) -> None: ...
    def __getstate__(self, /): ...
    def __gt__(self) -> None: ...
    def __hash__(self) -> None: ...
    def __init__(self) -> None: ...
    def __init_subclass__(cls) -> None: ...
    def __le__(self) -> None: ...
    def __lt__(self) -> None: ...
    def __ne__(self) -> None: ...
    def __new__(cls) -> None: ...
    def __reduce__(self, /): ...
    def __reduce_ex__(self, protocol, /): ...
    def __repr__(self) -> None: ...
    def __setattr__(self) -> None: ...
    def __sizeof__(self, /): ...
    def __str__(self) -> None: ...
    def __subclasshook__(self) -> None: ...
    def blockSignals(self, b: bool) -> bool: ...
    def childEvent(self, event: QChildEvent) -> None: ...
    def children(self) -> List[QObject]: ...
    def connect(self) -> None: ...
    def connectNotify(self, signal: QMetaMethod) -> None: ...
    def createMenu(self, name: str = '') -> vrdImmersiveMenu: ...
    def createTool(self, name: str = '') -> vrdImmersiveTool: ...
    def customEvent(self, event: QEvent) -> None: ...
    def deleteLater(self) -> None: ...
    def destroyed(self) -> None: ...
    def disconnect(self) -> None: ...
    def disconnectNotify(self, signal: QMetaMethod) -> None: ...
    def dumpObjectInfo(self) -> None: ...
    def dumpObjectTree(self) -> None: ...
    def dynamicPropertyNames(self) -> List[QByteArray]: ...
    def emit(self, arg__1: bytes, *args: None) -> bool: ...
    def event(self, event: QEvent) -> bool: ...
    def eventFilter(self, watched: QObject, event: QEvent) -> bool: ...
    def findChild(self, type: type, name: str = {}, options: Qt.FindChildOptions = Qt.FindChildOption.FindChildrenRecursively) -> object: ...
    def findMenu(self, name: str) -> vrdImmersiveMenu: ...
    def findTool(self, name: str) -> vrdImmersiveTool: ...
    def getHideParticipantsVRPanel(self) -> bool: ...
    def getHideStatusVRPanel(self) -> bool: ...
    def getTools(self) -> List[vrdImmersiveTool]: ...
    def inherits(self, classname: bytes) -> bool: ...
    def init(self) -> None: ...
    def installEventFilter(self, filterObj: QObject) -> None: ...
    def isSignalConnected(self, signal: QMetaMethod) -> bool: ...
    def isWidgetType(self) -> bool: ...
    def isWindowType(self) -> bool: ...
    def killTimer(self, id: int) -> None: ...
    def metaObject(self) -> QMetaObject: ...
    def moveToThread(self, thread: QThread) -> None: ...
    def objectName(self) -> str: ...
    def objectNameChanged(self) -> None: ...
    def parent(self) -> QObject: ...
    def property(self, name: str) -> Any: ...
    def receivers(self, signal: bytes) -> int: ...
    def removeEventFilter(self, obj: QObject) -> None: ...
    def sender(self) -> QObject: ...
    def senderSignalIndex(self) -> int: ...
    def setHideParticipantsVRPanel(self, value: bool) -> None: ...
    def setHideStatusVRPanel(self, value: bool) -> None: ...
    def setObjectName(self, name: str) -> None: ...
    def setParent(self, parent: QObject) -> None: ...
    def setProperty(self, name: str, value: Any) -> bool: ...
    def showToolsMenu(self, show: bool, rightHand: bool = False) -> None: ...
    def signalsBlocked(self) -> bool: ...
    def startTimer(self, interval: int, timerType: Qt.TimerType = Qt.TimerType.CoarseTimer) -> int: ...
    def thread(self) -> QThread: ...
    def timerEvent(self, event: QTimerEvent) -> None: ...
    def toggleToolsMenu(self, rightHand: bool = False) -> bool: ...
    def toolChecked(self) -> None: ...
    def toolClicked(self) -> None: ...
    def toolSubMenuClosed(self) -> None: ...
    def toolSubMenuOpened(self) -> None: ...
    def toolUnchecked(self) -> None: ...
    def tr(self) -> None: ...

class vrLensFlareTypes:
    __doc__: NoneType
    __module__: str
    def ElementShape(self) -> None: ...
    def ElementType(self) -> None: ...
    def PresetType(self) -> None: ...
    def StarShape(self) -> None: ...
    def __delattr__(self) -> None: ...
    def __dir__(self, /): ...
    def __eq__(self) -> None: ...
    def __format__(self, format_spec, /): ...
    def __ge__(self) -> None: ...
    def __getattribute__(self) -> None: ...
    def __getstate__(self, /): ...
    def __gt__(self) -> None: ...
    def __hash__(self) -> None: ...
    def __init__(self) -> None: ...
    def __init_subclass__(cls) -> None: ...
    def __le__(self) -> None: ...
    def __lt__(self) -> None: ...
    def __ne__(self) -> None: ...
    def __new__(cls) -> None: ...
    def __reduce__(self, /): ...
    def __reduce_ex__(self, protocol, /): ...
    def __repr__(self) -> None: ...
    def __setattr__(self) -> None: ...
    def __sizeof__(self, /): ...
    def __str__(self) -> None: ...
    def __subclasshook__(self) -> None: ...

class vrLightService:
    __doc__: NoneType
    __module__: str
    staticMetaObject: QMetaObject
    def __delattr__(self) -> None: ...
    def __dir__(self, /): ...
    def __eq__(self) -> None: ...
    def __format__(self, format_spec, /): ...
    def __ge__(self) -> None: ...
    def __getattribute__(self) -> None: ...
    def __getstate__(self, /): ...
    def __gt__(self) -> None: ...
    def __hash__(self) -> None: ...
    def __init__(self) -> None: ...
    def __init_subclass__(cls) -> None: ...
    def __le__(self) -> None: ...
    def __lt__(self) -> None: ...
    def __ne__(self) -> None: ...
    def __new__(cls) -> None: ...
    def __reduce__(self, /): ...
    def __reduce_ex__(self, protocol, /): ...
    def __repr__(self) -> None: ...
    def __setattr__(self) -> None: ...
    def __sizeof__(self, /): ...
    def __str__(self) -> None: ...
    def __subclasshook__(self) -> None: ...
    def blockSignals(self, b: bool) -> bool: ...
    def childEvent(self, event: QChildEvent) -> None: ...
    def children(self) -> List[QObject]: ...
    def connect(self) -> None: ...
    def connectNotify(self, signal: QMetaMethod) -> None: ...
    def convertLight(self, lightNode: vrdNode, lightType: vrLightTypes.LightType) -> None: ...
    def convertLights(self, nodes: Sequence[vrdNode], lightType: vrLightTypes.LightType) -> None: ...
    def copyLensFlare(self, effect: vrdLensFlareEffect) -> None: ...
    def copyLensFlareElements(self, elements: Sequence[vrdLensFlareElement]) -> None: ...
    def copyLensFlareGhosts(self, ghosts: Sequence[vrdLensFlareGhost]) -> None: ...
    def copyLights(self, nodes: Sequence[vrdNode]) -> None: ...
    def createLight(self, name: str, type: vrLightTypes.LightType, parent: vrdNode = Default(vrdNode)) -> vrdNode: ...
    def createLightLinkSet(self, name: str = '') -> vrdLightLinkSetNode: ...
    def customEvent(self, event: QEvent) -> None: ...
    def deleteLater(self) -> None: ...
    def destroyed(self) -> None: ...
    def disconnect(self) -> None: ...
    def disconnectNotify(self, signal: QMetaMethod) -> None: ...
    def dumpObjectInfo(self) -> None: ...
    def dumpObjectTree(self) -> None: ...
    def duplicateLensFlareElements(self, light: vrdPointLightNode, elements: Sequence[vrdLensFlareElement]) -> None: ...
    def duplicateLensFlareGhosts(self, ghostLine: vrdLensFlareGhostLine, ghosts: Sequence[vrdLensFlareGhost]) -> None: ...
    def duplicateLights(self, nodes: Sequence[vrdNode]) -> None: ...
    def dynamicPropertyNames(self) -> List[QByteArray]: ...
    def emit(self, arg__1: bytes, *args: None) -> bool: ...
    def event(self, event: QEvent) -> bool: ...
    def eventFilter(self, watched: QObject, event: QEvent) -> bool: ...
    def findChild(self, type: type, name: str = {}, options: Qt.FindChildOptions = Qt.FindChildOption.FindChildrenRecursively) -> object: ...
    def findLight(self, name: str) -> vrdNode: ...
    def findLights(self, name: str) -> List[vrdNode]: ...
    def getAllLights(self, sceneGraph: bool) -> List[vrdNode]: ...
    def getHeadlight(self) -> vrdBaseLightNode: ...
    def getLightLinksRoot(self) -> vrdNode: ...
    def getLightRoot(self) -> vrdNode: ...
    def getLightsClipboard(self) -> List[vrdNode]: ...
    def getSelectedLensFlareElements(self) -> List[vrdLensFlareElement]: ...
    def getSelectedLensFlareGhosts(self) -> List[vrdLensFlareGhost]: ...
    def getSelectedNodes(self) -> List[vrdNode]: ...
    def hasCopiedGhosts(self) -> bool: ...
    def hasCopiedLensFlareEffect(self) -> bool: ...
    def hasCopiedLensFlareElements(self) -> bool: ...
    def inherits(self, classname: bytes) -> bool: ...
    def init(self) -> None: ...
    def installEventFilter(self, filterObj: QObject) -> None: ...
    def isHeadLight(self, light: vrdBaseLightNode) -> bool: ...
    def isLightsClipboardEmpty(self) -> bool: ...
    def isSignalConnected(self, signal: QMetaMethod) -> bool: ...
    def isWidgetType(self) -> bool: ...
    def isWindowType(self) -> bool: ...
    def killTimer(self, id: int) -> None: ...
    def lensFlareElementSelectionChanged(self) -> None: ...
    def lensFlareGhostSelectionChanged(self) -> None: ...
    def lightLinkSetsChanged(self) -> None: ...
    def lightsConverted(self) -> None: ...
    def lightsStateChanged(self) -> None: ...
    def lightsValidated(self) -> None: ...
    def loadLights(self, paths: Sequence[str]) -> List[vrdNode]: ...
    def metaObject(self) -> QMetaObject: ...
    def moveToThread(self, thread: QThread) -> None: ...
    def nodeSelectionChanged(self) -> None: ...
    def nodesAdded(self) -> None: ...
    def nodesChanged(self) -> None: ...
    def nodesRemoved(self) -> None: ...
    def objectName(self) -> str: ...
    def objectNameChanged(self) -> None: ...
    def parent(self) -> QObject: ...
    def pasteLensFlare(self, lights: Sequence[vrdPointLightNode]) -> None: ...
    def pasteLensFlareElements(self, light: vrdPointLightNode) -> None: ...
    def pasteLensFlareGhosts(self, ghostLine: vrdLensFlareGhostLine) -> None: ...
    def pasteLights(self, targetNodes: Sequence[vrdNode]) -> None: ...
    def property(self, name: str) -> Any: ...
    def receivers(self, signal: bytes) -> int: ...
    def removeEventFilter(self, obj: QObject) -> None: ...
    def removeLightLinkSets(self, nodes: Sequence[vrdLightLinkSetNode]) -> None: ...
    def removeLights(self, nodes: Sequence[vrdNode]) -> None: ...
    def saveLights(self, nodes: Sequence[vrdNode], path: str) -> bool: ...
    def sender(self) -> QObject: ...
    def senderSignalIndex(self) -> int: ...
    def setObjectName(self, name: str) -> None: ...
    def setParent(self, parent: QObject) -> None: ...
    def setProperty(self, name: str, value: Any) -> bool: ...
    def setSelectedLensFlareElements(self, elements: Sequence[vrdLensFlareElement]) -> None: ...
    def setSelectedLensFlareGhosts(self, ghosts: Sequence[vrdLensFlareGhost]) -> None: ...
    def setSelectedNodes(self, nodes: Sequence[vrdNode]) -> None: ...
    def signalsBlocked(self) -> bool: ...
    def startTimer(self, interval: int, timerType: Qt.TimerType = Qt.TimerType.CoarseTimer) -> int: ...
    def thread(self) -> QThread: ...
    def timerEvent(self, event: QTimerEvent) -> None: ...
    def tr(self) -> None: ...
    def validateLights(self) -> None: ...

class vrLightTypes:
    __doc__: NoneType
    __module__: str
    def Attenuation(self) -> None: ...
    def LightType(self) -> None: ...
    def Unit(self) -> None: ...
    def VolumeIlluminationMode(self) -> None: ...
    def __delattr__(self) -> None: ...
    def __dir__(self, /): ...
    def __eq__(self) -> None: ...
    def __format__(self, format_spec, /): ...
    def __ge__(self) -> None: ...
    def __getattribute__(self) -> None: ...
    def __getstate__(self, /): ...
    def __gt__(self) -> None: ...
    def __hash__(self) -> None: ...
    def __init__(self) -> None: ...
    def __init_subclass__(cls) -> None: ...
    def __le__(self) -> None: ...
    def __lt__(self) -> None: ...
    def __ne__(self) -> None: ...
    def __new__(cls) -> None: ...
    def __reduce__(self, /): ...
    def __reduce_ex__(self, protocol, /): ...
    def __repr__(self) -> None: ...
    def __setattr__(self) -> None: ...
    def __sizeof__(self, /): ...
    def __str__(self) -> None: ...
    def __subclasshook__(self) -> None: ...

class vrMaterialEntryId:
    __doc__: NoneType
    __hash__: NoneType
    __module__: str
    def __copy__(self) -> None: ...
    def __delattr__(self) -> None: ...
    def __dir__(self, /): ...
    def __eq__(self) -> None: ...
    def __format__(self, format_spec, /): ...
    def __ge__(self) -> None: ...
    def __getattribute__(self) -> None: ...
    def __getstate__(self, /): ...
    def __gt__(self) -> None: ...
    def __init__(self) -> None: ...
    def __init_subclass__(cls) -> None: ...
    def __le__(self) -> None: ...
    def __lshift__(self) -> None: ...
    def __lt__(self) -> None: ...
    def __ne__(self) -> None: ...
    def __new__(cls) -> None: ...
    def __reduce__(self, /): ...
    def __reduce_ex__(self, protocol, /): ...
    def __repr__(self) -> None: ...
    def __rlshift__(self) -> None: ...
    def __rrshift__(self) -> None: ...
    def __rshift__(self) -> None: ...
    def __setattr__(self) -> None: ...
    def __sizeof__(self, /): ...
    def __str__(self) -> None: ...
    def __subclasshook__(self) -> None: ...
    def getEntry(self) -> vrMaterialEntry: ...
    def getEntryType(self) -> vrMaterialEntryType: ...
    def getParentId(self) -> vrMaterialEntryId: ...

class vrMaterialService:
    __doc__: NoneType
    __module__: str
    staticMetaObject: QMetaObject
    def __delattr__(self) -> None: ...
    def __dir__(self, /): ...
    def __eq__(self) -> None: ...
    def __format__(self, format_spec, /): ...
    def __ge__(self) -> None: ...
    def __getattribute__(self) -> None: ...
    def __getstate__(self, /): ...
    def __gt__(self) -> None: ...
    def __hash__(self) -> None: ...
    def __init__(self) -> None: ...
    def __init_subclass__(cls) -> None: ...
    def __le__(self) -> None: ...
    def __lt__(self) -> None: ...
    def __ne__(self) -> None: ...
    def __new__(cls) -> None: ...
    def __reduce__(self, /): ...
    def __reduce_ex__(self, protocol, /): ...
    def __repr__(self) -> None: ...
    def __setattr__(self) -> None: ...
    def __sizeof__(self, /): ...
    def __str__(self) -> None: ...
    def __subclasshook__(self) -> None: ...
    def addToDefaultEnvironmentSwitch(self, environmentMaterial: vrdEnvironmentMaterial) -> None: ...
    def applyEnvironmentToAllMaterials(self, environment: vrdMaterial, name: str) -> None: ...
    def applyEnvironmentToNodes(self, material: vrdMaterial, nodes: Sequence[vrdNode]) -> None: ...
    def applyMaterialToNodes(self, material: vrdMaterial, nodes: Sequence[vrdNode]) -> None: ...
    def blockSignals(self, b: bool) -> bool: ...
    def childEvent(self, event: QChildEvent) -> None: ...
    def children(self) -> List[QObject]: ...
    def connect(self) -> None: ...
    def connectNotify(self, signal: QMetaMethod) -> None: ...
    def convertMaterial(self, material: vrdMaterial, type: vrMaterialTypes.MaterialType) -> vrdMaterial: ...
    def copyMaterialAttributes(self, source: vrdMaterial, targets: Sequence[vrdMaterial]) -> None: ...
    def copyMaterialChunks(self, chunks: Sequence[vrdMaterialChunk]) -> None: ...
    def copyTextureSize(self, source: vrdMaterial, targets: Sequence[vrdMaterial]) -> None: ...
    def createMaterial(self, name: str, type: vrMaterialTypes.MaterialType, materialGroup: vrdNode = Default(vrdNode)) -> vrdMaterial: ...
    def createMaterialGroup(self, nodes: Sequence[vrdNode] = Default(QList<vrdNode>), parent: vrdNode = Default(vrdNode)) -> vrdNode: ...
    def createSwitchMaterial(self, materials: Sequence[vrdMaterial] = Default(QList<vrdMaterial>), parent: vrdNode = Default(vrdNode)) -> vrdMaterial: ...
    def customEvent(self, event: QEvent) -> None: ...
    def deleteEntries(self, entries: Sequence[vrMaterialEntryId], keepVariants: bool = False) -> None: ...
    def deleteLater(self) -> None: ...
    def deleteMaterials(self, materials: Sequence[vrdMaterial], keepVariants: bool = False) -> None: ...
    def destroyed(self) -> None: ...
    def disconnect(self) -> None: ...
    def disconnectNotify(self, signal: QMetaMethod) -> None: ...
    def dumpObjectInfo(self) -> None: ...
    def dumpObjectTree(self) -> None: ...
    def duplicateEntries(self, entries: Sequence[vrMaterialEntryId]) -> List[vrMaterialEntryId]: ...
    def duplicateMaterials(self, materials: Sequence[vrdMaterial]) -> List[vrdMaterial]: ...
    def dynamicPropertyNames(self) -> List[QByteArray]: ...
    def emit(self, arg__1: bytes, *args: None) -> bool: ...
    def event(self, event: QEvent) -> bool: ...
    def eventFilter(self, watched: QObject, event: QEvent) -> bool: ...
    def findChild(self, type: type, name: str = {}, options: Qt.FindChildOptions = Qt.FindChildOption.FindChildrenRecursively) -> object: ...
    def findMaterial(self, name: str) -> vrdMaterial: ...
    def findMaterialNode(self, material: vrdMaterial, root: vrdNode = Default(vrdNode)) -> vrdMaterialNode: ...
    def findMaterials(self, name: str) -> List[vrdMaterial]: ...
    def findMaterialsUsedInVariants(self, root: vrdNode = Default(vrdNode)) -> List[vrdMaterial]: ...
    def findNodesWithMaterial(self, material: vrdMaterial) -> List[vrdNode]: ...
    def findUnusedMaterials(self) -> List[vrdMaterial]: ...
    def getAllMaterialTags(self) -> List[str]: ...
    def getAllMaterials(self) -> List[vrdMaterial]: ...
    def getDefaultEnvironment(self) -> vrdMaterial: ...
    def getDefaultEnvironmentSwitchMaterial(self) -> vrdEnvironmentSwitchMaterial: ...
    def getEntries(self, materials: Sequence[vrdMaterial]) -> List[vrMaterialEntryId]: ...
    def getGroupPath(self, node: vrdNode) -> List[str]: ...
    def getImportMetadata(self, type: vrMaterialTypes.MaterialType) -> bool: ...
    def getMaterialFromId(self, materialId: int) -> vrdMaterial: ...
    def getMaterialNodes(self, root: vrdNode = Default(vrdNode)) -> List[vrdMaterialNode]: ...
    def getMaterialRoot(self) -> vrdNode: ...
    def getMaterialSelection(self) -> List[vrdMaterial]: ...
    def getMaterials(self, root: vrdNode) -> List[vrdMaterial]: ...
    def getMaterialsWithAllTags(self, tags: Sequence[str]) -> List[vrdMaterial]: ...
    def getMaterialsWithAnyTag(self, tags: Sequence[str]) -> List[vrdMaterial]: ...
    def getNumberOfMaterials(self) -> int: ...
    def getNumberOfTextures(self) -> int: ...
    def getPlanarManipulatorTransparency(self) -> float: ...
    def getPreviewScenes(self) -> List[str]: ...
    def getSelection(self) -> List[vrMaterialEntryId]: ...
    def getSupportedMaterialTypes(self) -> List[vrMaterialTypes.MaterialType]: ...
    def getTireManipulatorTransparency(self) -> float: ...
    def getUniqueName(self, name: str, forceHighestIndex: bool = True) -> str: ...
    def getUsedTextureMemory(self) -> int: ...
    def inherits(self, classname: bytes) -> bool: ...
    def init(self) -> None: ...
    def installEventFilter(self, filterObj: QObject) -> None: ...
    def isSignalConnected(self, signal: QMetaMethod) -> bool: ...
    def isWidgetType(self) -> bool: ...
    def isWindowType(self) -> bool: ...
    def killTimer(self, id: int) -> None: ...
    def loadAnimationToMaterials(self, materials: Sequence[vrdMaterial], animation: str) -> None: ...
    def loadEnvironmentAssetToDefaultSwitch(self, uuid: str) -> None: ...
    def loadMaterialAsset(self, uuid: str, parent: vrdNode = Default(vrdNode)) -> vrdMaterialNode: ...
    def loadMaterials(self, fileNames: Sequence[str], materialGroup: vrdNode = Default(vrdNode)) -> List[vrdMaterial]: ...
    def materialsChanged(self) -> None: ...
    def mergeDuplicateMaterials(self, options: vrMaterialTypes.MergeOptions = vrMaterialTypes.MergeOptions.Default) -> None: ...
    def metaObject(self) -> QMetaObject: ...
    def moveToThread(self, thread: QThread) -> None: ...
    def objectName(self) -> str: ...
    def objectNameChanged(self) -> None: ...
    def optimizeTextures(self) -> None: ...
    def parent(self) -> QObject: ...
    def pasteEntries(self, sources: Sequence[vrMaterialEntryId], targets: Sequence[vrMaterialEntryId]) -> None: ...
    def pasteMaterialChunks(self, chunkMaterial: vrdChunkMaterial) -> None: ...
    def planarManipulatorTransparencyChanged(self) -> None: ...
    def previewsChanged(self) -> None: ...
    def property(self, name: str) -> Any: ...
    def receivers(self, signal: bytes) -> int: ...
    def referenceUnusedMaterials(self) -> int: ...
    def removeAllGroups(self) -> None: ...
    def removeEventFilter(self, obj: QObject) -> None: ...
    def removeUnusedMaterials(self) -> None: ...
    def renderMultiPreview(self, materials: Sequence[vrdMaterial], totalCount: int, size: QSize, text: str = '') -> QImage: ...
    def saveMaterials(self, materials: Sequence[vrdMaterial], path: str) -> bool: ...
    def selectNodes(self, materials: Sequence[vrdMaterial], clearSelection: bool) -> None: ...
    def selectionChanged(self) -> None: ...
    def sender(self) -> QObject: ...
    def senderSignalIndex(self) -> int: ...
    def setImportMetadata(self, type: vrMaterialTypes.MaterialType, value: bool) -> None: ...
    def setMaterialSelection(self, materials: Sequence[vrdMaterial], scrollTo: bool = False) -> None: ...
    def setObjectName(self, name: str) -> None: ...
    def setParent(self, parent: QObject) -> None: ...
    def setPlanarManipulatorTransparency(self, transparency: float) -> None: ...
    def setProperty(self, name: str, value: Any) -> bool: ...
    def setSelection(self, ids: Sequence[vrMaterialEntryId], scrollTo: bool = False, edit: bool = False) -> None: ...
    def setSwitchChoiceByAllTags(self, switchMaterial: vrdSwitchMaterial, tags: Sequence[str]) -> bool: ...
    def setSwitchChoiceByAnyTag(self, switchMaterial: vrdSwitchMaterial, tags: Sequence[str]) -> bool: ...
    def setTireManipulatorTransparency(self, transparency: float) -> None: ...
    def signalsBlocked(self) -> bool: ...
    def startTimer(self, interval: int, timerType: Qt.TimerType = Qt.TimerType.CoarseTimer) -> int: ...
    def thread(self) -> QThread: ...
    def timerEvent(self, event: QTimerEvent) -> None: ...
    def tireManipulatorTransparencyChanged(self) -> None: ...
    def tr(self) -> None: ...
    def updatePreviews(self, materials: Sequence[vrdMaterial]) -> None: ...

class vrMaterialTypes:
    __doc__: NoneType
    __module__: str
    Invalid: MaterialType
    Phong: MaterialType
    Plastic: MaterialType
    ReflectivePlastic: MaterialType
    Chrome: MaterialType
    LineChrome: MaterialType
    BrushedMetal: MaterialType
    UnicolorCarpaint: MaterialType
    MetallicCarpaint: MaterialType
    FlipflopCarpaint: MaterialType
    Glass: MaterialType
    XRay: MaterialType
    Carbon: MaterialType
    Carbon2D: MaterialType
    Tire: MaterialType
    Velvet: MaterialType
    WovenCloth: MaterialType
    Substance: MaterialType
    XRite: MaterialType
    OCS: MaterialType
    Shadow: MaterialType
    LightPortal: MaterialType
    MultiPass: MaterialType
    Layered: MaterialType
    Switch: MaterialType
    SphereEnvironment: MaterialType
    Skylight: MaterialType
    EnvironmentSwitch: MaterialType
    SubstancePanorama: MaterialType
    MDL: MaterialType
    MaterialX: MaterialType
    VolumeScatter: MaterialType
    OpenVDBVolume: MaterialType
    Chunk: MaterialType
    LastMaterialType: MaterialType
    Default: MergeOptions
    IgnoreName: MergeOptions
    IncludeSwitchMaterials: MergeOptions
    ExcludeXRiteMaterials: MergeOptions
    DefaultBefore2023: MergeOptions
    def MaterialType(self) -> None: ...
    def MergeOptions(self) -> None: ...
    def __delattr__(self) -> None: ...
    def __dir__(self, /): ...
    def __eq__(self) -> None: ...
    def __format__(self, format_spec, /): ...
    def __ge__(self) -> None: ...
    def __getattribute__(self) -> None: ...
    def __getstate__(self, /): ...
    def __gt__(self) -> None: ...
    def __hash__(self) -> None: ...
    def __init__(self) -> None: ...
    def __init_subclass__(cls) -> None: ...
    def __le__(self) -> None: ...
    def __lt__(self) -> None: ...
    def __ne__(self) -> None: ...
    def __new__(cls) -> None: ...
    def __reduce__(self, /): ...
    def __reduce_ex__(self, protocol, /): ...
    def __repr__(self) -> None: ...
    def __setattr__(self) -> None: ...
    def __sizeof__(self, /): ...
    def __str__(self) -> None: ...
    def __subclasshook__(self) -> None: ...

class vrMathService:
    __doc__: NoneType
    __module__: str
    staticMetaObject: QMetaObject
    def __delattr__(self) -> None: ...
    def __dir__(self, /): ...
    def __eq__(self) -> None: ...
    def __format__(self, format_spec, /): ...
    def __ge__(self) -> None: ...
    def __getattribute__(self) -> None: ...
    def __getstate__(self, /): ...
    def __gt__(self) -> None: ...
    def __hash__(self) -> None: ...
    def __init__(self) -> None: ...
    def __init_subclass__(cls) -> None: ...
    def __le__(self) -> None: ...
    def __lt__(self) -> None: ...
    def __ne__(self) -> None: ...
    def __new__(cls) -> None: ...
    def __reduce__(self, /): ...
    def __reduce_ex__(self, protocol, /): ...
    def __repr__(self) -> None: ...
    def __setattr__(self) -> None: ...
    def __sizeof__(self, /): ...
    def __str__(self) -> None: ...
    def __subclasshook__(self) -> None: ...
    def blockSignals(self, b: bool) -> bool: ...
    def childEvent(self, event: QChildEvent) -> None: ...
    def children(self) -> List[QObject]: ...
    def connect(self) -> None: ...
    def connectNotify(self, signal: QMetaMethod) -> None: ...
    def customEvent(self, event: QEvent) -> None: ...
    def deleteLater(self) -> None: ...
    def destroyed(self) -> None: ...
    def disconnect(self) -> None: ...
    def disconnectNotify(self, signal: QMetaMethod) -> None: ...
    def dumpObjectInfo(self) -> None: ...
    def dumpObjectTree(self) -> None: ...
    def dynamicPropertyNames(self) -> List[QByteArray]: ...
    def emit(self, arg__1: bytes, *args: None) -> bool: ...
    def event(self, event: QEvent) -> bool: ...
    def eventFilter(self, watched: QObject, event: QEvent) -> bool: ...
    def findChild(self, type: type, name: str = {}, options: Qt.FindChildOptions = Qt.FindChildOption.FindChildrenRecursively) -> object: ...
    def getRotation(self, matrix: Union[QMatrix4x4, QTransform]) -> QQuaternion: ...
    def getScaleFactor(self, matrix: Union[QMatrix4x4, QTransform]) -> QVector3D: ...
    def getScaleOrientation(self, matrix: Union[QMatrix4x4, QTransform]) -> QQuaternion: ...
    def getTranslation(self, matrix: Union[QMatrix4x4, QTransform]) -> QVector3D: ...
    def inherits(self, classname: bytes) -> bool: ...
    def init(self) -> None: ...
    def installEventFilter(self, filterObj: QObject) -> None: ...
    def isSignalConnected(self, signal: QMetaMethod) -> bool: ...
    def isWidgetType(self) -> bool: ...
    def isWindowType(self) -> bool: ...
    def killTimer(self, id: int) -> None: ...
    def metaObject(self) -> QMetaObject: ...
    def moveToThread(self, thread: QThread) -> None: ...
    def objectName(self) -> str: ...
    def objectNameChanged(self) -> None: ...
    def parent(self) -> QObject: ...
    def property(self, name: str) -> Any: ...
    def receivers(self, signal: bytes) -> int: ...
    def removeEventFilter(self, obj: QObject) -> None: ...
    def sender(self) -> QObject: ...
    def senderSignalIndex(self) -> int: ...
    def setObjectName(self, name: str) -> None: ...
    def setParent(self, parent: QObject) -> None: ...
    def setProperty(self, name: str, value: Any) -> bool: ...
    def signalsBlocked(self) -> bool: ...
    def startTimer(self, interval: int, timerType: Qt.TimerType = Qt.TimerType.CoarseTimer) -> int: ...
    def thread(self) -> QThread: ...
    def timerEvent(self, event: QTimerEvent) -> None: ...
    def tr(self) -> None: ...

class vrMetadataService:
    __doc__: NoneType
    __module__: str
    staticMetaObject: QMetaObject
    def __delattr__(self) -> None: ...
    def __dir__(self, /): ...
    def __eq__(self) -> None: ...
    def __format__(self, format_spec, /): ...
    def __ge__(self) -> None: ...
    def __getattribute__(self) -> None: ...
    def __getstate__(self, /): ...
    def __gt__(self) -> None: ...
    def __hash__(self) -> None: ...
    def __init__(self) -> None: ...
    def __init_subclass__(cls) -> None: ...
    def __le__(self) -> None: ...
    def __lt__(self) -> None: ...
    def __ne__(self) -> None: ...
    def __new__(cls) -> None: ...
    def __reduce__(self, /): ...
    def __reduce_ex__(self, protocol, /): ...
    def __repr__(self) -> None: ...
    def __setattr__(self) -> None: ...
    def __sizeof__(self, /): ...
    def __str__(self) -> None: ...
    def __subclasshook__(self) -> None: ...
    def activeStringLibraryIndexChanged(self) -> None: ...
    def addTags(self, objects: Sequence[vrdSceneObject], tags: Sequence[str]) -> None: ...
    def assignSets(self, metadataSets: Sequence[vrdMetadataSet], objects: Sequence[vrdSceneObject]) -> None: ...
    def blockSignals(self, b: bool) -> bool: ...
    def childEvent(self, event: QChildEvent) -> None: ...
    def children(self) -> List[QObject]: ...
    def connect(self) -> None: ...
    def connectNotify(self, signal: QMetaMethod) -> None: ...
    def copyEntries(self, entries: Sequence[vrdMetadataEntry]) -> None: ...
    def copySets(self, metadataSets: Sequence[vrdMetadataSet]) -> None: ...
    def createSet(self, name: str, objects: Sequence[vrdSceneObject] = Default(QList<vrdSceneObject>)) -> vrdMetadataSet: ...
    def customEvent(self, event: QEvent) -> None: ...
    def deleteLater(self) -> None: ...
    def deleteSets(self, metadataSets: Sequence[vrdMetadataSet]) -> None: ...
    def destroyed(self) -> None: ...
    def disconnect(self) -> None: ...
    def disconnectNotify(self, signal: QMetaMethod) -> None: ...
    def dumpObjectInfo(self) -> None: ...
    def dumpObjectTree(self) -> None: ...
    def duplicateSets(self, metadataSets: Sequence[vrdMetadataSet]) -> List[vrdMetadataSet]: ...
    def dynamicPropertyNames(self) -> List[QByteArray]: ...
    def emit(self, arg__1: bytes, *args: None) -> bool: ...
    def event(self, event: QEvent) -> bool: ...
    def eventFilter(self, watched: QObject, event: QEvent) -> bool: ...
    def findChild(self, type: type, name: str = {}, options: Qt.FindChildOptions = Qt.FindChildOption.FindChildrenRecursively) -> object: ...
    def findSets(self, name: str) -> List[vrdMetadataSet]: ...
    def getActiveStringLibraryIndex(self) -> int: ...
    def getAllKeys(self) -> List[str]: ...
    def getAllSets(self) -> List[vrdMetadataSet]: ...
    def getAllShareableSets(self) -> List[vrdMetadataSet]: ...
    def getAllTags(self) -> List[str]: ...
    def getEntriesClipboard(self) -> List[vrdMetadataEntry]: ...
    def getMetadata(self, object: vrdObject) -> vrdMetadata: ...
    def getObjectsWithMetadata(self, type: vrMetadataTypes.ObjectType = vrMetadataTypes.ObjectType.All) -> List[vrdSceneObject]: ...
    def getObjectsWithTag(self, tag: str) -> List[vrdSceneObject]: ...
    def getSelection(self) -> List[vrdObject]: ...
    def getSetsClipboard(self) -> List[vrdMetadataSet]: ...
    def getStringLibraries(self) -> List[str]: ...
    def getTags(self, objects: Sequence[vrdSceneObject]) -> List[str]: ...
    def getUniqueSetName(self, name: str) -> str: ...
    def hasMetadata(self, object: vrdSceneObject) -> bool: ...
    def hasTag(self, object: vrdSceneObject, tag: str) -> bool: ...
    def inherits(self, classname: bytes) -> bool: ...
    def init(self) -> None: ...
    def installEventFilter(self, filterObj: QObject) -> None: ...
    def isEntriesClipboardEmpty(self) -> bool: ...
    def isSetsClipboardEmpty(self) -> bool: ...
    def isSignalConnected(self, signal: QMetaMethod) -> bool: ...
    def isWidgetType(self) -> bool: ...
    def isWindowType(self) -> bool: ...
    def killTimer(self, id: int) -> None: ...
    def loadSets(self, filePath: str, objects: Sequence[vrdSceneObject] = {}) -> List[vrdMetadataSet]: ...
    def metaObject(self) -> QMetaObject: ...
    def metadataChanged(self) -> None: ...
    def moveToThread(self, thread: QThread) -> None: ...
    def objectName(self) -> str: ...
    def objectNameChanged(self) -> None: ...
    def parent(self) -> QObject: ...
    def pasteEntries(self, metadataSets: Sequence[vrdMetadataSet]) -> None: ...
    def pasteSets(self, objects: Sequence[vrdSceneObject]) -> None: ...
    def property(self, name: str) -> Any: ...
    def receivers(self, signal: bytes) -> int: ...
    def removeEventFilter(self, obj: QObject) -> None: ...
    def removeSets(self, metadataSets: Sequence[vrdMetadataSet], objects: Sequence[vrdSceneObject]) -> None: ...
    def removeTags(self, objects: Sequence[vrdSceneObject], tags: Sequence[str]) -> None: ...
    def saveSets(self, metadataSets: Sequence[vrdMetadataSet], filePath: str) -> bool: ...
    def selectionChanged(self) -> None: ...
    def sender(self) -> QObject: ...
    def senderSignalIndex(self) -> int: ...
    def setActiveStringLibraryIndex(self, index: int) -> None: ...
    def setObjectName(self, name: str) -> None: ...
    def setParent(self, parent: QObject) -> None: ...
    def setProperty(self, name: str, value: Any) -> bool: ...
    def setSelection(self, objects: Sequence[vrdObject]) -> None: ...
    def setStringLibraries(self, libraries: Sequence[str]) -> None: ...
    def signalsBlocked(self) -> bool: ...
    def startTimer(self, interval: int, timerType: Qt.TimerType = Qt.TimerType.CoarseTimer) -> int: ...
    def stringLibrariesChanged(self) -> None: ...
    def thread(self) -> QThread: ...
    def timerEvent(self, event: QTimerEvent) -> None: ...
    def tr(self) -> None: ...

class vrMetadataTypes:
    __doc__: NoneType
    __module__: str
    SetsChanged: ChangeFlag
    TagsChanged: ChangeFlag
    AssignmentsChanged: ChangeFlag
    AllChanged: ChangeFlag
    def ChangeFlag(self) -> None: ...
    def MatrixOrder(self) -> None: ...
    def ObjectType(self) -> None: ...
    def ValueType(self) -> None: ...
    def __delattr__(self) -> None: ...
    def __dir__(self, /): ...
    def __eq__(self) -> None: ...
    def __format__(self, format_spec, /): ...
    def __ge__(self) -> None: ...
    def __getattribute__(self) -> None: ...
    def __getstate__(self, /): ...
    def __gt__(self) -> None: ...
    def __hash__(self) -> None: ...
    def __init__(self) -> None: ...
    def __init_subclass__(cls) -> None: ...
    def __le__(self) -> None: ...
    def __lt__(self) -> None: ...
    def __ne__(self) -> None: ...
    def __new__(cls) -> None: ...
    def __reduce__(self, /): ...
    def __reduce_ex__(self, protocol, /): ...
    def __repr__(self) -> None: ...
    def __setattr__(self) -> None: ...
    def __sizeof__(self, /): ...
    def __str__(self) -> None: ...
    def __subclasshook__(self) -> None: ...

class vrNodeService:
    __doc__: NoneType
    __module__: str
    Continue: TraverseChoice
    Skip: TraverseChoice
    Quit: TraverseChoice
    staticMetaObject: QMetaObject
    def TraverseChoice(self) -> None: ...
    def __delattr__(self) -> None: ...
    def __dir__(self, /): ...
    def __eq__(self) -> None: ...
    def __format__(self, format_spec, /): ...
    def __ge__(self) -> None: ...
    def __getattribute__(self) -> None: ...
    def __getstate__(self, /): ...
    def __gt__(self) -> None: ...
    def __hash__(self) -> None: ...
    def __init__(self) -> None: ...
    def __init_subclass__(cls) -> None: ...
    def __le__(self) -> None: ...
    def __lt__(self) -> None: ...
    def __ne__(self) -> None: ...
    def __new__(cls) -> None: ...
    def __reduce__(self, /): ...
    def __reduce_ex__(self, protocol, /): ...
    def __repr__(self) -> None: ...
    def __setattr__(self) -> None: ...
    def __sizeof__(self, /): ...
    def __str__(self) -> None: ...
    def __subclasshook__(self) -> None: ...
    def blockSignals(self, b: bool) -> bool: ...
    def cameraNameChanged(self) -> None: ...
    def cameraTrackNameChanged(self) -> None: ...
    def childEvent(self, event: QChildEvent) -> None: ...
    def children(self) -> List[QObject]: ...
    def clearFindCache(self) -> None: ...
    def cloneNodes(self, nodes: Sequence[vrdNode]) -> List[vrdNode]: ...
    def connect(self) -> None: ...
    def connectNotify(self, signal: QMetaMethod) -> None: ...
    def customEvent(self, event: QEvent) -> None: ...
    def deleteLater(self) -> None: ...
    def destroyed(self) -> None: ...
    def disconnect(self) -> None: ...
    def disconnectNotify(self, signal: QMetaMethod) -> None: ...
    def dumpObjectInfo(self) -> None: ...
    def dumpObjectTree(self) -> None: ...
    def dynamicPropertyNames(self) -> List[QByteArray]: ...
    def emit(self, arg__1: bytes, *args: None) -> bool: ...
    def event(self, event: QEvent) -> bool: ...
    def eventFilter(self, watched: QObject, event: QEvent) -> bool: ...
    def findChild(self, type: type, name: str = {}, options: Qt.FindChildOptions = Qt.FindChildOption.FindChildrenRecursively) -> object: ...
    def findNode(self, name: str, wildcard: bool = False, includeComponents: bool = False, root: vrdNode = Default(vrdNode), caseSensitive: bool = True) -> vrdNode: ...
    def findNodeWithPath(self, path: str, wildcard: bool = False, root: vrdNode = Default(vrdNode)) -> vrdNode: ...
    def findNodeWithUniquePath(self, uniquePath: str) -> vrdNode: ...
    def findNodesWithPath(self, path: str, wildcard: bool = False, root: vrdNode = Default(vrdNode)) -> List[vrdNode]: ...
    def getAllNodes(self, root: vrdNode, options: vrdFindOptions = Default(vrdFindOptions)) -> List[vrdNode]: ...
    def getCloneRoot(self, node: vrdNode) -> vrdNode: ...
    def getClones(self, node: vrdNode) -> List[vrdNode]: ...
    def getCommonParent(self, nodes: Sequence[vrdNode]) -> vrdNode: ...
    def getMaxDepth(self, node: vrdNode) -> int: ...
    def getNodeFromId(self, nodeId: int) -> vrdNode: ...
    def getNodesFromIds(self, nodeIds: Sequence[int]) -> List[vrdNode]: ...
    def getParentNames(self, node: vrdNode, root: vrdNode = Default(vrdNode)) -> List[str]: ...
    def getRootNode(self) -> vrdNode: ...
    def getSelectedNodes(self) -> List[vrdNode]: ...
    def getSelectedRootNodes(self) -> List[vrdNode]: ...
    def getUniqueName(self, name: str, root: vrdNode, recursive: bool = True) -> str: ...
    def inherits(self, classname: bytes) -> bool: ...
    def init(self) -> None: ...
    def initFindCache(self) -> None: ...
    def installEventFilter(self, filterObj: QObject) -> None: ...
    def isInSubtree(self, root: vrdNode, node: vrdNode) -> bool: ...
    def isSignalConnected(self, signal: QMetaMethod) -> bool: ...
    def isWidgetType(self) -> bool: ...
    def isWindowType(self) -> bool: ...
    def killTimer(self, id: int) -> None: ...
    def lightNameChanged(self) -> None: ...
    def metaObject(self) -> QMetaObject: ...
    def moveToThread(self, thread: QThread) -> None: ...
    def nameChanged(self) -> None: ...
    def nodesAdded(self) -> None: ...
    def nodesMoved(self) -> None: ...
    def nodesMovedInternal(self) -> None: ...
    def nodesRemoved(self) -> None: ...
    def objectName(self) -> str: ...
    def objectNameChanged(self) -> None: ...
    def parent(self) -> QObject: ...
    def property(self, name: str) -> Any: ...
    def receivers(self, signal: bytes) -> int: ...
    def removeEventFilter(self, obj: QObject) -> None: ...
    def removeNodes(self, nodes: Sequence[vrdNode]) -> None: ...
    def selectionChanged(self) -> None: ...
    def sender(self) -> QObject: ...
    def senderSignalIndex(self) -> int: ...
    def setObjectName(self, name: str) -> None: ...
    def setParent(self, parent: QObject) -> None: ...
    def setProperty(self, name: str, value: Any) -> bool: ...
    def signalsBlocked(self) -> bool: ...
    def startTimer(self, interval: int, timerType: Qt.TimerType = Qt.TimerType.CoarseTimer) -> int: ...
    def thread(self) -> QThread: ...
    def timerEvent(self, event: QTimerEvent) -> None: ...
    def tr(self) -> None: ...
    def traverse(self, func: object, root: vrdNode = 'vrdNode{}') -> None: ...
    def unshareNodes(self, nodes: Sequence[vrdNode], option: vrScenegraphTypes.UnshareOption = vrScenegraphTypes.UnshareOption.KeepLocalClones) -> None: ...

class vrObjectService:
    __doc__: NoneType
    __module__: str
    staticMetaObject: QMetaObject
    def __delattr__(self) -> None: ...
    def __dir__(self, /): ...
    def __eq__(self) -> None: ...
    def __format__(self, format_spec, /): ...
    def __ge__(self) -> None: ...
    def __getattribute__(self) -> None: ...
    def __getstate__(self, /): ...
    def __gt__(self) -> None: ...
    def __hash__(self) -> None: ...
    def __init__(self) -> None: ...
    def __init_subclass__(cls) -> None: ...
    def __le__(self) -> None: ...
    def __lt__(self) -> None: ...
    def __ne__(self) -> None: ...
    def __new__(cls) -> None: ...
    def __reduce__(self, /): ...
    def __reduce_ex__(self, protocol, /): ...
    def __repr__(self) -> None: ...
    def __setattr__(self) -> None: ...
    def __sizeof__(self, /): ...
    def __str__(self) -> None: ...
    def __subclasshook__(self) -> None: ...
    def addRef(self, obj: vrdObject) -> None: ...
    def blockSignals(self, b: bool) -> bool: ...
    def childEvent(self, event: QChildEvent) -> None: ...
    def children(self) -> List[QObject]: ...
    def connect(self) -> None: ...
    def connectNotify(self, signal: QMetaMethod) -> None: ...
    def customEvent(self, event: QEvent) -> None: ...
    def deleteLater(self) -> None: ...
    def destroyed(self) -> None: ...
    def disconnect(self) -> None: ...
    def disconnectNotify(self, signal: QMetaMethod) -> None: ...
    def dumpObjectInfo(self) -> None: ...
    def dumpObjectTree(self) -> None: ...
    def dynamicPropertyNames(self) -> List[QByteArray]: ...
    def emit(self, arg__1: bytes, *args: None) -> bool: ...
    def event(self, event: QEvent) -> bool: ...
    def eventFilter(self, watched: QObject, event: QEvent) -> bool: ...
    def findChild(self, type: type, name: str = {}, options: Qt.FindChildOptions = Qt.FindChildOption.FindChildrenRecursively) -> object: ...
    def getSceneObjectFromId(self, id: int) -> vrdSceneObject: ...
    def inherits(self, classname: bytes) -> bool: ...
    def init(self) -> None: ...
    def installEventFilter(self, filterObj: QObject) -> None: ...
    def isSignalConnected(self, signal: QMetaMethod) -> bool: ...
    def isWidgetType(self) -> bool: ...
    def isWindowType(self) -> bool: ...
    def killTimer(self, id: int) -> None: ...
    def metaObject(self) -> QMetaObject: ...
    def moveToThread(self, thread: QThread) -> None: ...
    def objectName(self) -> str: ...
    def objectNameChanged(self) -> None: ...
    def parent(self) -> QObject: ...
    def property(self, name: str) -> Any: ...
    def propertyChanged(self) -> None: ...
    def propertyChangedBS(self) -> None: ...
    def receivers(self, signal: bytes) -> int: ...
    def removeEventFilter(self, obj: QObject) -> None: ...
    def sender(self) -> QObject: ...
    def senderSignalIndex(self) -> int: ...
    def setObjectName(self, name: str) -> None: ...
    def setParent(self, parent: QObject) -> None: ...
    def setProperty(self, name: str, value: Any) -> bool: ...
    def signalsBlocked(self) -> bool: ...
    def startTimer(self, interval: int, timerType: Qt.TimerType = Qt.TimerType.CoarseTimer) -> int: ...
    def subRef(self, obj: vrdObject) -> None: ...
    def thread(self) -> QThread: ...
    def timerEvent(self, event: QTimerEvent) -> None: ...
    def tr(self) -> None: ...

class vrProgressService:
    __doc__: NoneType
    __module__: str
    staticMetaObject: QMetaObject
    def __delattr__(self) -> None: ...
    def __dir__(self, /): ...
    def __eq__(self) -> None: ...
    def __format__(self, format_spec, /): ...
    def __ge__(self) -> None: ...
    def __getattribute__(self) -> None: ...
    def __getstate__(self, /): ...
    def __gt__(self) -> None: ...
    def __hash__(self) -> None: ...
    def __init__(self) -> None: ...
    def __init_subclass__(cls) -> None: ...
    def __le__(self) -> None: ...
    def __lt__(self) -> None: ...
    def __ne__(self) -> None: ...
    def __new__(cls) -> None: ...
    def __reduce__(self, /): ...
    def __reduce_ex__(self, protocol, /): ...
    def __repr__(self) -> None: ...
    def __setattr__(self) -> None: ...
    def __sizeof__(self, /): ...
    def __str__(self) -> None: ...
    def __subclasshook__(self) -> None: ...
    def blockSignals(self, b: bool) -> bool: ...
    def cancelOperation(self) -> None: ...
    def childEvent(self, event: QChildEvent) -> None: ...
    def children(self) -> List[QObject]: ...
    def connect(self) -> None: ...
    def connectNotify(self, signal: QMetaMethod) -> None: ...
    def customEvent(self, event: QEvent) -> None: ...
    def deleteLater(self) -> None: ...
    def destroyed(self) -> None: ...
    def disconnect(self) -> None: ...
    def disconnectNotify(self, signal: QMetaMethod) -> None: ...
    def dumpObjectInfo(self) -> None: ...
    def dumpObjectTree(self) -> None: ...
    def dynamicPropertyNames(self) -> List[QByteArray]: ...
    def emit(self, arg__1: bytes, *args: None) -> bool: ...
    def event(self, event: QEvent) -> bool: ...
    def eventFilter(self, watched: QObject, event: QEvent) -> bool: ...
    def findChild(self, type: type, name: str = {}, options: Qt.FindChildOptions = Qt.FindChildOption.FindChildrenRecursively) -> object: ...
    def inherits(self, classname: bytes) -> bool: ...
    def init(self) -> None: ...
    def installEventFilter(self, filterObj: QObject) -> None: ...
    def isSignalConnected(self, signal: QMetaMethod) -> bool: ...
    def isWidgetType(self) -> bool: ...
    def isWindowType(self) -> bool: ...
    def killTimer(self, id: int) -> None: ...
    def metaObject(self) -> QMetaObject: ...
    def moveToThread(self, thread: QThread) -> None: ...
    def objectName(self) -> str: ...
    def objectNameChanged(self) -> None: ...
    def operationFinished(self) -> None: ...
    def operationStarted(self) -> None: ...
    def parent(self) -> QObject: ...
    def progressChanged(self) -> None: ...
    def property(self, name: str) -> Any: ...
    def receivers(self, signal: bytes) -> int: ...
    def removeEventFilter(self, obj: QObject) -> None: ...
    def sender(self) -> QObject: ...
    def senderSignalIndex(self) -> int: ...
    def setObjectName(self, name: str) -> None: ...
    def setParent(self, parent: QObject) -> None: ...
    def setProperty(self, name: str, value: Any) -> bool: ...
    def signalsBlocked(self) -> bool: ...
    def startTimer(self, interval: int, timerType: Qt.TimerType = Qt.TimerType.CoarseTimer) -> int: ...
    def stateChanged(self) -> None: ...
    def thread(self) -> QThread: ...
    def timerEvent(self, event: QTimerEvent) -> None: ...
    def tr(self) -> None: ...

class vrQueryService:
    __doc__: NoneType
    __module__: str
    staticMetaObject: QMetaObject
    def __delattr__(self) -> None: ...
    def __dir__(self, /): ...
    def __eq__(self) -> None: ...
    def __format__(self, format_spec, /): ...
    def __ge__(self) -> None: ...
    def __getattribute__(self) -> None: ...
    def __getstate__(self, /): ...
    def __gt__(self) -> None: ...
    def __hash__(self) -> None: ...
    def __init__(self) -> None: ...
    def __init_subclass__(cls) -> None: ...
    def __le__(self) -> None: ...
    def __lt__(self) -> None: ...
    def __ne__(self) -> None: ...
    def __new__(cls) -> None: ...
    def __reduce__(self, /): ...
    def __reduce_ex__(self, protocol, /): ...
    def __repr__(self) -> None: ...
    def __setattr__(self) -> None: ...
    def __sizeof__(self, /): ...
    def __str__(self) -> None: ...
    def __subclasshook__(self) -> None: ...
    def asyncCameraQuery(self, expression: str) -> None: ...
    def asyncCameraQueryFinished(self) -> None: ...
    def asyncCameraQueryStarted(self) -> None: ...
    def asyncLightQuery(self, expression: str) -> None: ...
    def asyncLightQueryFinished(self) -> None: ...
    def asyncLightQueryStarted(self) -> None: ...
    def asyncMaterialQuery(self, expression: str) -> None: ...
    def asyncMaterialQueryFinished(self) -> None: ...
    def asyncMaterialQueryStarted(self) -> None: ...
    def asyncMetadataQuery(self, expression: str) -> None: ...
    def asyncMetadataQueryFinished(self) -> None: ...
    def asyncMetadataQueryStarted(self) -> None: ...
    def asyncSceneQuery(self, expression: str) -> None: ...
    def asyncSceneQueryFinished(self) -> None: ...
    def asyncSceneQueryStarted(self) -> None: ...
    def asyncSceneplateQuery(self, expression: str) -> None: ...
    def asyncSceneplateQueryFinished(self) -> None: ...
    def asyncSceneplateQueryStarted(self) -> None: ...
    def blockSignals(self, b: bool) -> bool: ...
    def cameraQuery(self, expression: str) -> List[vrdNode]: ...
    def cancelQuery(self) -> None: ...
    def childEvent(self, event: QChildEvent) -> None: ...
    def children(self) -> List[QObject]: ...
    def connect(self) -> None: ...
    def connectNotify(self, signal: QMetaMethod) -> None: ...
    def customEvent(self, event: QEvent) -> None: ...
    def deleteLater(self) -> None: ...
    def destroyed(self) -> None: ...
    def disconnect(self) -> None: ...
    def disconnectNotify(self, signal: QMetaMethod) -> None: ...
    def dumpObjectInfo(self) -> None: ...
    def dumpObjectTree(self) -> None: ...
    def dynamicPropertyNames(self) -> List[QByteArray]: ...
    def emit(self, arg__1: bytes, *args: None) -> bool: ...
    def event(self, event: QEvent) -> bool: ...
    def eventFilter(self, watched: QObject, event: QEvent) -> bool: ...
    def findChild(self, type: type, name: str = {}, options: Qt.FindChildOptions = Qt.FindChildOption.FindChildrenRecursively) -> object: ...
    def inherits(self, classname: bytes) -> bool: ...
    def init(self) -> None: ...
    def installEventFilter(self, filterObj: QObject) -> None: ...
    def isCanceling(self) -> bool: ...
    def isLiveSearchEnabled(self) -> bool: ...
    def isRunning(self) -> bool: ...
    def isSignalConnected(self, signal: QMetaMethod) -> bool: ...
    def isWidgetType(self) -> bool: ...
    def isWindowType(self) -> bool: ...
    def killTimer(self, id: int) -> None: ...
    def lightQuery(self, expression: str) -> List[vrdNode]: ...
    def materialQuery(self, expression: str) -> List[vrdNode]: ...
    def metaObject(self) -> QMetaObject: ...
    def metadataQuery(self, expression: str) -> List[vrdMetadataSet]: ...
    def moveToThread(self, thread: QThread) -> None: ...
    def objectName(self) -> str: ...
    def objectNameChanged(self) -> None: ...
    def parent(self) -> QObject: ...
    def property(self, name: str) -> Any: ...
    def receivers(self, signal: bytes) -> int: ...
    def removeEventFilter(self, obj: QObject) -> None: ...
    def sceneQuery(self, expression: str) -> List[vrdNode]: ...
    def sceneplateQuery(self, expression: str) -> List[vrdNode]: ...
    def sender(self) -> QObject: ...
    def senderSignalIndex(self) -> int: ...
    def setLiveSearchEnabled(self, value: bool) -> None: ...
    def setObjectName(self, name: str) -> None: ...
    def setParent(self, parent: QObject) -> None: ...
    def setProperty(self, name: str, value: Any) -> bool: ...
    def signalsBlocked(self) -> bool: ...
    def startTimer(self, interval: int, timerType: Qt.TimerType = Qt.TimerType.CoarseTimer) -> int: ...
    def thread(self) -> QThread: ...
    def timerEvent(self, event: QTimerEvent) -> None: ...
    def tr(self) -> None: ...

class vrReferenceService:
    __doc__: NoneType
    __module__: str
    staticMetaObject: QMetaObject
    def __delattr__(self) -> None: ...
    def __dir__(self, /): ...
    def __eq__(self) -> None: ...
    def __format__(self, format_spec, /): ...
    def __ge__(self) -> None: ...
    def __getattribute__(self) -> None: ...
    def __getstate__(self, /): ...
    def __gt__(self) -> None: ...
    def __hash__(self) -> None: ...
    def __init__(self) -> None: ...
    def __init_subclass__(cls) -> None: ...
    def __le__(self) -> None: ...
    def __lt__(self) -> None: ...
    def __ne__(self) -> None: ...
    def __new__(cls) -> None: ...
    def __reduce__(self, /): ...
    def __reduce_ex__(self, protocol, /): ...
    def __repr__(self) -> None: ...
    def __setattr__(self) -> None: ...
    def __sizeof__(self, /): ...
    def __str__(self) -> None: ...
    def __subclasshook__(self) -> None: ...
    def blockSignals(self, b: bool) -> bool: ...
    def childEvent(self, event: QChildEvent) -> None: ...
    def children(self) -> List[QObject]: ...
    def connect(self) -> None: ...
    def connectNotify(self, signal: QMetaMethod) -> None: ...
    def convertToSmart(self, node: vrdNode, useSourcePath: bool = False) -> vrdNode: ...
    def createSmart(self, parent: vrdNode = Default(vrdNode)) -> vrdReferenceNode: ...
    def createSource(self, path: str, parent: vrdNode = Default(vrdNode)) -> vrdReferenceNode: ...
    def customEvent(self, event: QEvent) -> None: ...
    def deleteLater(self) -> None: ...
    def destroyed(self) -> None: ...
    def disconnect(self) -> None: ...
    def disconnectNotify(self, signal: QMetaMethod) -> None: ...
    def dumpObjectInfo(self) -> None: ...
    def dumpObjectTree(self) -> None: ...
    def dynamicPropertyNames(self) -> List[QByteArray]: ...
    def emit(self, arg__1: bytes, *args: None) -> bool: ...
    def event(self, event: QEvent) -> bool: ...
    def eventFilter(self, watched: QObject, event: QEvent) -> bool: ...
    def findChild(self, type: type, name: str = {}, options: Qt.FindChildOptions = Qt.FindChildOption.FindChildrenRecursively) -> object: ...
    def getAllAvailableFileFormats(self) -> List[str]: ...
    def getChildReferences(self, node: vrdNode) -> List[vrdReferenceNode]: ...
    def getCustomExportPath(self) -> str: ...
    def getExportLocation(self) -> vrReferenceTypes.ExportLocation: ...
    def getLoadMode(self) -> vrReferenceTypes.LoadMode: ...
    def getNotificationMode(self) -> vrReferenceTypes.NotificationMode: ...
    def getParentReferences(self, node: vrdNode) -> List[vrdReferenceNode]: ...
    def getReferences(self, node: vrdNode) -> List[vrdReferenceNode]: ...
    def getRevisionMonitoringEnabled(self) -> bool: ...
    def getRevisionMonitoringExpressions(self) -> List[str]: ...
    def getSceneReferences(self) -> List[vrdReferenceNode]: ...
    def getShowConvertToSmartWarning(self) -> bool: ...
    def getUpdateMonitoringEnabled(self) -> bool: ...
    def getUpdateMonitoringInterval(self) -> int: ...
    def getUpdateMonitoringPaused(self) -> bool: ...
    def inherits(self, classname: bytes) -> bool: ...
    def init(self) -> None: ...
    def installEventFilter(self, filterObj: QObject) -> None: ...
    def isSignalConnected(self, signal: QMetaMethod) -> bool: ...
    def isWidgetType(self) -> bool: ...
    def isWindowType(self) -> bool: ...
    def killTimer(self, id: int) -> None: ...
    def loadSourceReferences(self, references: Sequence[vrdReferenceNode]) -> None: ...
    def metaObject(self) -> QMetaObject: ...
    def moveToThread(self, thread: QThread) -> None: ...
    def objectName(self) -> str: ...
    def objectNameChanged(self) -> None: ...
    def parent(self) -> QObject: ...
    def pauseUpdateMonitoring(self, state: bool) -> None: ...
    def property(self, name: str) -> Any: ...
    def receivers(self, signal: bytes) -> int: ...
    def referenceCreated(self) -> None: ...
    def referenceEditStateChagned(self) -> None: ...
    def referencesChanged(self) -> None: ...
    def reimportSmartReferences(self, references: Sequence[vrdReferenceNode]) -> None: ...
    def reimportSourceReferences(self, references: Sequence[vrdReferenceNode]) -> List[vrdReferenceNode]: ...
    def removeEventFilter(self, obj: QObject) -> None: ...
    def removeReference(self, node: vrdReferenceNode) -> vrdNode: ...
    def sceneHasReferences(self) -> None: ...
    def sceneSelectionChanged(self) -> None: ...
    def sender(self) -> QObject: ...
    def senderSignalIndex(self) -> int: ...
    def setCustomExportPath(self, path: str) -> None: ...
    def setExportLocation(self, value: vrReferenceTypes.ExportLocation) -> None: ...
    def setLoadMode(self, value: vrReferenceTypes.LoadMode) -> None: ...
    def setNotificationMode(self, value: vrReferenceTypes.NotificationMode) -> None: ...
    def setObjectName(self, name: str) -> None: ...
    def setParent(self, parent: QObject) -> None: ...
    def setProperty(self, name: str, value: Any) -> bool: ...
    def setRevisionMonitoringEnabled(self, value: bool) -> None: ...
    def setRevisionMonitoringExpressions(self, expressions: Sequence[str]) -> None: ...
    def setShowConvertToSmartWarning(self, value: bool) -> None: ...
    def setUpdateMonitoringEnabled(self, value: bool) -> None: ...
    def setUpdateMonitoringInterval(self, msecs: int) -> None: ...
    def signalsBlocked(self) -> bool: ...
    def sortRevisions(self, revisions: Sequence[str]) -> List[str]: ...
    def startTimer(self, interval: int, timerType: Qt.TimerType = Qt.TimerType.CoarseTimer) -> int: ...
    def thread(self) -> QThread: ...
    def timerEvent(self, event: QTimerEvent) -> None: ...
    def tr(self) -> None: ...
    def updateMonitoringChanged(self) -> None: ...

class vrReferenceTypes:
    __doc__: NoneType
    __module__: str
    Smart: Type
    Source: Type
    Off: NotificationMode
    Always: NotificationMode
    OnLoad: NotificationMode
    NextToSource: ExportLocation
    Custom: ExportLocation
    New: State
    Unloaded: State
    Loaded: State
    Current: FileState
    Outdated: FileState
    Missing: FileState
    Unsaved: FileState
    Unknown: FileState
    LoadedReferences: LoadMode
    AllReferences: LoadMode
    NoReferences: LoadMode
    LoadedSkipLeafReferences: LoadMode
    def ExportLocation(self) -> None: ...
    def FileState(self) -> None: ...
    def LoadMode(self) -> None: ...
    def NotificationMode(self) -> None: ...
    def State(self) -> None: ...
    def Type(self) -> None: ...
    def __delattr__(self) -> None: ...
    def __dir__(self, /): ...
    def __eq__(self) -> None: ...
    def __format__(self, format_spec, /): ...
    def __ge__(self) -> None: ...
    def __getattribute__(self) -> None: ...
    def __getstate__(self, /): ...
    def __gt__(self) -> None: ...
    def __hash__(self) -> None: ...
    def __init__(self) -> None: ...
    def __init_subclass__(cls) -> None: ...
    def __le__(self) -> None: ...
    def __lt__(self) -> None: ...
    def __ne__(self) -> None: ...
    def __new__(cls) -> None: ...
    def __reduce__(self, /): ...
    def __reduce_ex__(self, protocol, /): ...
    def __repr__(self) -> None: ...
    def __setattr__(self) -> None: ...
    def __sizeof__(self, /): ...
    def __str__(self) -> None: ...
    def __subclasshook__(self) -> None: ...

class vrRenderTypes:
    __doc__: NoneType
    __module__: str
    Native1x1: ShadingQuality
    Coarse2x2: ShadingQuality
    Coarse4x4: ShadingQuality
    Supersampling2x: ShadingQuality
    Supersampling4x: ShadingQuality
    Supersampling8x: ShadingQuality
    HighestPerformance: FoveatedQualityPreset
    Balanced: FoveatedQualityPreset
    HighestQuality: FoveatedQualityPreset
    Custom: FoveatedQualityPreset
    def FoveatedQualityPreset(self) -> None: ...
    def ShadingQuality(self) -> None: ...
    def __delattr__(self) -> None: ...
    def __dir__(self, /): ...
    def __eq__(self) -> None: ...
    def __format__(self, format_spec, /): ...
    def __ge__(self) -> None: ...
    def __getattribute__(self) -> None: ...
    def __getstate__(self, /): ...
    def __gt__(self) -> None: ...
    def __hash__(self) -> None: ...
    def __init__(self) -> None: ...
    def __init_subclass__(cls) -> None: ...
    def __le__(self) -> None: ...
    def __lt__(self) -> None: ...
    def __ne__(self) -> None: ...
    def __new__(cls) -> None: ...
    def __reduce__(self, /): ...
    def __reduce_ex__(self, protocol, /): ...
    def __repr__(self) -> None: ...
    def __setattr__(self) -> None: ...
    def __sizeof__(self, /): ...
    def __str__(self) -> None: ...
    def __subclasshook__(self) -> None: ...

class vrRoughnessTextureTypes:
    __doc__: NoneType
    __module__: str
    def ValueMapping(self) -> None: ...
    def __copy__(self) -> None: ...
    def __delattr__(self) -> None: ...
    def __dir__(self, /): ...
    def __eq__(self) -> None: ...
    def __format__(self, format_spec, /): ...
    def __ge__(self) -> None: ...
    def __getattribute__(self) -> None: ...
    def __getstate__(self, /): ...
    def __gt__(self) -> None: ...
    def __hash__(self) -> None: ...
    def __init__(self) -> None: ...
    def __init_subclass__(cls) -> None: ...
    def __le__(self) -> None: ...
    def __lt__(self) -> None: ...
    def __ne__(self) -> None: ...
    def __new__(cls) -> None: ...
    def __reduce__(self, /): ...
    def __reduce_ex__(self, protocol, /): ...
    def __repr__(self) -> None: ...
    def __setattr__(self) -> None: ...
    def __sizeof__(self, /): ...
    def __str__(self) -> None: ...
    def __subclasshook__(self) -> None: ...

class vrScenegraphService:
    __doc__: NoneType
    __module__: str
    staticMetaObject: QMetaObject
    def __delattr__(self) -> None: ...
    def __dir__(self, /): ...
    def __eq__(self) -> None: ...
    def __format__(self, format_spec, /): ...
    def __ge__(self) -> None: ...
    def __getattribute__(self) -> None: ...
    def __getstate__(self, /): ...
    def __gt__(self) -> None: ...
    def __hash__(self) -> None: ...
    def __init__(self) -> None: ...
    def __init_subclass__(cls) -> None: ...
    def __le__(self) -> None: ...
    def __lt__(self) -> None: ...
    def __ne__(self) -> None: ...
    def __new__(cls) -> None: ...
    def __reduce__(self, /): ...
    def __reduce_ex__(self, protocol, /): ...
    def __repr__(self) -> None: ...
    def __setattr__(self) -> None: ...
    def __sizeof__(self, /): ...
    def __str__(self) -> None: ...
    def __subclasshook__(self) -> None: ...
    def blockSignals(self, b: bool) -> bool: ...
    def checkAllowance(self, node: vrdNode, actions: Sequence[vrScenegraphTypes.Action]) -> List[bool]: ...
    def childEvent(self, event: QChildEvent) -> None: ...
    def children(self) -> List[QObject]: ...
    def clearSelection(self) -> None: ...
    def cloneNodes(self, nodes: Sequence[vrdNode]) -> List[vrdNode]: ...
    def cloneNodesMirrorAxis(self, nodes: Sequence[vrdNode], axis: vrScenegraphTypes.MirrorMode) -> List[vrdNode]: ...
    def connect(self) -> None: ...
    def connectNotify(self, signal: QMetaMethod) -> None: ...
    def convertNode(self, node: vrdNode, type: vrScenegraphTypes.NodeType) -> vrdNode: ...
    def convertToMesh(self, nodes: Sequence[vrdNode]) -> None: ...
    def copyAnimations(self, node: vrdNode) -> None: ...
    def copyNodes(self, nodes: Sequence[vrdNode]) -> None: ...
    def copyTransformVariants(self, node: vrdNode) -> None: ...
    def copyTransformations(self, nodes: Sequence[vrdNode]) -> None: ...
    def copyUVs(self, node: vrdNode) -> None: ...
    def createNode(self, type: vrScenegraphTypes.NodeType, parent: vrdNode = Default(vrdNode), name: str = '', forceUniqueName: bool = True) -> vrdNode: ...
    def createShellFromSurfaces(self, nodes: Sequence[vrdNode]) -> vrdNode: ...
    def createSwitchFromNodes(self, nodes: Sequence[vrdNode], parent: vrdNode, index: int) -> vrdNode: ...
    def customEvent(self, event: QEvent) -> None: ...
    def cutNodes(self, nodes: Sequence[vrdNode]) -> None: ...
    def deleteLater(self) -> None: ...
    def deleteNodes(self, nodes: Sequence[vrdNode], keepChildren: bool = False) -> None: ...
    def destroyed(self) -> None: ...
    def disconnect(self) -> None: ...
    def disconnectNotify(self, signal: QMetaMethod) -> None: ...
    def dumpObjectInfo(self) -> None: ...
    def dumpObjectTree(self) -> None: ...
    def duplicateNodes(self, nodes: Sequence[vrdNode], option: vrScenegraphTypes.DuplicateOption = vrScenegraphTypes.DuplicateOption.DuplicateKeepLocalClones) -> List[vrdNode]: ...
    def duplicateNodesMirrorAxis(self, nodes: Sequence[vrdNode], flushTransform: bool, axis: vrScenegraphTypes.MirrorMode) -> List[vrdNode]: ...
    def dynamicPropertyNames(self) -> List[QByteArray]: ...
    def editSelected(self) -> None: ...
    def emit(self, arg__1: bytes, *args: None) -> bool: ...
    def event(self, event: QEvent) -> bool: ...
    def eventFilter(self, watched: QObject, event: QEvent) -> bool: ...
    def findChild(self, type: type, name: str = {}, options: Qt.FindChildOptions = Qt.FindChildOption.FindChildrenRecursively) -> object: ...
    def getAllNodes(self, root: vrdNode = Default(vrdNode), options: vrdFindOptions = Default(vrdFindOptions)) -> List[vrdNode]: ...
    def getEnvironmentGeometrySwitch(self) -> vrdSwitchNode: ...
    def getInternalRootNode(self) -> vrdNode: ...
    def getLastHiddenNodes(self) -> List[vrdNode]: ...
    def getLiveSearchEnabled(self) -> bool: ...
    def getMirroredNodes(self, node: vrdNode = Default(vrdNode)) -> List[vrdNode]: ...
    def getNodeInfo(self, nodes: Sequence[vrdNode]) -> vrdNodeInfo: ...
    def getNodesInClipboard(self) -> List[vrdNode]: ...
    def getNodesWithAllTags(self, tags: Sequence[str], root: vrdNode = Default(vrdNode)) -> List[vrdNode]: ...
    def getNodesWithAnyTag(self, tags: Sequence[str], root: vrdNode = Default(vrdNode)) -> List[vrdNode]: ...
    def getRootNode(self) -> vrdNode: ...
    def getSelectedNode(self) -> vrdNode: ...
    def getSelectedNodes(self) -> List[vrdNode]: ...
    def getSelectedRootNodes(self, sorted: bool = True) -> List[vrdNode]: ...
    def getSelectedSubtreeNodes(self) -> List[vrdNode]: ...
    def getShowComponents(self) -> bool: ...
    def getSuperRootNode(self) -> vrdNode: ...
    def getSyncShowHide(self) -> bool: ...
    def getTransformRootNode(self) -> vrdNode: ...
    def getTransformableCloneRootEnabled(self) -> bool: ...
    def getTreeInfo(self) -> List[int]: ...
    def getTreeItemInfo(self, node: vrdNode) -> vrdSceneItemInfo: ...
    def getTreeItemInfoFlags(self, node: vrdNode) -> vrdSceneItemInfo.Flags: ...
    def groupByMaterial(self) -> None: ...
    def groupNodes(self, nodes: Sequence[vrdNode]) -> vrdNode: ...
    def growComponentSelection(self, componentNodes: Sequence[vrdNode]) -> None: ...
    def hasLastHiddenNodes(self) -> bool: ...
    def inherits(self, classname: bytes) -> bool: ...
    def init(self) -> None: ...
    def installEventFilter(self, filterObj: QObject) -> None: ...
    def invertGeometrySelection(self) -> None: ...
    def invertGeometrySelectionInGroup(self, geometryNodes: Sequence[vrdNode]) -> None: ...
    def isAllowed(self, node: vrdNode, action: vrScenegraphTypes.Action) -> bool: ...
    def isIsolateViewActive(self, renderWindowIndex: int = -1) -> bool: ...
    def isSceneEmpty(self) -> bool: ...
    def isSignalConnected(self, signal: QMetaMethod) -> bool: ...
    def isWidgetType(self) -> bool: ...
    def isWindowType(self) -> bool: ...
    def isolateViewChanged(self) -> None: ...
    def killTimer(self, id: int) -> None: ...
    def loadAnimationsToNodes(self, fileName: str, nodes: Sequence[vrdNode]) -> None: ...
    def metaObject(self) -> QMetaObject: ...
    def moveToThread(self, thread: QThread) -> None: ...
    def nodeIdChanged(self) -> None: ...
    def objectName(self) -> str: ...
    def objectNameChanged(self) -> None: ...
    def parent(self) -> QObject: ...
    def pasteAnimations(self, nodes: Sequence[vrdNode], pasteAsClone: bool = False) -> None: ...
    def pasteNodes(self, targetNodes: Sequence[vrdNode], keepWorldTransformation: bool = False, pasteAsClone: bool = False) -> None: ...
    def pasteTransformVariants(self, nodes: Sequence[vrdNode]) -> None: ...
    def pasteTransformation(self, targetNodes: Sequence[vrdNode], translation: bool = True, rotation: bool = True, scale: bool = True, rotationPivot: bool = True, scalePivot: bool = True) -> None: ...
    def pasteTransformationAsVariant(self, targetNodes: Sequence[vrdNode]) -> None: ...
    def pasteUVs(self, nodes: Sequence[vrdNode]) -> None: ...
    def property(self, name: str) -> Any: ...
    def receivers(self, signal: bytes) -> int: ...
    def removeEventFilter(self, obj: QObject) -> None: ...
    def resetIsolateView(self, renderWindowIndex: int = -1) -> None: ...
    def scenegraphChanged(self) -> None: ...
    def scrollToNode(self) -> None: ...
    def scrollToSelected(self) -> None: ...
    def selectAllClones(self, nodes: Sequence[vrdNode]) -> None: ...
    def selectAllInSameHierarchyLevel(self, node: vrdNode) -> None: ...
    def selectAllTransformableClones(self, nodes: Sequence[vrdNode]) -> None: ...
    def selectAllWithMaterials(self, materials: Sequence[vrdMaterial]) -> None: ...
    def selectCommonParent(self, nodes: Sequence[vrdNode]) -> None: ...
    def selectTopLevel(self) -> None: ...
    def selectionChanged(self) -> None: ...
    def sender(self) -> QObject: ...
    def senderSignalIndex(self) -> int: ...
    def setIsolateView(self, nodes: Sequence[vrdNode], renderWindowIndex: int = -1) -> None: ...
    def setLiveSearchEnabled(self, value: bool) -> None: ...
    def setNodeVisibility(self, nodes: Sequence[vrdNode], visible: bool, recursive: bool = False) -> None: ...
    def setObjectName(self, name: str) -> None: ...
    def setParent(self, parent: QObject) -> None: ...
    def setProperty(self, name: str, value: Any) -> bool: ...
    def setSelection(self, nodes: Sequence[vrdNode]) -> None: ...
    def setShowComponents(self, value: bool) -> None: ...
    def setSwitchChoiceByAllTags(self, switchNode: vrdSwitchNode, tags: Sequence[str]) -> bool: ...
    def setSwitchChoiceByAnyTag(self, switchNode: vrdSwitchNode, tags: Sequence[str]) -> bool: ...
    def setSyncShowHide(self, value: bool) -> None: ...
    def setTransformableCloneRootEnabled(self, value: bool) -> None: ...
    def shrinkComponentSelection(self, componentNodes: Sequence[vrdNode]) -> None: ...
    def signalsBlocked(self) -> bool: ...
    def startTimer(self, interval: int, timerType: Qt.TimerType = Qt.TimerType.CoarseTimer) -> int: ...
    def thread(self) -> QThread: ...
    def timerEvent(self, event: QTimerEvent) -> None: ...
    def tr(self) -> None: ...

class vrScenegraphTypes:
    __doc__: NoneType
    __module__: str
    UnshareAll: UnshareOption
    KeepLocalClones: UnshareOption
    KeepGlobalClones: UnshareOption
    DuplicateAll: DuplicateOption
    DuplicateKeepLocalClones: DuplicateOption
    DuplicateKeepClones: DuplicateOption
    Rename: Action
    Convert: Action
    ShowHide: Action
    SetSide: Action
    AddSubChild: Action
    MoveTo: Action
    ApplyMaterial: Action
    Delete: Action
    RemoveSelected: Action
    Cut: Action
    Paste: Action
    Clone: Action
    Unshare: Action
    ReloadFile: Action
    ReplaceFile: Action
    Tessellate: Action
    ShellFromSelection: Action
    EditGeometry: Action
    Edit: Action
    ChangeTransformation: Action
    ChangeSwitchChoice: Action
    ChangeAnimation: Action
    EditLightProperties: Action
    SwitchLightOnOff: Action
    ChangeGeometryNormals: Action
    ChangeGeometryAO: Action
    ChangeGeometryTextureCoords: Action
    CameraNavigation: Action
    EditCameraProperties: Action
    ModifyAsset: Action
    GraphChanged: ChangeFlag
    NodeChanged: ChangeFlag
    MetadataChanged: ChangeFlag
    AllChanged: ChangeFlag
    BillboardNode: NodeType
    ClipPlaneNode: NodeType
    DistanceLODNode: NodeType
    TransformNode: NodeType
    HostSwitchNode: NodeType
    MaterialNode: NodeType
    MatrixTransformNode: NodeType
    ShellNode: NodeType
    SurfaceNode: NodeType
    SoundNode: NodeType
    SoundObstructorNode: NodeType
    StereoSwitchNode: NodeType
    SwitchNode: NodeType
    MirrorNone: MirrorMode
    MirrorX: MirrorMode
    MirrorY: MirrorMode
    MirrorZ: MirrorMode
    MirrorXY: MirrorMode
    MirrorXZ: MirrorMode
    MirrorYZ: MirrorMode
    MirrorXYZ: MirrorMode
    def Action(self) -> None: ...
    def ChangeFlag(self) -> None: ...
    def DuplicateOption(self) -> None: ...
    def MirrorMode(self) -> None: ...
    def UnshareOption(self) -> None: ...
    def __delattr__(self) -> None: ...
    def __dir__(self, /): ...
    def __eq__(self) -> None: ...
    def __format__(self, format_spec, /): ...
    def __ge__(self) -> None: ...
    def __getattribute__(self) -> None: ...
    def __getstate__(self, /): ...
    def __gt__(self) -> None: ...
    def __hash__(self) -> None: ...
    def __init__(self) -> None: ...
    def __init_subclass__(cls) -> None: ...
    def __le__(self) -> None: ...
    def __lt__(self) -> None: ...
    def __ne__(self) -> None: ...
    def __new__(cls) -> None: ...
    def __reduce__(self, /): ...
    def __reduce_ex__(self, protocol, /): ...
    def __repr__(self) -> None: ...
    def __setattr__(self) -> None: ...
    def __sizeof__(self, /): ...
    def __str__(self) -> None: ...
    def __subclasshook__(self) -> None: ...

    class NodeType:
        BillboardNode: vrScenegraphTypes.NodeType
        ClipPlaneNode: vrScenegraphTypes.NodeType
        DistanceLODNode: vrScenegraphTypes.NodeType
        TransformNode: vrScenegraphTypes.NodeType
        HostSwitchNode: vrScenegraphTypes.NodeType
        MaterialNode: vrScenegraphTypes.NodeType
        MatrixTransformNode: vrScenegraphTypes.NodeType
        ShellNode: vrScenegraphTypes.NodeType
        SurfaceNode: vrScenegraphTypes.NodeType
        SoundNode: vrScenegraphTypes.NodeType
        SoundObstructorNode: vrScenegraphTypes.NodeType
        StereoSwitchNode: vrScenegraphTypes.NodeType
        SwitchNode: vrScenegraphTypes.NodeType

class vrSceneplateService:
    __doc__: NoneType
    __module__: str
    staticMetaObject: QMetaObject
    def __delattr__(self) -> None: ...
    def __dir__(self, /): ...
    def __eq__(self) -> None: ...
    def __format__(self, format_spec, /): ...
    def __ge__(self) -> None: ...
    def __getattribute__(self) -> None: ...
    def __getstate__(self, /): ...
    def __gt__(self) -> None: ...
    def __hash__(self) -> None: ...
    def __init__(self) -> None: ...
    def __init_subclass__(cls) -> None: ...
    def __le__(self) -> None: ...
    def __lt__(self) -> None: ...
    def __ne__(self) -> None: ...
    def __new__(cls) -> None: ...
    def __reduce__(self, /): ...
    def __reduce_ex__(self, protocol, /): ...
    def __repr__(self) -> None: ...
    def __setattr__(self) -> None: ...
    def __sizeof__(self, /): ...
    def __str__(self) -> None: ...
    def __subclasshook__(self) -> None: ...
    def blockSignals(self, b: bool) -> bool: ...
    def childEvent(self, event: QChildEvent) -> None: ...
    def children(self) -> List[QObject]: ...
    def clearSelection(self) -> None: ...
    def connect(self) -> None: ...
    def connectNotify(self, signal: QMetaMethod) -> None: ...
    def copyNodes(self, nodes: Sequence[vrdNode]) -> None: ...
    def createGroupForNodes(self, nodes: Sequence[vrdNode]) -> vrdNode: ...
    def createNode(self, parent: vrdNode, type: vrSceneplateTypes.NodeType, name: str) -> vrdNode: ...
    def createSwitchForNodes(self, nodes: Sequence[vrdNode]) -> vrdSwitchNode: ...
    def customEvent(self, event: QEvent) -> None: ...
    def cutNodes(self, nodes: Sequence[vrdNode]) -> None: ...
    def deleteLater(self) -> None: ...
    def destroyed(self) -> None: ...
    def disconnect(self) -> None: ...
    def disconnectNotify(self, signal: QMetaMethod) -> None: ...
    def dumpObjectInfo(self) -> None: ...
    def dumpObjectTree(self) -> None: ...
    def duplicateNodes(self, nodes: Sequence[vrdNode]) -> None: ...
    def dynamicPropertyNames(self) -> List[QByteArray]: ...
    def emit(self, arg__1: bytes, *args: None) -> bool: ...
    def event(self, event: QEvent) -> bool: ...
    def eventFilter(self, watched: QObject, event: QEvent) -> bool: ...
    def findChild(self, type: type, name: str = {}, options: Qt.FindChildOptions = Qt.FindChildOption.FindChildrenRecursively) -> object: ...
    def findNode(self, name: str) -> vrdNode: ...
    def findNodes(self, name: str) -> List[vrdNode]: ...
    def getAllNodes(self) -> List[vrdNode]: ...
    def getAllSceneplates(self) -> List[vrdSceneplateNode]: ...
    def getDefaultBackgroundColor(self) -> QVector3D: ...
    def getDefaultBackgroundTransparency(self) -> float: ...
    def getDefaultFont(self) -> str: ...
    def getDefaultFontColor(self) -> QVector3D: ...
    def getPreviewImage(self, sceneplate: vrdNode) -> QImage: ...
    def getRootNode(self) -> vrdNode: ...
    def getSelectedNodes(self) -> List[vrdNode]: ...
    def inherits(self, classname: bytes) -> bool: ...
    def init(self) -> None: ...
    def installEventFilter(self, filterObj: QObject) -> None: ...
    def isSignalConnected(self, signal: QMetaMethod) -> bool: ...
    def isWidgetType(self) -> bool: ...
    def isWindowType(self) -> bool: ...
    def killTimer(self, id: int) -> None: ...
    def loadNodes(self, filename: str) -> bool: ...
    def metaObject(self) -> QMetaObject: ...
    def moveToThread(self, thread: QThread) -> None: ...
    def nodesAdded(self) -> None: ...
    def nodesChanged(self) -> None: ...
    def nodesRemoved(self) -> None: ...
    def nodesSelected(self) -> None: ...
    def objectName(self) -> str: ...
    def objectNameChanged(self) -> None: ...
    def parent(self) -> QObject: ...
    def pasteAllAttributes(self, nodes: Sequence[vrdSceneplateNode]) -> None: ...
    def pasteColorCorrection(self, nodes: Sequence[vrdSceneplateNode]) -> None: ...
    def pasteNodes(self, targetRoot: vrdNode) -> None: ...
    def pasteProperties(self, nodes: Sequence[vrdSceneplateNode]) -> None: ...
    def pasteSizeAndPosition(self, nodes: Sequence[vrdSceneplateNode]) -> None: ...
    def property(self, name: str) -> Any: ...
    def receivers(self, signal: bytes) -> int: ...
    def reloadWebPage(self, nodes: Sequence[vrdNode]) -> None: ...
    def removeAllGroups(self) -> None: ...
    def removeEventFilter(self, obj: QObject) -> None: ...
    def removeNodes(self, nodes: Sequence[vrdNode]) -> None: ...
    def saveNodes(self, filename: str, nodes: Sequence[vrdNode]) -> bool: ...
    def sender(self) -> QObject: ...
    def senderSignalIndex(self) -> int: ...
    def setDefaultBackgroundColor(self, color: QVector3D) -> None: ...
    def setDefaultBackgroundTransparency(self, transparency: float) -> None: ...
    def setDefaultFont(self, font: str) -> None: ...
    def setDefaultFontColor(self, color: QVector3D) -> None: ...
    def setObjectName(self, name: str) -> None: ...
    def setParent(self, parent: QObject) -> None: ...
    def setProperty(self, name: str, value: Any) -> bool: ...
    def setSelectedNodes(self, nodes: Sequence[vrdNode]) -> None: ...
    def signalsBlocked(self) -> bool: ...
    def startTimer(self, interval: int, timerType: Qt.TimerType = Qt.TimerType.CoarseTimer) -> int: ...
    def thread(self) -> QThread: ...
    def timerEvent(self, event: QTimerEvent) -> None: ...
    def tr(self) -> None: ...

class vrSceneplateTypes:
    __doc__: NoneType
    __module__: str
    Frontplate: NodeType
    Backplate: NodeType
    Group: NodeType
    Switch: NodeType
    Depthplate: NodeType
    All: NodeType
    Image: ContentType
    Web: ContentType
    Text: ContentType
    Absolute: SizeType
    Relative: SizeType
    Top: Position
    Bottom: Position
    Left: Position
    Right: Position
    Center: Position
    TopLeft: Position
    TopRight: Position
    BottomLeft: Position
    BottomRight: Position
    Repeat: RepeatMode
    Mirror: RepeatMode
    Decal: RepeatMode
    Clamp: RepeatMode
    def ContentType(self) -> None: ...
    def NodeType(self) -> None: ...
    def Position(self) -> None: ...
    def RepeatMode(self) -> None: ...
    def SizeType(self) -> None: ...
    def __delattr__(self) -> None: ...
    def __dir__(self, /): ...
    def __eq__(self) -> None: ...
    def __format__(self, format_spec, /): ...
    def __ge__(self) -> None: ...
    def __getattribute__(self) -> None: ...
    def __getstate__(self, /): ...
    def __gt__(self) -> None: ...
    def __hash__(self) -> None: ...
    def __init__(self) -> None: ...
    def __init_subclass__(cls) -> None: ...
    def __le__(self) -> None: ...
    def __lt__(self) -> None: ...
    def __ne__(self) -> None: ...
    def __new__(cls) -> None: ...
    def __reduce__(self, /): ...
    def __reduce_ex__(self, protocol, /): ...
    def __repr__(self) -> None: ...
    def __setattr__(self) -> None: ...
    def __sizeof__(self, /): ...
    def __str__(self) -> None: ...
    def __subclasshook__(self) -> None: ...

class vrSessionService:
    __doc__: NoneType
    __module__: str
    staticMetaObject: QMetaObject
    def __delattr__(self) -> None: ...
    def __dir__(self, /): ...
    def __eq__(self) -> None: ...
    def __format__(self, format_spec, /): ...
    def __ge__(self) -> None: ...
    def __getattribute__(self) -> None: ...
    def __getstate__(self, /): ...
    def __gt__(self) -> None: ...
    def __hash__(self) -> None: ...
    def __init__(self) -> None: ...
    def __init_subclass__(cls) -> None: ...
    def __le__(self) -> None: ...
    def __lt__(self) -> None: ...
    def __ne__(self) -> None: ...
    def __new__(cls) -> None: ...
    def __reduce__(self, /): ...
    def __reduce_ex__(self, protocol, /): ...
    def __repr__(self) -> None: ...
    def __setattr__(self) -> None: ...
    def __sizeof__(self, /): ...
    def __str__(self) -> None: ...
    def __subclasshook__(self) -> None: ...
    def abortProgress(self) -> None: ...
    def addNodeSync(self, node: vrdNode) -> None: ...
    def blockSignals(self, b: bool) -> bool: ...
    def blockSync(self, commandTypeName: str = '') -> None: ...
    def checkSessionLink(self, passwd: str, sessionLink: str) -> bool: ...
    def childEvent(self, event: QChildEvent) -> None: ...
    def children(self) -> List[QObject]: ...
    def connect(self) -> None: ...
    def connectNotify(self, signal: QMetaMethod) -> None: ...
    def createSessionLink(self, server: str, passwd: str) -> str: ...
    def customEvent(self, event: QEvent) -> None: ...
    def deleteLater(self) -> None: ...
    def destroyed(self) -> None: ...
    def disconnect(self) -> None: ...
    def disconnectNotify(self, signal: QMetaMethod) -> None: ...
    def dumpObjectInfo(self) -> None: ...
    def dumpObjectTree(self) -> None: ...
    def dynamicPropertyNames(self) -> List[QByteArray]: ...
    def emit(self, arg__1: bytes, *args: None) -> bool: ...
    def event(self, event: QEvent) -> bool: ...
    def eventFilter(self, watched: QObject, event: QEvent) -> bool: ...
    def findChild(self, type: type, name: str = {}, options: Qt.FindChildOptions = Qt.FindChildOption.FindChildrenRecursively) -> object: ...
    def getDefaultColors(self) -> Dict[str, QColor]: ...
    def getPauseSync(self) -> bool: ...
    def getRemoteUsers(self) -> List[vrdSessionUser]: ...
    def getSessionLink(self) -> str: ...
    def getShowSceneDownloadWarning(self) -> bool: ...
    def getShowSceneUploadWarning(self) -> bool: ...
    def getSyncCommandNames(self) -> List[str]: ...
    def getUser(self) -> vrdSessionUser: ...
    def getUsers(self) -> List[vrdSessionUser]: ...
    def inherits(self, classname: bytes) -> bool: ...
    def init(self) -> None: ...
    def installEventFilter(self, filterObj: QObject) -> None: ...
    def isConnected(self) -> bool: ...
    def isJoinCompleted(self) -> bool: ...
    def isMicrophoneMute(self) -> bool: ...
    def isSignalConnected(self, signal: QMetaMethod) -> bool: ...
    def isSpatialAudio(self) -> bool: ...
    def isSpeakerMute(self) -> bool: ...
    def isUserAutoColor(self) -> bool: ...
    def isWidgetType(self) -> bool: ...
    def isWindowType(self) -> bool: ...
    def join(self, sessionLink: str, userName: str = '', color: Union[QColor, QRgba64, Any, Qt.GlobalColor, str, int] = Qt.GlobalColor.transparent, roomName: str = '', passwd: str = '', forceVersion: bool = False) -> None: ...
    def joinFailed(self) -> None: ...
    def killTimer(self, id: int) -> None: ...
    def leave(self) -> None: ...
    def metaObject(self) -> QMetaObject: ...
    def microphoneMuted(self) -> None: ...
    def moveToThread(self, thread: QThread) -> None: ...
    def objectName(self) -> str: ...
    def objectNameChanged(self) -> None: ...
    def parent(self) -> QObject: ...
    def pointerToolActiveChanged(self) -> None: ...
    def progressChanged(self) -> None: ...
    def progressFinished(self) -> None: ...
    def property(self, name: str) -> Any: ...
    def receivedSessionConfig(self) -> None: ...
    def receivers(self, signal: bytes) -> int: ...
    def removeEventFilter(self, obj: QObject) -> None: ...
    def removeNodeSync(self, node: vrdNode) -> None: ...
    def requestSceneDownload(self) -> None: ...
    def sendPython(self, command: str, commandId: str = '') -> None: ...
    def sender(self) -> QObject: ...
    def senderSignalIndex(self) -> int: ...
    def sessionJoined(self) -> None: ...
    def sessionLeft(self) -> None: ...
    def setAudioEnabled(self, value: bool) -> None: ...
    def setAvatarProximityOpaqueDistance(self, value: float) -> None: ...
    def setAvatarProximityTransparentDistance(self, value: float) -> None: ...
    def setAvatarSafetyOpaqueDistance(self, value: float) -> None: ...
    def setAvatarSafetyTransparentDistance(self, value: float) -> None: ...
    def setMicrophoneLevel(self, value: float) -> None: ...
    def setMicrophoneMute(self, value: bool) -> None: ...
    def setObjectName(self, name: str) -> None: ...
    def setParent(self, parent: QObject) -> None: ...
    def setPauseSync(self, value: bool) -> None: ...
    def setPointerToolActive(self, on: bool) -> None: ...
    def setPointerVisible(self, value: bool) -> None: ...
    def setProperty(self, name: str, value: Any) -> bool: ...
    def setRoom(self, room: str) -> None: ...
    def setShowSceneDownloadWarning(self, value: bool) -> None: ...
    def setShowSceneUploadWarning(self, value: bool) -> None: ...
    def setSpatialAudio(self, value: bool) -> None: ...
    def setSpeakerLevel(self, value: float) -> None: ...
    def setSpeakerMute(self, value: bool) -> None: ...
    def setUserColor(self, userColor: Union[QColor, QRgba64, Any, Qt.GlobalColor, str, int]) -> None: ...
    def setUserName(self, userName: str) -> None: ...
    def showDesktopAvatar(self, on: bool) -> None: ...
    def signalsBlocked(self) -> bool: ...
    def speakerMuted(self) -> None: ...
    def spectate(self, on: bool, userId: int = 0) -> None: ...
    def spectateChanged(self) -> None: ...
    def startTimer(self, interval: int, timerType: Qt.TimerType = Qt.TimerType.CoarseTimer) -> int: ...
    def statusChanged(self) -> None: ...
    def stopForAll(self) -> None: ...
    def syncNode(self, node: vrdNode) -> None: ...
    def thread(self) -> QThread: ...
    def timerEvent(self, event: QTimerEvent) -> None: ...
    def tr(self) -> None: ...
    def unblockSync(self, commandTypeName: str = '') -> None: ...
    def uploadScene(self) -> None: ...
    def uploadScenePath(self, path: str) -> None: ...
    def userArrives(self) -> None: ...
    def userLeaves(self) -> None: ...

class vrSpectrum:
    __doc__: NoneType
    __hash__: NoneType
    __module__: str
    SpectraSampleCount: SpectraDefines
    WavelengthStart: SpectraDefines
    WavelengthEnd: SpectraDefines
    WavelengthDelta: SpectraDefines
    SourceWavelengthsCount: SpectraDefines
    SourceWavelengthDelta: SpectraDefines
    Blackbody: AnalyticFunction
    CIE_D: AnalyticFunction
    Gauss: AnalyticFunction
    Cosine: AnalyticFunction
    Bartlett: AnalyticFunction
    Blackman: AnalyticFunction
    Connes: AnalyticFunction
    Hamming: AnalyticFunction
    Hanning: AnalyticFunction
    Lorentzian: AnalyticFunction
    Welch: AnalyticFunction
    def AnalyticFunction(self) -> None: ...
    def SpectraDefines(self) -> None: ...
    def __copy__(self) -> None: ...
    def __delattr__(self) -> None: ...
    def __dir__(self, /): ...
    def __eq__(self) -> None: ...
    def __format__(self, format_spec, /): ...
    def __ge__(self) -> None: ...
    def __getattribute__(self) -> None: ...
    def __getstate__(self, /): ...
    def __gt__(self) -> None: ...
    def __init__(self) -> None: ...
    def __init_subclass__(cls) -> None: ...
    def __le__(self) -> None: ...
    def __lshift__(self) -> None: ...
    def __lt__(self) -> None: ...
    def __ne__(self) -> None: ...
    def __new__(cls) -> None: ...
    def __reduce__(self, /): ...
    def __reduce_ex__(self, protocol, /): ...
    def __repr__(self) -> None: ...
    def __rlshift__(self) -> None: ...
    def __rrshift__(self) -> None: ...
    def __rshift__(self) -> None: ...
    def __setattr__(self) -> None: ...
    def __sizeof__(self, /): ...
    def __str__(self) -> None: ...
    def __subclasshook__(self) -> None: ...
    def add(self, spectrumB: Union[vrSpectrum, QVector3D]) -> None: ...
    def addAnalyticFunction(self, function: vrSpectrum.AnalyticFunction, peakWavelength: float, peakIntensity: float, fwhm: float, kelvin: float, clear: bool = True, wavelengthStart: int = 'vrSpectrum.SpectraDefines.WavelengthStart', wavelengthDelta: int = 'vrSpectrum.SpectraDefines.SourceWavelengthDelta', wavelengthCount: int = 'vrSpectrum.SpectraDefines.SourceWavelengthsCount') -> None: ...
    def copy(self, source: Union[vrSpectrum, QVector3D]) -> bool: ...
    def getMaxValue(self) -> float: ...
    def getPhotometricValue(self) -> float: ...
    def getRGB(self) -> QVector3D: ...
    def getSample(self, i: int) -> float: ...
    def getSamples(self) -> List[float]: ...
    def getSourceValue(self, i: int) -> float: ...
    def getSourceValues(self) -> List[float]: ...
    def getStartWavelength(self) -> int: ...
    def getSum(self) -> float: ...
    def getUseSpectrum(self) -> bool: ...
    def getWavelength(self, i: int) -> float: ...
    def getWavelengthCount(self) -> int: ...
    def getWavelengthDelta(self) -> int: ...
    def getWavelengths(self) -> List[float]: ...
    def getXYZ(self) -> QVector3D: ...
    def isActive(self) -> bool: ...
    def isInitialized(self) -> bool: ...
    def load(self, filename: str) -> bool: ...
    def resampleSource(self, wavelengthStart: int, wavelengthDelta: int, wavelengthCount: int) -> None: ...
    def save(self, filename: str) -> bool: ...
    def scale(self, scalingFactor: float) -> None: ...
    def setIlluminationSpectrumFromRGB(self, red: float, green: float, blue: float, wavelengthStart: int = 'vrSpectrum.SpectraDefines.WavelengthStart', wavelengthDelta: int = 'vrSpectrum.SpectraDefines.SourceWavelengthDelta', wavelengthCount: int = 'vrSpectrum.SpectraDefines.SourceWavelengthsCount') -> None: ...
    def setOne(self) -> None: ...
    def setPhotometricValue(self, value: float) -> None: ...
    def setRGB(self, red: float, green: float, blue: float, wavelengthStart: int = 'vrSpectrum.SpectraDefines.WavelengthStart', wavelengthDelta: int = 'vrSpectrum.SpectraDefines.SourceWavelengthDelta', wavelengthCount: int = 'vrSpectrum.SpectraDefines.SourceWavelengthsCount') -> None: ...
    def setUseSpectrum(self, useSpectrum: bool) -> None: ...

class vrStyleTypes:
    __doc__: NoneType
    __module__: str
    def ColorTheme(self) -> None: ...
    def __delattr__(self) -> None: ...
    def __dir__(self, /): ...
    def __eq__(self) -> None: ...
    def __format__(self, format_spec, /): ...
    def __ge__(self) -> None: ...
    def __getattribute__(self) -> None: ...
    def __getstate__(self, /): ...
    def __gt__(self) -> None: ...
    def __hash__(self) -> None: ...
    def __init__(self) -> None: ...
    def __init_subclass__(cls) -> None: ...
    def __le__(self) -> None: ...
    def __lt__(self) -> None: ...
    def __ne__(self) -> None: ...
    def __new__(cls) -> None: ...
    def __reduce__(self, /): ...
    def __reduce_ex__(self, protocol, /): ...
    def __repr__(self) -> None: ...
    def __setattr__(self) -> None: ...
    def __sizeof__(self, /): ...
    def __str__(self) -> None: ...
    def __subclasshook__(self) -> None: ...

class vrSubstanceTypes:
    __doc__: NoneType
    __module__: str
    def PresetApplyMode(self) -> None: ...
    def __copy__(self) -> None: ...
    def __delattr__(self) -> None: ...
    def __dir__(self, /): ...
    def __eq__(self) -> None: ...
    def __format__(self, format_spec, /): ...
    def __ge__(self) -> None: ...
    def __getattribute__(self) -> None: ...
    def __getstate__(self, /): ...
    def __gt__(self) -> None: ...
    def __hash__(self) -> None: ...
    def __init__(self) -> None: ...
    def __init_subclass__(cls) -> None: ...
    def __le__(self) -> None: ...
    def __lt__(self) -> None: ...
    def __ne__(self) -> None: ...
    def __new__(cls) -> None: ...
    def __reduce__(self, /): ...
    def __reduce_ex__(self, protocol, /): ...
    def __repr__(self) -> None: ...
    def __setattr__(self) -> None: ...
    def __sizeof__(self, /): ...
    def __str__(self) -> None: ...
    def __subclasshook__(self) -> None: ...

class vrTextureTypes:
    __doc__: NoneType
    __module__: str
    def Axis(self) -> None: ...
    def MappingType(self) -> None: ...
    def RepeatMode(self) -> None: ...
    def TriplanarBlendMode(self) -> None: ...
    def __copy__(self) -> None: ...
    def __delattr__(self) -> None: ...
    def __dir__(self, /): ...
    def __eq__(self) -> None: ...
    def __format__(self, format_spec, /): ...
    def __ge__(self) -> None: ...
    def __getattribute__(self) -> None: ...
    def __getstate__(self, /): ...
    def __gt__(self) -> None: ...
    def __hash__(self) -> None: ...
    def __init__(self) -> None: ...
    def __init_subclass__(cls) -> None: ...
    def __le__(self) -> None: ...
    def __lt__(self) -> None: ...
    def __ne__(self) -> None: ...
    def __new__(cls) -> None: ...
    def __reduce__(self, /): ...
    def __reduce_ex__(self, protocol, /): ...
    def __repr__(self) -> None: ...
    def __setattr__(self) -> None: ...
    def __sizeof__(self, /): ...
    def __str__(self) -> None: ...
    def __subclasshook__(self) -> None: ...

class vrTransformTypes:
    __doc__: NoneType
    __module__: str
    XYZ: EulerRotationOrder
    XZY: EulerRotationOrder
    YXZ: EulerRotationOrder
    YZX: EulerRotationOrder
    ZXY: EulerRotationOrder
    ZYX: EulerRotationOrder
    NoTransValue: VariantValueBitMask
    TransXValue: VariantValueBitMask
    TransYValue: VariantValueBitMask
    TransZValue: VariantValueBitMask
    AllTransValues: VariantValueBitMask
    RotXValue: VariantValueBitMask
    RotYValue: VariantValueBitMask
    RotZValue: VariantValueBitMask
    RotXYZValue: VariantValueBitMask
    RotOrderValue: VariantValueBitMask
    AllRotValues: VariantValueBitMask
    ScaleXValue: VariantValueBitMask
    ScaleYValue: VariantValueBitMask
    ScaleZValue: VariantValueBitMask
    AllScaleValues: VariantValueBitMask
    ScalePivotValues: VariantValueBitMask
    RotPivotValues: VariantValueBitMask
    AllTransormationValues: VariantValueBitMask
    def EulerRotationOrder(self) -> None: ...
    def VariantValueBitMask(self) -> None: ...
    def __copy__(self) -> None: ...
    def __delattr__(self) -> None: ...
    def __dir__(self, /): ...
    def __eq__(self) -> None: ...
    def __format__(self, format_spec, /): ...
    def __ge__(self) -> None: ...
    def __getattribute__(self) -> None: ...
    def __getstate__(self, /): ...
    def __gt__(self) -> None: ...
    def __hash__(self) -> None: ...
    def __init__(self) -> None: ...
    def __init_subclass__(cls) -> None: ...
    def __le__(self) -> None: ...
    def __lt__(self) -> None: ...
    def __ne__(self) -> None: ...
    def __new__(cls) -> None: ...
    def __reduce__(self, /): ...
    def __reduce_ex__(self, protocol, /): ...
    def __repr__(self) -> None: ...
    def __setattr__(self) -> None: ...
    def __sizeof__(self, /): ...
    def __str__(self) -> None: ...
    def __subclasshook__(self) -> None: ...

class vrUVService:
    __doc__: NoneType
    __module__: str
    staticMetaObject: QMetaObject
    def __delattr__(self) -> None: ...
    def __dir__(self, /): ...
    def __eq__(self) -> None: ...
    def __format__(self, format_spec, /): ...
    def __ge__(self) -> None: ...
    def __getattribute__(self) -> None: ...
    def __getstate__(self, /): ...
    def __gt__(self) -> None: ...
    def __hash__(self) -> None: ...
    def __init__(self) -> None: ...
    def __init_subclass__(cls) -> None: ...
    def __le__(self) -> None: ...
    def __lt__(self) -> None: ...
    def __ne__(self) -> None: ...
    def __new__(cls) -> None: ...
    def __reduce__(self, /): ...
    def __reduce_ex__(self, protocol, /): ...
    def __repr__(self) -> None: ...
    def __setattr__(self) -> None: ...
    def __sizeof__(self, /): ...
    def __str__(self) -> None: ...
    def __subclasshook__(self) -> None: ...
    def applyCylindricalProjection(self, nodes: Sequence[vrdGeometryNode], settings: vrdUVCylindricalProjectionSettings, uvSet: vrUVTypes.UVSet = vrUVTypes.UVSet.MaterialUVSet) -> None: ...
    def applyPlanarProjection(self, nodes: Sequence[vrdGeometryNode], settings: vrdUVPlanarProjectionSettings, uvSet: vrUVTypes.UVSet = vrUVTypes.UVSet.MaterialUVSet) -> None: ...
    def applyTriplanarProjection(self, nodes: Sequence[vrdGeometryNode], settings: vrdUVTriplanarProjectionSettings, uvSet: vrUVTypes.UVSet = vrUVTypes.UVSet.MaterialUVSet) -> None: ...
    def applyTriplanarProjectionAndLayout(self, nodes: Sequence[vrdGeometryNode], settings: vrdUVTriplanarProjectionSettings, layoutSettings: vrdUVLayoutSettings, uvSet: vrUVTypes.UVSet = vrUVTypes.UVSet.MaterialUVSet) -> None: ...
    def applyWorldScale(self, nodes: Sequence[vrdGeometryNode], uvSet: vrUVTypes.UVSet = vrUVTypes.UVSet.MaterialUVSet) -> None: ...
    def blockSignals(self, b: bool) -> bool: ...
    def cancelProgress(self) -> None: ...
    def changedPreferences(self) -> None: ...
    def childEvent(self, event: QChildEvent) -> None: ...
    def children(self) -> List[QObject]: ...
    def connect(self) -> None: ...
    def connectNotify(self, signal: QMetaMethod) -> None: ...
    def customEvent(self, event: QEvent) -> None: ...
    def cutAlongSeams(self, nodes: Sequence[vrdGeometryNode], settings: vrdUVSeamSettings, uvSet: vrUVTypes.UVSet) -> None: ...
    def cylindricalProjectionFitSize(self, nodes: Sequence[vrdGeometryNode], settings: vrdUVCylindricalProjectionSettings, uvSet: vrUVTypes.UVSet = vrUVTypes.UVSet.MaterialUVSet) -> None: ...
    def deleteLater(self) -> None: ...
    def destroyed(self) -> None: ...
    def disconnect(self) -> None: ...
    def disconnectNotify(self, signal: QMetaMethod) -> None: ...
    def dumpObjectInfo(self) -> None: ...
    def dumpObjectTree(self) -> None: ...
    def dynamicPropertyNames(self) -> List[QByteArray]: ...
    def emit(self, arg__1: bytes, *args: None) -> bool: ...
    def event(self, event: QEvent) -> bool: ...
    def eventFilter(self, watched: QObject, event: QEvent) -> bool: ...
    def findChild(self, type: type, name: str = {}, options: Qt.FindChildOptions = Qt.FindChildOption.FindChildrenRecursively) -> object: ...
    def getCylindricalProjectionDefaultSettings(self, nodes: Sequence[vrdGeometryNode], textureWidth: int, textureHeight: int) -> vrdUVCylindricalProjectionSettings: ...
    def getPlanarProjectionDefaultSettings(self, nodes: Sequence[vrdGeometryNode], textureWidth: int, textureHeight: int) -> vrdUVPlanarProjectionSettings: ...
    def getProjectionMode(self, node: vrdGeometryNode, uvSet: vrUVTypes.UVSet = vrUVTypes.UVSet.MaterialUVSet) -> vrUVTypes.UVProjectionMode: ...
    def getTriplanarProjectionDefaultSettings(self, nodes: Sequence[vrdGeometryNode], textureWidth: int, textureHeight: int) -> vrdUVTriplanarProjectionSettings: ...
    def hasCylindricalProjectionSettings(self, node: vrdGeometryNode, uvSet: vrUVTypes.UVSet = vrUVTypes.UVSet.MaterialUVSet) -> bool: ...
    def hasPlanarProjectionSettings(self, node: vrdGeometryNode, uvSet: vrUVTypes.UVSet = vrUVTypes.UVSet.MaterialUVSet) -> bool: ...
    def hasTriplanarProjectionSettings(self, node: vrdGeometryNode, uvSet: vrUVTypes.UVSet = vrUVTypes.UVSet.MaterialUVSet) -> bool: ...
    def inherits(self, classname: bytes) -> bool: ...
    def init(self) -> None: ...
    def installEventFilter(self, filterObj: QObject) -> None: ...
    def isSignalConnected(self, signal: QMetaMethod) -> bool: ...
    def isWidgetType(self) -> bool: ...
    def isWindowType(self) -> bool: ...
    def killTimer(self, id: int) -> None: ...
    def layout(self, nodes: Sequence[vrdGeometryNode], settings: vrdUVLayoutSettings, uvSet: vrUVTypes.UVSet = vrUVTypes.UVSet.MaterialUVSet) -> None: ...
    def layoutSettingsChanged(self) -> None: ...
    def metaObject(self) -> QMetaObject: ...
    def moveToThread(self, thread: QThread) -> None: ...
    def objectName(self) -> str: ...
    def objectNameChanged(self) -> None: ...
    def optimize(self, nodes: Sequence[vrdGeometryNode], settings: vrdUVOptimizeSettings, uvSet: vrUVTypes.UVSet = vrUVTypes.UVSet.MaterialUVSet) -> None: ...
    def parent(self) -> QObject: ...
    def planarDistanceChanged(self) -> None: ...
    def planarProjectionFitSize(self, nodes: Sequence[vrdGeometryNode], settings: vrdUVPlanarProjectionSettings, uvSet: vrUVTypes.UVSet = vrUVTypes.UVSet.MaterialUVSet) -> None: ...
    def progressChanged(self) -> None: ...
    def progressFinished(self) -> None: ...
    def progressStarted(self) -> None: ...
    def projectionSettingsChanged(self) -> None: ...
    def property(self, name: str) -> Any: ...
    def readCylindricalProjectionSettings(self, node: vrdGeometryNode, uvSet: vrUVTypes.UVSet = vrUVTypes.UVSet.MaterialUVSet) -> vrdUVCylindricalProjectionSettings: ...
    def readPlanarProjectionSettings(self, node: vrdGeometryNode, uvSet: vrUVTypes.UVSet = vrUVTypes.UVSet.MaterialUVSet) -> vrdUVPlanarProjectionSettings: ...
    def readTriplanarProjectionSettings(self, node: vrdGeometryNode, uvSet: vrUVTypes.UVSet = vrUVTypes.UVSet.MaterialUVSet) -> vrdUVTriplanarProjectionSettings: ...
    def receivers(self, signal: bytes) -> int: ...
    def removeEventFilter(self, obj: QObject) -> None: ...
    def rotateUV(self, geometryNodes: Sequence[vrdGeometryNode], center: QVector2D, angleDegree: float, uvSet: vrUVTypes.UVSet) -> None: ...
    def saveUVSnapshot(self, nodes: Sequence[vrdNode], path: str, width: int = 1024, height: int = 1024, uvSet: vrUVTypes.UVSet = vrUVTypes.UVSet.MaterialUVSet, style: int = 'vrUVTypes.ShowWireframe', mode: vrUVTypes.SnapshotMode = vrUVTypes.SnapshotMode.ZeroToOneSpace, customSpace: QVector4D = Default(QVector4D)) -> None: ...
    def scaleUV(self, nodes: Sequence[vrdGeometryNode], center: QVector2D, uScale: float, vScale: float, uvSet: vrUVTypes.UVSet) -> None: ...
    def sender(self) -> QObject: ...
    def senderSignalIndex(self) -> int: ...
    def setObjectName(self, name: str) -> None: ...
    def setParent(self, parent: QObject) -> None: ...
    def setProperty(self, name: str, value: Any) -> bool: ...
    def sewAllIslands(self, nodes: Sequence[vrdGeometryNode], onlyBordersBetweenIslands: bool, uvSet: vrUVTypes.UVSet = vrUVTypes.UVSet.MaterialUVSet) -> None: ...
    def signalsBlocked(self) -> bool: ...
    def snapshotRequested(self) -> None: ...
    def startTimer(self, interval: int, timerType: Qt.TimerType = Qt.TimerType.CoarseTimer) -> int: ...
    def supportGeometryOpacityChanged(self) -> None: ...
    def thread(self) -> QThread: ...
    def timerEvent(self, event: QTimerEvent) -> None: ...
    def tr(self) -> None: ...
    def translateUV(self, nodes: Sequence[vrdGeometryNode], du: float, dv: float, uvSet: vrUVTypes.UVSet) -> None: ...
    def triplanarProjectionFitSize(self, nodes: Sequence[vrdGeometryNode], settings: vrdUVTriplanarProjectionSettings, uvSet: vrUVTypes.UVSet = vrUVTypes.UVSet.MaterialUVSet) -> None: ...
    def unfold(self, nodes: Sequence[vrdGeometryNode], unfoldSettings: vrdUVUnfoldSettings, layoutSettings: vrdUVLayoutSettings, uvSet: vrUVTypes.UVSet = vrUVTypes.UVSet.MaterialUVSet) -> None: ...
    def unfoldSettingsChanged(self) -> None: ...

class vrUVTypes:
    __doc__: NoneType
    __module__: str
    RotateOff: PreRotateMode
    Horizontal: PreRotateMode
    Vertical: PreRotateMode
    XAxisToV: PreRotateMode
    YAxisToV: PreRotateMode
    ZAxisToV: PreRotateMode
    ScaleOff: PreScaleMode
    Keep3DArea: PreScaleMode
    KeepTotalUVArea: PreScaleMode
    TranslateOnly: PostScaleMode
    Uniform: PostScaleMode
    NonUniform: PostScaleMode
    BBoxCenter: TileAssignMode
    Distribute: TileAssignMode
    None_: UVProjectionMode
    PlanarMapping: UVProjectionMode
    TriplanarMapping: UVProjectionMode
    CylindricalMapping: UVProjectionMode
    MaterialUVSet: UVSet
    LightmapUVSet: UVSet
    ShowWireframe: SnapshotStyle
    ShowBorders: SnapshotStyle
    ShowShading: SnapshotStyle
    ShowAllVertices: SnapshotStyle
    ZeroToOneSpace: SnapshotMode
    Boundingbox: SnapshotMode
    CustomSpace: SnapshotMode
    def PostScaleMode(self) -> None: ...
    def PreRotateMode(self) -> None: ...
    def PreScaleMode(self) -> None: ...
    def SeamMode(self) -> None: ...
    def SnapshotMode(self) -> None: ...
    def SnapshotStyle(self) -> None: ...
    def TileAssignMode(self) -> None: ...
    def UVProjectionMode(self) -> None: ...
    def UVSet(self) -> None: ...
    def __delattr__(self) -> None: ...
    def __dir__(self, /): ...
    def __eq__(self) -> None: ...
    def __format__(self, format_spec, /): ...
    def __ge__(self) -> None: ...
    def __getattribute__(self) -> None: ...
    def __getstate__(self, /): ...
    def __gt__(self) -> None: ...
    def __hash__(self) -> None: ...
    def __init__(self) -> None: ...
    def __init_subclass__(cls) -> None: ...
    def __le__(self) -> None: ...
    def __lt__(self) -> None: ...
    def __ne__(self) -> None: ...
    def __new__(cls) -> None: ...
    def __reduce__(self, /): ...
    def __reduce_ex__(self, protocol, /): ...
    def __repr__(self) -> None: ...
    def __setattr__(self) -> None: ...
    def __sizeof__(self, /): ...
    def __str__(self) -> None: ...
    def __subclasshook__(self) -> None: ...

class vrUndoService:
    __doc__: NoneType
    __module__: str
    staticMetaObject: QMetaObject
    def __delattr__(self) -> None: ...
    def __dir__(self, /): ...
    def __eq__(self) -> None: ...
    def __format__(self, format_spec, /): ...
    def __ge__(self) -> None: ...
    def __getattribute__(self) -> None: ...
    def __getstate__(self, /): ...
    def __gt__(self) -> None: ...
    def __hash__(self) -> None: ...
    def __init__(self) -> None: ...
    def __init_subclass__(cls) -> None: ...
    def __le__(self) -> None: ...
    def __lt__(self) -> None: ...
    def __ne__(self) -> None: ...
    def __new__(cls) -> None: ...
    def __reduce__(self, /): ...
    def __reduce_ex__(self, protocol, /): ...
    def __repr__(self) -> None: ...
    def __setattr__(self) -> None: ...
    def __sizeof__(self, /): ...
    def __str__(self) -> None: ...
    def __subclasshook__(self) -> None: ...
    def beginBlockUndo(self) -> None: ...
    def beginMultiCommand(self, name: str, mergeEnabled: bool = True) -> None: ...
    def beginUndo(self) -> None: ...
    def blockSignals(self, b: bool) -> bool: ...
    def childEvent(self, event: QChildEvent) -> None: ...
    def children(self) -> List[QObject]: ...
    def clear(self) -> None: ...
    def connect(self) -> None: ...
    def connectNotify(self, signal: QMetaMethod) -> None: ...
    def customEvent(self, event: QEvent) -> None: ...
    def deleteLater(self) -> None: ...
    def destroyed(self) -> None: ...
    def disconnect(self) -> None: ...
    def disconnectNotify(self, signal: QMetaMethod) -> None: ...
    def dumpObjectInfo(self) -> None: ...
    def dumpObjectTree(self) -> None: ...
    def dynamicPropertyNames(self) -> List[QByteArray]: ...
    def emit(self, arg__1: bytes, *args: None) -> bool: ...
    def endBlockUndo(self) -> None: ...
    def endMultiCommand(self) -> None: ...
    def endUndo(self) -> None: ...
    def event(self, event: QEvent) -> bool: ...
    def eventFilter(self, watched: QObject, event: QEvent) -> bool: ...
    def findChild(self, type: type, name: str = {}, options: Qt.FindChildOptions = Qt.FindChildOption.FindChildrenRecursively) -> object: ...
    def inherits(self, classname: bytes) -> bool: ...
    def init(self) -> None: ...
    def installEventFilter(self, filterObj: QObject) -> None: ...
    def isSignalConnected(self, signal: QMetaMethod) -> bool: ...
    def isWidgetType(self) -> bool: ...
    def isWindowType(self) -> bool: ...
    def killTimer(self, id: int) -> None: ...
    def metaObject(self) -> QMetaObject: ...
    def moveToThread(self, thread: QThread) -> None: ...
    def objectName(self) -> str: ...
    def objectNameChanged(self) -> None: ...
    def parent(self) -> QObject: ...
    def property(self, name: str) -> Any: ...
    def receivers(self, signal: bytes) -> int: ...
    def redo(self) -> None: ...
    def removeEventFilter(self, obj: QObject) -> None: ...
    def sender(self) -> QObject: ...
    def senderSignalIndex(self) -> int: ...
    def setObjectName(self, name: str) -> None: ...
    def setParent(self, parent: QObject) -> None: ...
    def setProperty(self, name: str, value: Any) -> bool: ...
    def signalsBlocked(self) -> bool: ...
    def startTimer(self, interval: int, timerType: Qt.TimerType = Qt.TimerType.CoarseTimer) -> int: ...
    def thread(self) -> QThread: ...
    def timerEvent(self, event: QTimerEvent) -> None: ...
    def tr(self) -> None: ...
    def undo(self) -> None: ...
    def undoAndPop(self) -> None: ...
    def undoBlocked(self) -> bool: ...
    def undoEnabled(self) -> bool: ...

class vrVRInputDeviceTypes:
    __doc__: NoneType
    __module__: str
    Controller: VisualizationMode
    Hand: VisualizationMode
    ControllerAndHand: VisualizationMode
    Uninitialized: VisualizationMode
    def VisualizationMode(self) -> None: ...
    def __delattr__(self) -> None: ...
    def __dir__(self, /): ...
    def __eq__(self) -> None: ...
    def __format__(self, format_spec, /): ...
    def __ge__(self) -> None: ...
    def __getattribute__(self) -> None: ...
    def __getstate__(self, /): ...
    def __gt__(self) -> None: ...
    def __hash__(self) -> None: ...
    def __init__(self) -> None: ...
    def __init_subclass__(cls) -> None: ...
    def __le__(self) -> None: ...
    def __lt__(self) -> None: ...
    def __ne__(self) -> None: ...
    def __new__(cls) -> None: ...
    def __reduce__(self, /): ...
    def __reduce_ex__(self, protocol, /): ...
    def __repr__(self) -> None: ...
    def __setattr__(self) -> None: ...
    def __sizeof__(self, /): ...
    def __str__(self) -> None: ...
    def __subclasshook__(self) -> None: ...

class vrWebEngineService:
    __doc__: NoneType
    __module__: str
    staticMetaObject: QMetaObject
    def __delattr__(self) -> None: ...
    def __dir__(self, /): ...
    def __eq__(self) -> None: ...
    def __format__(self, format_spec, /): ...
    def __ge__(self) -> None: ...
    def __getattribute__(self) -> None: ...
    def __getstate__(self, /): ...
    def __gt__(self) -> None: ...
    def __hash__(self) -> None: ...
    def __init__(self) -> None: ...
    def __init_subclass__(cls) -> None: ...
    def __le__(self) -> None: ...
    def __lt__(self) -> None: ...
    def __ne__(self) -> None: ...
    def __new__(cls) -> None: ...
    def __reduce__(self, /): ...
    def __reduce_ex__(self, protocol, /): ...
    def __repr__(self) -> None: ...
    def __setattr__(self) -> None: ...
    def __sizeof__(self, /): ...
    def __str__(self) -> None: ...
    def __subclasshook__(self) -> None: ...
    def anyWebEngineHasFocus(self) -> bool: ...
    def blockSignals(self, b: bool) -> bool: ...
    def childEvent(self, event: QChildEvent) -> None: ...
    def children(self) -> List[QObject]: ...
    def connect(self) -> None: ...
    def connectNotify(self, signal: QMetaMethod) -> None: ...
    def createGroup(self, name: str, parentGroup: str = '') -> None: ...
    def createWebEngine(self, name: str, group: str = '') -> vrdWebEngine: ...
    def customEvent(self, event: QEvent) -> None: ...
    def deleteLater(self) -> None: ...
    def destroyed(self) -> None: ...
    def disconnect(self) -> None: ...
    def disconnectNotify(self, signal: QMetaMethod) -> None: ...
    def dumpObjectInfo(self) -> None: ...
    def dumpObjectTree(self) -> None: ...
    def dynamicPropertyNames(self) -> List[QByteArray]: ...
    def emit(self, arg__1: bytes, *args: None) -> bool: ...
    def event(self, event: QEvent) -> bool: ...
    def eventFilter(self, watched: QObject, event: QEvent) -> bool: ...
    def findChild(self, type: type, name: str = {}, options: Qt.FindChildOptions = Qt.FindChildOption.FindChildrenRecursively) -> object: ...
    def getWebEngine(self, name: str) -> vrdWebEngine: ...
    def getWebEngines(self) -> List[vrdWebEngine]: ...
    def groupCreated(self) -> None: ...
    def groupRemoved(self) -> None: ...
    def inherits(self, classname: bytes) -> bool: ...
    def init(self) -> None: ...
    def installEventFilter(self, filterObj: QObject) -> None: ...
    def isInteractionEnabled(self) -> bool: ...
    def isSignalConnected(self, signal: QMetaMethod) -> bool: ...
    def isWidgetType(self) -> bool: ...
    def isWindowType(self) -> bool: ...
    def killTimer(self, id: int) -> None: ...
    def metaObject(self) -> QMetaObject: ...
    def moveToThread(self, thread: QThread) -> None: ...
    def objectName(self) -> str: ...
    def objectNameChanged(self) -> None: ...
    def parent(self) -> QObject: ...
    def property(self, name: str) -> Any: ...
    def receivers(self, signal: bytes) -> int: ...
    def reloadAllWebEngines(self) -> None: ...
    def removeEventFilter(self, obj: QObject) -> None: ...
    def removeGroup(self, name: str) -> bool: ...
    def removeWebEngine(self, webengine: vrdWebEngine) -> bool: ...
    def renameGroup(self, oldName: str, newName: str) -> None: ...
    def reparentGroup(self, name: str, newParentName: str) -> None: ...
    def reparentWebEngine(self, webengine: vrdWebEngine, newParentName: str) -> None: ...
    def sender(self) -> QObject: ...
    def senderSignalIndex(self) -> int: ...
    def setInteractionEnabled(self, enable: bool) -> None: ...
    def setObjectName(self, name: str) -> None: ...
    def setParent(self, parent: QObject) -> None: ...
    def setProperty(self, name: str, value: Any) -> bool: ...
    def signalsBlocked(self) -> bool: ...
    def startTimer(self, interval: int, timerType: Qt.TimerType = Qt.TimerType.CoarseTimer) -> int: ...
    def structureChanged(self) -> None: ...
    def thread(self) -> QThread: ...
    def timerEvent(self, event: QTimerEvent) -> None: ...
    def tr(self) -> None: ...
    def urlChanged(self) -> None: ...
    def webEngineCreated(self) -> None: ...
    def webEngineRemoved(self) -> None: ...

class vrXRealityTypes:
    __doc__: NoneType
    __module__: str
    def MarkerTrackingTypes(self) -> None: ...
    def MarkerTypes(self) -> None: ...
    def XRRenderMode(self) -> None: ...
    def __delattr__(self) -> None: ...
    def __dir__(self, /): ...
    def __eq__(self) -> None: ...
    def __format__(self, format_spec, /): ...
    def __ge__(self) -> None: ...
    def __getattribute__(self) -> None: ...
    def __getstate__(self, /): ...
    def __gt__(self) -> None: ...
    def __hash__(self) -> None: ...
    def __init__(self) -> None: ...
    def __init_subclass__(cls) -> None: ...
    def __le__(self) -> None: ...
    def __lt__(self) -> None: ...
    def __ne__(self) -> None: ...
    def __new__(cls) -> None: ...
    def __reduce__(self, /): ...
    def __reduce_ex__(self, protocol, /): ...
    def __repr__(self) -> None: ...
    def __setattr__(self) -> None: ...
    def __sizeof__(self, /): ...
    def __str__(self) -> None: ...
    def __subclasshook__(self) -> None: ...

class vrdAimConstraintNode:
    __doc__: NoneType
    __module__: str
    upVectorTargetNodesProperty: str
    def __copy__(self) -> None: ...
    def __delattr__(self) -> None: ...
    def __dir__(self, /): ...
    def __eq__(self) -> None: ...
    def __format__(self, format_spec, /): ...
    def __ge__(self) -> None: ...
    def __getattribute__(self) -> None: ...
    def __getstate__(self, /): ...
    def __gt__(self) -> None: ...
    def __hash__(self) -> None: ...
    def __init__(self) -> None: ...
    def __init_subclass__(cls) -> None: ...
    def __le__(self) -> None: ...
    def __lshift__(self) -> None: ...
    def __lt__(self) -> None: ...
    def __ne__(self) -> None: ...
    def __new__(cls) -> None: ...
    def __reduce__(self, /): ...
    def __reduce_ex__(self, protocol, /): ...
    def __repr__(self) -> None: ...
    def __rlshift__(self) -> None: ...
    def __rrshift__(self) -> None: ...
    def __rshift__(self) -> None: ...
    def __setattr__(self) -> None: ...
    def __sizeof__(self, /): ...
    def __str__(self) -> None: ...
    def __subclasshook__(self) -> None: ...
    def applyMaterial(self, material: vrdMaterial) -> None: ...
    def asType(self, arg__1: object) -> object: ...
    def clearConstrainedNode(self) -> None: ...
    def clearTargetNodes(self) -> None: ...
    def clearUpVectorTargetNodes(self) -> None: ...
    def getBoundingBox(self) -> vrdBoundingBox: ...
    def getChild(self, index: int) -> vrdNode: ...
    def getChildCount(self) -> int: ...
    def getChildIndex(self, child: vrdNode) -> int: ...
    def getChildren(self) -> List[vrdNode]: ...
    def getChildrenRecursive(self) -> List[vrdNode]: ...
    def getChildrenRef(self) -> vrdNodeList: ...
    def getConstrainedNode(self) -> vrdNode: ...
    def getLocked(self) -> bool: ...
    def getMaterial(self) -> vrdMaterial: ...
    def getName(self) -> str: ...
    def getObjectId(self) -> int: ...
    def getOrCreateTransformNode(self) -> vrdNode: ...
    def getParent(self) -> vrdNode: ...
    def getPath(self) -> str: ...
    def getSelectableFlag(self) -> bool: ...
    def getSharedNodes(self) -> List[vrdNode]: ...
    def getSynchronizedNodes(self) -> List[vrdNode]: ...
    def getTargetNodeWeight(self, node: vrdNode) -> float: ...
    def getTargetNodes(self) -> List[vrdNode]: ...
    def getUniquePath(self) -> str: ...
    def getUpVectorTargetNodeWeight(self, node: vrdNode) -> float: ...
    def getUpVectorTargetNodes(self) -> List[vrdNode]: ...
    def getVisibilityFlag(self) -> bool: ...
    def getWorldBoundingBox(self) -> vrdBoundingBox: ...
    def getWorldTransform(self) -> QMatrix4x4: ...
    def hasParent(self, parent: vrdNode) -> bool: ...
    def isActive(self) -> bool: ...
    def isEditable(self) -> bool: ...
    def isEditedAsset(self) -> bool: ...
    def isGroup(self) -> bool: ...
    def isImplicitShared(self) -> bool: ...
    def isNull(self) -> bool: ...
    def isShared(self) -> bool: ...
    def isSharedWith(self, node: vrdNode) -> bool: ...
    def isSynchronized(self) -> bool: ...
    def isType(self, arg__1: object) -> bool: ...
    def isValid(self) -> bool: ...
    def isVisible(self) -> bool: ...
    def setActive(self, value: bool) -> None: ...
    def setConstrainedNode(self, node: vrdNode) -> None: ...
    def setLocked(self, locked: bool) -> None: ...
    def setName(self, name: str) -> None: ...
    def setSelectableFlag(self, selectable: bool) -> None: ...
    def setTargetNodeWeight(self, node: vrdNode, weight: float) -> None: ...
    def setTargetNodes(self, nodes: Sequence[vrdNode]) -> None: ...
    def setUpVectorTargetNodeWeight(self, node: vrdNode, weight: float) -> None: ...
    def setUpVectorTargetNodes(self, nodes: Sequence[vrdNode]) -> None: ...
    def setVisibilityFlag(self, visible: bool) -> None: ...

class vrdAnalyticSettings:
    __doc__: NoneType
    __module__: str
    useRealisticSettingsProperty: str
    diffuseColorProperty: str
    glossyColorProperty: str
    emissiveColorProperty: str
    shininessProperty: str
    transparencyProperty: str
    def __copy__(self) -> None: ...
    def __delattr__(self) -> None: ...
    def __dir__(self, /): ...
    def __eq__(self) -> None: ...
    def __format__(self, format_spec, /): ...
    def __ge__(self) -> None: ...
    def __getattribute__(self) -> None: ...
    def __getstate__(self, /): ...
    def __gt__(self) -> None: ...
    def __hash__(self) -> None: ...
    def __init__(self) -> None: ...
    def __init_subclass__(cls) -> None: ...
    def __le__(self) -> None: ...
    def __lshift__(self) -> None: ...
    def __lt__(self) -> None: ...
    def __ne__(self) -> None: ...
    def __new__(cls) -> None: ...
    def __reduce__(self, /): ...
    def __reduce_ex__(self, protocol, /): ...
    def __repr__(self) -> None: ...
    def __rlshift__(self) -> None: ...
    def __rrshift__(self) -> None: ...
    def __rshift__(self) -> None: ...
    def __setattr__(self) -> None: ...
    def __sizeof__(self, /): ...
    def __str__(self) -> None: ...
    def __subclasshook__(self) -> None: ...
    def asType(self, arg__1: object) -> object: ...
    def getDiffuseColor(self) -> QVector3D: ...
    def getEmissiveColor(self) -> QVector3D: ...
    def getGlossyColor(self) -> QVector3D: ...
    def getObjectId(self) -> int: ...
    def getShininess(self) -> float: ...
    def getTransparency(self) -> float: ...
    def getUseRealisticSettings(self) -> bool: ...
    def isNull(self) -> bool: ...
    def isType(self, arg__1: object) -> bool: ...
    def isValid(self) -> bool: ...
    def setDiffuseColor(self, value: QVector3D) -> None: ...
    def setEmissiveColor(self, value: QVector3D) -> None: ...
    def setGlossyColor(self, value: QVector3D) -> None: ...
    def setShininess(self, value: float) -> None: ...
    def setTransparency(self, value: float) -> None: ...
    def setUseRealisticSettings(self, s: bool) -> None: ...

class vrdAnnotationNode:
    __doc__: NoneType
    __module__: str
    textProperty: str
    positionProperty: str
    sizeProperty: str
    nearScaleLimitProperty: str
    farScaleLimitProperty: str
    sceneNodeProperty: str
    useSceneNodeVisibilityProperty: str
    lineColorProperty: str
    fontColorProperty: str
    backgroundColorProperty: str
    def __copy__(self) -> None: ...
    def __delattr__(self) -> None: ...
    def __dir__(self, /): ...
    def __eq__(self) -> None: ...
    def __format__(self, format_spec, /): ...
    def __ge__(self) -> None: ...
    def __getattribute__(self) -> None: ...
    def __getstate__(self, /): ...
    def __gt__(self) -> None: ...
    def __hash__(self) -> None: ...
    def __init__(self) -> None: ...
    def __init_subclass__(cls) -> None: ...
    def __le__(self) -> None: ...
    def __lshift__(self) -> None: ...
    def __lt__(self) -> None: ...
    def __ne__(self) -> None: ...
    def __new__(cls) -> None: ...
    def __reduce__(self, /): ...
    def __reduce_ex__(self, protocol, /): ...
    def __repr__(self) -> None: ...
    def __rlshift__(self) -> None: ...
    def __rrshift__(self) -> None: ...
    def __rshift__(self) -> None: ...
    def __setattr__(self) -> None: ...
    def __sizeof__(self, /): ...
    def __str__(self) -> None: ...
    def __subclasshook__(self) -> None: ...
    def applyMaterial(self, material: vrdMaterial) -> None: ...
    def asType(self, arg__1: object) -> object: ...
    def getBackgroundColor(self) -> QColor: ...
    def getBoundingBox(self) -> vrdBoundingBox: ...
    def getChild(self, index: int) -> vrdNode: ...
    def getChildCount(self) -> int: ...
    def getChildIndex(self, child: vrdNode) -> int: ...
    def getChildren(self) -> List[vrdNode]: ...
    def getChildrenRecursive(self) -> List[vrdNode]: ...
    def getChildrenRef(self) -> vrdNodeList: ...
    def getFarScaleLimit(self) -> float: ...
    def getFontColor(self) -> QColor: ...
    def getLineColor(self) -> QColor: ...
    def getLocked(self) -> bool: ...
    def getMaterial(self) -> vrdMaterial: ...
    def getName(self) -> str: ...
    def getNearScaleLimit(self) -> float: ...
    def getObjectId(self) -> int: ...
    def getOrCreateTransformNode(self) -> vrdNode: ...
    def getParent(self) -> vrdNode: ...
    def getPath(self) -> str: ...
    def getPosition(self) -> QVector3D: ...
    def getSceneNode(self) -> vrdNode: ...
    def getSelectableFlag(self) -> bool: ...
    def getSharedNodes(self) -> List[vrdNode]: ...
    def getSize(self) -> float: ...
    def getSynchronizedNodes(self) -> List[vrdNode]: ...
    def getText(self) -> str: ...
    def getUniquePath(self) -> str: ...
    def getUseSceneNodeVisibility(self) -> bool: ...
    def getVisibilityFlag(self) -> bool: ...
    def getWorldBoundingBox(self) -> vrdBoundingBox: ...
    def getWorldTransform(self) -> QMatrix4x4: ...
    def hasParent(self, parent: vrdNode) -> bool: ...
    def isEditable(self) -> bool: ...
    def isEditedAsset(self) -> bool: ...
    def isGroup(self) -> bool: ...
    def isImplicitShared(self) -> bool: ...
    def isNull(self) -> bool: ...
    def isShared(self) -> bool: ...
    def isSharedWith(self, node: vrdNode) -> bool: ...
    def isSynchronized(self) -> bool: ...
    def isType(self, arg__1: object) -> bool: ...
    def isValid(self) -> bool: ...
    def isVisible(self) -> bool: ...
    def setBackgroundColor(self, color: Union[QColor, QRgba64, Any, Qt.GlobalColor, str, int]) -> None: ...
    def setFarScaleLimit(self, value: float) -> None: ...
    def setFontColor(self, color: Union[QColor, QRgba64, Any, Qt.GlobalColor, str, int]) -> None: ...
    def setLineColor(self, color: Union[QColor, QRgba64, Any, Qt.GlobalColor, str, int]) -> None: ...
    def setLocked(self, locked: bool) -> None: ...
    def setName(self, name: str) -> None: ...
    def setNearScaleLimit(self, value: float) -> None: ...
    def setPosition(self, worldPosition: QVector3D) -> None: ...
    def setSceneNode(self, node: vrdNode) -> None: ...
    def setSelectableFlag(self, selectable: bool) -> None: ...
    def setSize(self, size: float) -> None: ...
    def setText(self, text: str) -> None: ...
    def setUseSceneNodeVisibility(self, enabled: bool) -> None: ...
    def setVisibilityFlag(self, visible: bool) -> None: ...
    def zoomTo(self) -> None: ...

class vrdAreaLightCone:
    __doc__: NoneType
    __module__: str
    useConeAngleProperty: str
    coneAngleProperty: str
    penumbraAngleProperty: str
    def __copy__(self) -> None: ...
    def __delattr__(self) -> None: ...
    def __dir__(self, /): ...
    def __eq__(self) -> None: ...
    def __format__(self, format_spec, /): ...
    def __ge__(self) -> None: ...
    def __getattribute__(self) -> None: ...
    def __getstate__(self, /): ...
    def __gt__(self) -> None: ...
    def __hash__(self) -> None: ...
    def __init__(self) -> None: ...
    def __init_subclass__(cls) -> None: ...
    def __le__(self) -> None: ...
    def __lshift__(self) -> None: ...
    def __lt__(self) -> None: ...
    def __ne__(self) -> None: ...
    def __new__(cls) -> None: ...
    def __reduce__(self, /): ...
    def __reduce_ex__(self, protocol, /): ...
    def __repr__(self) -> None: ...
    def __rlshift__(self) -> None: ...
    def __rrshift__(self) -> None: ...
    def __rshift__(self) -> None: ...
    def __setattr__(self) -> None: ...
    def __sizeof__(self, /): ...
    def __str__(self) -> None: ...
    def __subclasshook__(self) -> None: ...
    def asType(self, arg__1: object) -> object: ...
    def getConeAngle(self) -> float: ...
    def getObjectId(self) -> int: ...
    def getPenumbraAngle(self) -> float: ...
    def getUseConeAngle(self) -> bool: ...
    def isNull(self) -> bool: ...
    def isType(self, arg__1: object) -> bool: ...
    def isValid(self) -> bool: ...
    def setConeAngle(self, angle: float) -> None: ...
    def setPenumbraAngle(self, angle: float) -> None: ...
    def setUseConeAngle(self, use: bool) -> None: ...

class vrdAreaLightNode:
    __doc__: NoneType
    __module__: str
    Accurate: QualityMode
    Approximated: QualityMode
    localLightProperty: str
    illuminateSceneProperty: str
    primaryVisibilityProperty: str
    visibleInReflectionsProperty: str
    interactiveQualityProperty: str
    stillFrameQualityProperty: str
    interactiveModeProperty: str
    stillFrameModeProperty: str
    attenuationProperty: str
    textureProperty: str
    lightProfileProperty: str
    shadowMapProperty: str
    def QualityMode(self) -> None: ...
    def __copy__(self) -> None: ...
    def __delattr__(self) -> None: ...
    def __dir__(self, /): ...
    def __eq__(self) -> None: ...
    def __format__(self, format_spec, /): ...
    def __ge__(self) -> None: ...
    def __getattribute__(self) -> None: ...
    def __getstate__(self, /): ...
    def __gt__(self) -> None: ...
    def __hash__(self) -> None: ...
    def __init__(self) -> None: ...
    def __init_subclass__(cls) -> None: ...
    def __le__(self) -> None: ...
    def __lshift__(self) -> None: ...
    def __lt__(self) -> None: ...
    def __ne__(self) -> None: ...
    def __new__(cls) -> None: ...
    def __reduce__(self, /): ...
    def __reduce_ex__(self, protocol, /): ...
    def __repr__(self) -> None: ...
    def __rlshift__(self) -> None: ...
    def __rrshift__(self) -> None: ...
    def __rshift__(self) -> None: ...
    def __setattr__(self) -> None: ...
    def __sizeof__(self, /): ...
    def __str__(self) -> None: ...
    def __subclasshook__(self) -> None: ...
    def applyMaterial(self, material: vrdMaterial) -> None: ...
    def asType(self, arg__1: object) -> object: ...
    def captureTransformVariant(self, name: str) -> None: ...
    def deleteTransformVariant(self, variant: vrdTransformNodeVariant) -> None: ...
    def findTransformVariant(self, name: str) -> vrdTransformNodeVariant: ...
    def getAttenuation(self) -> vrLightTypes.Attenuation: ...
    def getBakeLayer(self) -> int: ...
    def getBoundingBox(self) -> vrdBoundingBox: ...
    def getCastShadowOnShadowMaterial(self) -> bool: ...
    def getChild(self, index: int) -> vrdNode: ...
    def getChildCount(self) -> int: ...
    def getChildIndex(self, child: vrdNode) -> int: ...
    def getChildren(self) -> List[vrdNode]: ...
    def getChildrenRecursive(self) -> List[vrdNode]: ...
    def getChildrenRef(self) -> vrdNodeList: ...
    def getDiffuseColor(self) -> QVector3D: ...
    def getDiffuseColorSpectrum(self) -> vrSpectrum: ...
    def getEulerRotationOrder(self) -> vrTransformTypes.EulerRotationOrder: ...
    def getGlossyColor(self) -> QVector3D: ...
    def getGlossyColorSpectrum(self) -> vrSpectrum: ...
    def getGroundShadowIntensity(self) -> float: ...
    def getIlluminateScene(self) -> bool: ...
    def getIlluminateShadowMaterial(self) -> bool: ...
    def getImportanceMultiplier(self) -> float: ...
    def getIntensity(self) -> float: ...
    def getInteractiveMode(self) -> vrdAreaLightNode.QualityMode: ...
    def getInteractiveQuality(self) -> int: ...
    def getIsPhysicallyBased(self) -> bool: ...
    def getLightProfile(self) -> vrdLightProfile: ...
    def getLightTransform(self) -> vrdLightTransform: ...
    def getLightUnit(self) -> vrLightTypes.Unit: ...
    def getLocalLight(self) -> bool: ...
    def getLocked(self) -> bool: ...
    def getMaterial(self) -> vrdMaterial: ...
    def getMaterialShadowIntensity(self) -> float: ...
    def getModuleNode(self) -> vrdBaseLightNode: ...
    def getName(self) -> str: ...
    def getObjectId(self) -> int: ...
    def getOn(self) -> bool: ...
    def getOrCreateTransformNode(self) -> vrdNode: ...
    def getParent(self) -> vrdNode: ...
    def getPath(self) -> str: ...
    def getPrimaryVisibility(self) -> bool: ...
    def getRotatePivot(self) -> QVector3D: ...
    def getRotatePivotTranslation(self) -> QVector3D: ...
    def getRotationAsEuler(self) -> QVector3D: ...
    def getRotationAsQuaternion(self) -> QQuaternion: ...
    def getRotationOrientationAsEuler(self) -> QVector3D: ...
    def getRotationOrientationAsQuaternion(self) -> QQuaternion: ...
    def getScale(self) -> QVector3D: ...
    def getScalePivot(self) -> QVector3D: ...
    def getScalePivotTranslation(self) -> QVector3D: ...
    def getSelectableFlag(self) -> bool: ...
    def getShadowMap(self) -> vrdShadowMap: ...
    def getSharedNodes(self) -> List[vrdNode]: ...
    def getShear(self) -> QVector3D: ...
    def getStillFrameMode(self) -> vrdAreaLightNode.QualityMode: ...
    def getStillFrameQuality(self) -> int: ...
    def getSynchronizedNodes(self) -> List[vrdNode]: ...
    def getTemperature(self) -> int: ...
    def getTexture(self) -> vrdLightTexture: ...
    def getTransform(self) -> QMatrix4x4: ...
    def getTransformVariants(self) -> List[vrdTransformNodeVariant]: ...
    def getTranslation(self) -> QVector3D: ...
    def getUniquePath(self) -> str: ...
    def getUseLightTemperature(self) -> bool: ...
    def getVisibilityFlag(self) -> bool: ...
    def getVisibleInReflections(self) -> bool: ...
    def getVisualizationVisible(self) -> bool: ...
    def getVolumeIlluminationMode(self) -> vrLightTypes.VolumeIlluminationMode: ...
    def getWorldBoundingBox(self) -> vrdBoundingBox: ...
    def getWorldRotatePivot(self) -> QVector3D: ...
    def getWorldScalePivot(self) -> QVector3D: ...
    def getWorldTransform(self) -> QMatrix4x4: ...
    def getWorldTranslation(self) -> QVector3D: ...
    def hasParent(self, parent: vrdNode) -> bool: ...
    def isEditable(self) -> bool: ...
    def isEditedAsset(self) -> bool: ...
    def isGroup(self) -> bool: ...
    def isImplicitShared(self) -> bool: ...
    def isNull(self) -> bool: ...
    def isShared(self) -> bool: ...
    def isSharedWith(self, node: vrdNode) -> bool: ...
    def isSynchronized(self) -> bool: ...
    def isType(self, arg__1: object) -> bool: ...
    def isValid(self) -> bool: ...
    def isVisible(self) -> bool: ...
    def resetTransformation(self) -> None: ...
    def setAttenuation(self, attenuation: vrLightTypes.Attenuation) -> None: ...
    def setBakeLayer(self, layer: int) -> None: ...
    def setCastShadowOnShadowMaterial(self, castShadow: bool) -> None: ...
    def setDiffuseColor(self, diffuseColor: QVector3D) -> None: ...
    def setDiffuseColorSpectrum(self, spectrum: Union[vrSpectrum, QVector3D]) -> None: ...
    def setEulerRotationOrder(self, rotationOrder: vrTransformTypes.EulerRotationOrder) -> None: ...
    def setGlossyColor(self, glossyColor: QVector3D) -> None: ...
    def setGlossyColorSpectrum(self, spectrum: Union[vrSpectrum, QVector3D]) -> None: ...
    def setGroundShadowIntensity(self, intensity: float) -> None: ...
    def setIlluminateScene(self, illuminateScene: bool) -> None: ...
    def setIlluminateShadowMaterial(self, illuminateShadosMeterial: bool) -> None: ...
    def setImportanceMultiplier(self, importanceMultiplier: float) -> None: ...
    def setIntensity(self, intensity: float) -> None: ...
    def setInteractiveMode(self, value: vrdAreaLightNode.QualityMode) -> None: ...
    def setInteractiveQuality(self, quality: int) -> None: ...
    def setIsPhysicallyBased(self, on: bool) -> None: ...
    def setLightUnit(self, unit: vrLightTypes.Unit) -> None: ...
    def setLocalLight(self, isLocalLight: bool) -> None: ...
    def setLocked(self, locked: bool) -> None: ...
    def setMaterialShadowIntensity(self, intensity: float) -> None: ...
    def setName(self, name: str) -> None: ...
    def setOn(self, on: bool) -> None: ...
    def setPrimaryVisibility(self, visible: bool) -> None: ...
    def setRotatePivot(self, rotatePivot: QVector3D) -> None: ...
    def setRotatePivotTranslation(self, rotatePivotTranslation: QVector3D) -> None: ...
    def setRotationAsEuler(self, rotation: QVector3D) -> None: ...
    def setRotationAsQuaternion(self, rotation: QQuaternion) -> None: ...
    def setRotationOrientationAsEuler(self, rotationOrientation: QVector3D) -> None: ...
    def setRotationOrientationAsQuaternion(self, orientation: QQuaternion) -> None: ...
    def setScale(self, scale: QVector3D) -> None: ...
    def setScalePivot(self, scalePivot: QVector3D) -> None: ...
    def setScalePivotTranslation(self, scalePivotTranslation: QVector3D) -> None: ...
    def setSelectableFlag(self, selectable: bool) -> None: ...
    def setShear(self, shear: QVector3D) -> None: ...
    def setStillFrameMode(self, value: vrdAreaLightNode.QualityMode) -> None: ...
    def setStillFrameQuality(self, quality: int) -> None: ...
    def setTemperature(self, kelvin: int) -> None: ...
    def setTransform(self, matrix: Union[QMatrix4x4, QTransform]) -> None: ...
    def setTranslation(self, translation: QVector3D) -> None: ...
    def setUseLightTemperature(self, use: bool) -> None: ...
    def setVisibilityFlag(self, visible: bool) -> None: ...
    def setVisibleInReflections(self, visible: bool) -> None: ...
    def setVisualizationVisible(self, showVisualization: bool) -> None: ...
    def setVolumeIlluminationMode(self, mode: vrLightTypes.VolumeIlluminationMode) -> None: ...
    def setWorldRotatePivot(self, rotatePivot: QVector3D) -> None: ...
    def setWorldScalePivot(self, scalePivot: QVector3D) -> None: ...
    def setWorldTransform(self, matrix: Union[QMatrix4x4, QTransform]) -> None: ...
    def setWorldTranslation(self, translation: QVector3D) -> None: ...

class vrdAtfSettings:
    __doc__: NoneType
    __module__: str
    CreateNoReference: SourceReferenceBehavior
    CreateSourceReference: SourceReferenceBehavior
    KeepSmartReference: SmartReferenceBehavior
    RemoveSmartReference: SmartReferenceBehavior
    Lightweight: ImporterVersion
    Legacy: ImporterVersion
    importSurfacesProperty: str
    importInvisibleSurfacesProperty: str
    importMeshesProperty: str
    importInvisibleMeshesProperty: str
    importGroupMaterialsProperty: str
    importAssociativeMeshesProperty: str
    importMeshLODsProperty: str
    jtToolkitProperty: str
    importCurvesProperty: str
    importInvisibleCurvesProperty: str
    importInvisibleInstancesProperty: str
    importReferencedFilesProperty: str
    importTemplateGeometriesProperty: str
    importLightsProperty: str
    importCamerasProperty: str
    importVariantsProperty: str
    importCoordSystemsProperty: str
    disableMultithreadedImportProperty: str
    fixSurfaceOrientationProperty: str
    chordDeviationProperty: str
    maxChordLengthProperty: str
    normalToleranceProperty: str
    stitchingToleranceProperty: str
    useStitchingProperty: str
    robustTessellationProperty: str
    keepNurbsProperty: str
    mergeGeometriesProperty: str
    removeEmptyGroupsProperty: str
    unshareNodesProperty: str
    flushTransformationsProperty: str
    createLayerGroupsProperty: str
    importEmptyLayersProperty: str
    importLayerFoldersProperty: str
    useLegacyLoaderProperty: str
    sourceReferenceBehaviorProperty: str
    smartReferenceBehaviorProperty: str
    importAsSmartReferenceProperty: str
    mergeSubReferenceMaterialsProperty: str
    importerVersionProperty: str
    useHealStitchProperty: str
    importMetadataProperty: str
    importColorsProperty: str
    def ImporterVersion(self) -> None: ...
    def SmartReferenceBehavior(self) -> None: ...
    def SourceReferenceBehavior(self) -> None: ...
    def __copy__(self) -> None: ...
    def __delattr__(self) -> None: ...
    def __dir__(self, /): ...
    def __eq__(self) -> None: ...
    def __format__(self, format_spec, /): ...
    def __ge__(self) -> None: ...
    def __getattribute__(self) -> None: ...
    def __getstate__(self, /): ...
    def __gt__(self) -> None: ...
    def __hash__(self) -> None: ...
    def __init__(self) -> None: ...
    def __init_subclass__(cls) -> None: ...
    def __le__(self) -> None: ...
    def __lt__(self) -> None: ...
    def __ne__(self) -> None: ...
    def __new__(cls) -> None: ...
    def __reduce__(self, /): ...
    def __reduce_ex__(self, protocol, /): ...
    def __repr__(self) -> None: ...
    def __setattr__(self) -> None: ...
    def __sizeof__(self, /): ...
    def __str__(self) -> None: ...
    def __subclasshook__(self) -> None: ...
    def getChordDeviation(self) -> float: ...
    def getCreateLayerGroups(self) -> bool: ...
    def getDisableMultithreadedImport(self) -> bool: ...
    def getFixSurfaceOrientation(self) -> bool: ...
    def getFlushTransformations(self) -> bool: ...
    def getImportAsSmartReference(self) -> bool: ...
    def getImportAssociativeMeshes(self) -> bool: ...
    def getImportCameras(self) -> bool: ...
    def getImportColors(self) -> bool: ...
    def getImportCoordSystems(self) -> bool: ...
    def getImportCurves(self) -> bool: ...
    def getImportEmptyLayers(self) -> bool: ...
    def getImportGroupMaterials(self) -> bool: ...
    def getImportInvisibleCurves(self) -> bool: ...
    def getImportInvisibleInstances(self) -> bool: ...
    def getImportInvisibleMeshes(self) -> bool: ...
    def getImportInvisibleSurfaces(self) -> bool: ...
    def getImportLayerFolders(self) -> bool: ...
    def getImportLights(self) -> bool: ...
    def getImportMeshLODs(self) -> int: ...
    def getImportMeshes(self) -> bool: ...
    def getImportMetadata(self) -> bool: ...
    def getImportReferencedFiles(self) -> bool: ...
    def getImportSurfaces(self) -> bool: ...
    def getImportTemplateGeometries(self) -> bool: ...
    def getImportVariants(self) -> bool: ...
    def getImporterVersion(self) -> vrdAtfSettings.ImporterVersion: ...
    def getJtToolkit(self) -> int: ...
    def getKeepNurbs(self) -> bool: ...
    def getMaxChordLength(self) -> float: ...
    def getMergeGeometries(self) -> bool: ...
    def getMergeSubReferenceMaterials(self) -> bool: ...
    def getNormalTolerance(self) -> float: ...
    def getReduceKeyframes(self) -> bool: ...
    def getRemoveEmptyGroups(self) -> bool: ...
    def getRobustTessellation(self) -> bool: ...
    def getSmartReferenceBehavior(self) -> vrdAtfSettings.SmartReferenceBehavior: ...
    def getSourceReferenceBehavior(self) -> vrdAtfSettings.SourceReferenceBehavior: ...
    def getStitchingTolerance(self) -> float: ...
    def getUnshareNodes(self) -> bool: ...
    def getUseHealStitch(self) -> bool: ...
    def getUseLegacyLoader(self) -> bool: ...
    def getUseStitching(self) -> bool: ...
    def setChordDeviation(self, chordDeviation: float) -> None: ...
    def setCreateLayerGroups(self, create: bool) -> None: ...
    def setDisableMultithreadedImport(self, value: bool) -> None: ...
    def setFixSurfaceOrientation(self, fix: bool) -> None: ...
    def setFlushTransformations(self, flush: bool) -> None: ...
    def setImportAsSmartReference(self, create: bool) -> None: ...
    def setImportAssociativeMeshes(self, import_: bool) -> None: ...
    def setImportCameras(self, import_: bool) -> None: ...
    def setImportColors(self, import_: bool) -> None: ...
    def setImportCoordSystems(self, import_: bool) -> None: ...
    def setImportCurves(self, import_: bool) -> None: ...
    def setImportEmptyLayers(self, import_: bool) -> None: ...
    def setImportGroupMaterials(self, import_: bool) -> None: ...
    def setImportInvisibleCurves(self, import_: bool) -> None: ...
    def setImportInvisibleInstances(self, import_: bool) -> None: ...
    def setImportInvisibleMeshes(self, import_: bool) -> None: ...
    def setImportInvisibleSurfaces(self, import_: bool) -> None: ...
    def setImportLayerFolders(self, import_: bool) -> None: ...
    def setImportLights(self, import_: bool) -> None: ...
    def setImportMeshLODs(self, lodOption: int) -> None: ...
    def setImportMeshes(self, import_: bool) -> None: ...
    def setImportMetadata(self, import_: bool) -> None: ...
    def setImportReferencedFiles(self, import_: bool) -> None: ...
    def setImportSurfaces(self, import_: bool) -> None: ...
    def setImportTemplateGeometries(self, import_: bool) -> None: ...
    def setImportVariants(self, import_: bool) -> None: ...
    def setImporterVersion(self, version: vrdAtfSettings.ImporterVersion) -> None: ...
    def setJtToolkit(self, toolkit: int) -> None: ...
    def setKeepNurbs(self, keep: bool) -> None: ...
    def setMaxChordLength(self, chordLength: float) -> None: ...
    def setMergeGeometries(self, merge: bool) -> None: ...
    def setMergeSubReferenceMaterials(self, optimize: bool) -> None: ...
    def setNormalTolerance(self, tolerance: float) -> None: ...
    def setReduceKeyframes(self, reduce: bool) -> None: ...
    def setRemoveEmptyGroups(self, remove: bool) -> None: ...
    def setRobustTessellation(self, value: bool) -> None: ...
    def setSmartReferenceBehavior(self, behavior: vrdAtfSettings.SmartReferenceBehavior) -> None: ...
    def setSourceReferenceBehavior(self, behavior: vrdAtfSettings.SourceReferenceBehavior) -> None: ...
    def setStitchingTolerance(self, tolerance: float) -> None: ...
    def setUnshareNodes(self, unshare: bool) -> None: ...
    def setUseHealStitch(self, value: bool) -> None: ...
    def setUseLegacyLoader(self, useLegacy: bool) -> None: ...
    def setUseStitching(self, stitch: bool) -> None: ...

class vrdBRDFCommonSettings:
    __doc__: NoneType
    __module__: str
    IBLIndirectDirect: LightingMode
    IBLIndirect: LightingMode
    IBLDirect: LightingMode
    IBL: LightingMode
    Direct: LightingMode
    VrsOff: VrsQuality
    VrsNative1x1: VrsQuality
    VrsCoarse2x2: VrsQuality
    VrsCoarse4x4: VrsQuality
    VrsSupersampling2x: VrsQuality
    VrsSupersampling4x: VrsQuality
    VrsSupersampling8x: VrsQuality
    occlusionColorProperty: str
    occlusionColorSpectrumProperty: str
    occlusionIntensityProperty: str
    sortKeyProperty: str
    environmentProperty: str
    lightingModeProperty: str
    vrsQualityProperty: str
    def LightingMode(self) -> None: ...
    def VrsQuality(self) -> None: ...
    def __copy__(self) -> None: ...
    def __delattr__(self) -> None: ...
    def __dir__(self, /): ...
    def __eq__(self) -> None: ...
    def __format__(self, format_spec, /): ...
    def __ge__(self) -> None: ...
    def __getattribute__(self) -> None: ...
    def __getstate__(self, /): ...
    def __gt__(self) -> None: ...
    def __hash__(self) -> None: ...
    def __init__(self) -> None: ...
    def __init_subclass__(cls) -> None: ...
    def __le__(self) -> None: ...
    def __lshift__(self) -> None: ...
    def __lt__(self) -> None: ...
    def __ne__(self) -> None: ...
    def __new__(cls) -> None: ...
    def __reduce__(self, /): ...
    def __reduce_ex__(self, protocol, /): ...
    def __repr__(self) -> None: ...
    def __rlshift__(self) -> None: ...
    def __rrshift__(self) -> None: ...
    def __rshift__(self) -> None: ...
    def __setattr__(self) -> None: ...
    def __sizeof__(self, /): ...
    def __str__(self) -> None: ...
    def __subclasshook__(self) -> None: ...
    def asType(self, arg__1: object) -> object: ...
    def getEnvironment(self) -> vrdMaterial: ...
    def getLightingMode(self) -> vrdBRDFCommonSettings.LightingMode: ...
    def getObjectId(self) -> int: ...
    def getOcclusionColor(self) -> QVector3D: ...
    def getOcclusionColorSpectrum(self) -> vrSpectrum: ...
    def getOcclusionIntensity(self) -> float: ...
    def getSortKey(self) -> int: ...
    def getVrsQuality(self) -> vrdBRDFCommonSettings.VrsQuality: ...
    def isNull(self) -> bool: ...
    def isType(self, arg__1: object) -> bool: ...
    def isValid(self) -> bool: ...
    def setEnvironment(self, envMat: vrdMaterial) -> None: ...
    def setLightingMode(self, mode: vrdBRDFCommonSettings.LightingMode) -> None: ...
    def setOcclusionColor(self, value: QVector3D) -> None: ...
    def setOcclusionColorSpectrum(self, value: Union[vrSpectrum, QVector3D]) -> None: ...
    def setOcclusionIntensity(self, value: float) -> None: ...
    def setSortKey(self, value: int) -> None: ...
    def setVrsQuality(self, quality: vrdBRDFCommonSettings.VrsQuality) -> None: ...

class vrdBRDFMaterial:
    __doc__: NoneType
    __module__: str
    displacementActiveProperty: str
    analyticProperty: str
    nPRProperty: str
    commonProperty: str
    transparencyProperty: str
    roundedEdgesProperty: str
    raytracingProperty: str
    def __copy__(self) -> None: ...
    def __delattr__(self) -> None: ...
    def __dir__(self, /): ...
    def __eq__(self) -> None: ...
    def __format__(self, format_spec, /): ...
    def __ge__(self) -> None: ...
    def __getattribute__(self) -> None: ...
    def __getstate__(self, /): ...
    def __gt__(self) -> None: ...
    def __hash__(self) -> None: ...
    def __init__(self) -> None: ...
    def __init_subclass__(cls) -> None: ...
    def __le__(self) -> None: ...
    def __lshift__(self) -> None: ...
    def __lt__(self) -> None: ...
    def __ne__(self) -> None: ...
    def __new__(cls) -> None: ...
    def __reduce__(self, /): ...
    def __reduce_ex__(self, protocol, /): ...
    def __repr__(self) -> None: ...
    def __rlshift__(self) -> None: ...
    def __rrshift__(self) -> None: ...
    def __rshift__(self) -> None: ...
    def __setattr__(self) -> None: ...
    def __sizeof__(self, /): ...
    def __str__(self) -> None: ...
    def __subclasshook__(self) -> None: ...
    def asType(self, arg__1: object) -> object: ...
    def duplicate(self, name: str = '') -> vrdMaterial: ...
    def getAnalytic(self) -> vrdAnalyticSettings: ...
    def getCommon(self) -> vrdBRDFCommonSettings: ...
    def getIcon(self) -> QIcon: ...
    def getLocked(self) -> bool: ...
    def getNPR(self) -> vrdNPRSettings: ...
    def getName(self) -> str: ...
    def getObjectId(self) -> int: ...
    def getPreview(self) -> QImage: ...
    def getPreviewScene(self) -> str: ...
    def getRaytracing(self) -> vrdMaterialRaytracingSettings: ...
    def getRoundedEdges(self) -> vrdRoundedEdges: ...
    def getTextures(self) -> List[vrdTexture]: ...
    def getTransparency(self) -> vrdTransparency: ...
    def isAsset(self) -> bool: ...
    def isComponent(self) -> bool: ...
    def isDisplacementActive(self) -> bool: ...
    def isEditable(self) -> bool: ...
    def isEditedAsset(self) -> bool: ...
    def isNull(self) -> bool: ...
    def isType(self, arg__1: object) -> bool: ...
    def isValid(self) -> bool: ...
    def setInlineAllImageSequences(self, value: bool) -> List[vrdImage]: ...
    def setLocked(self, locked: bool) -> None: ...
    def setName(self, name: str) -> None: ...
    def setPreviewScene(self, name: str) -> None: ...

class vrdBaseLightNode:
    __doc__: NoneType
    __module__: str
    onProperty: str
    volumeIlluminationModeProperty: str
    castShadowOnShadowMaterialProperty: str
    illuminateShadowMaterialProperty: str
    intensityProperty: str
    diffuseColorProperty: str
    diffuseColorSpectrumProperty: str
    glossyColorProperty: str
    glossyColorSpectrumProperty: str
    importanceMultiplierProperty: str
    materialShadowIntensityProperty: str
    groundShadowIntensityProperty: str
    visualizationVisibleProperty: str
    isPhysicallyBasedProperty: str
    lightUnitProperty: str
    useLightTemperatureProperty: str
    temperatureProperty: str
    lightTransformProperty: str
    bakeLayerProperty: str
    def __copy__(self) -> None: ...
    def __delattr__(self) -> None: ...
    def __dir__(self, /): ...
    def __eq__(self) -> None: ...
    def __format__(self, format_spec, /): ...
    def __ge__(self) -> None: ...
    def __getattribute__(self) -> None: ...
    def __getstate__(self, /): ...
    def __gt__(self) -> None: ...
    def __hash__(self) -> None: ...
    def __init__(self) -> None: ...
    def __init_subclass__(cls) -> None: ...
    def __le__(self) -> None: ...
    def __lshift__(self) -> None: ...
    def __lt__(self) -> None: ...
    def __ne__(self) -> None: ...
    def __new__(cls) -> None: ...
    def __reduce__(self, /): ...
    def __reduce_ex__(self, protocol, /): ...
    def __repr__(self) -> None: ...
    def __rlshift__(self) -> None: ...
    def __rrshift__(self) -> None: ...
    def __rshift__(self) -> None: ...
    def __setattr__(self) -> None: ...
    def __sizeof__(self, /): ...
    def __str__(self) -> None: ...
    def __subclasshook__(self) -> None: ...
    def applyMaterial(self, material: vrdMaterial) -> None: ...
    def asType(self, arg__1: object) -> object: ...
    def captureTransformVariant(self, name: str) -> None: ...
    def deleteTransformVariant(self, variant: vrdTransformNodeVariant) -> None: ...
    def findTransformVariant(self, name: str) -> vrdTransformNodeVariant: ...
    def getBakeLayer(self) -> int: ...
    def getBoundingBox(self) -> vrdBoundingBox: ...
    def getCastShadowOnShadowMaterial(self) -> bool: ...
    def getChild(self, index: int) -> vrdNode: ...
    def getChildCount(self) -> int: ...
    def getChildIndex(self, child: vrdNode) -> int: ...
    def getChildren(self) -> List[vrdNode]: ...
    def getChildrenRecursive(self) -> List[vrdNode]: ...
    def getChildrenRef(self) -> vrdNodeList: ...
    def getDiffuseColor(self) -> QVector3D: ...
    def getDiffuseColorSpectrum(self) -> vrSpectrum: ...
    def getEulerRotationOrder(self) -> vrTransformTypes.EulerRotationOrder: ...
    def getGlossyColor(self) -> QVector3D: ...
    def getGlossyColorSpectrum(self) -> vrSpectrum: ...
    def getGroundShadowIntensity(self) -> float: ...
    def getIlluminateShadowMaterial(self) -> bool: ...
    def getImportanceMultiplier(self) -> float: ...
    def getIntensity(self) -> float: ...
    def getIsPhysicallyBased(self) -> bool: ...
    def getLightTransform(self) -> vrdLightTransform: ...
    def getLightUnit(self) -> vrLightTypes.Unit: ...
    def getLocked(self) -> bool: ...
    def getMaterial(self) -> vrdMaterial: ...
    def getMaterialShadowIntensity(self) -> float: ...
    def getModuleNode(self) -> vrdBaseLightNode: ...
    def getName(self) -> str: ...
    def getObjectId(self) -> int: ...
    def getOn(self) -> bool: ...
    def getOrCreateTransformNode(self) -> vrdNode: ...
    def getParent(self) -> vrdNode: ...
    def getPath(self) -> str: ...
    def getRotatePivot(self) -> QVector3D: ...
    def getRotatePivotTranslation(self) -> QVector3D: ...
    def getRotationAsEuler(self) -> QVector3D: ...
    def getRotationAsQuaternion(self) -> QQuaternion: ...
    def getRotationOrientationAsEuler(self) -> QVector3D: ...
    def getRotationOrientationAsQuaternion(self) -> QQuaternion: ...
    def getScale(self) -> QVector3D: ...
    def getScalePivot(self) -> QVector3D: ...
    def getScalePivotTranslation(self) -> QVector3D: ...
    def getSelectableFlag(self) -> bool: ...
    def getSharedNodes(self) -> List[vrdNode]: ...
    def getShear(self) -> QVector3D: ...
    def getSynchronizedNodes(self) -> List[vrdNode]: ...
    def getTemperature(self) -> int: ...
    def getTransform(self) -> QMatrix4x4: ...
    def getTransformVariants(self) -> List[vrdTransformNodeVariant]: ...
    def getTranslation(self) -> QVector3D: ...
    def getUniquePath(self) -> str: ...
    def getUseLightTemperature(self) -> bool: ...
    def getVisibilityFlag(self) -> bool: ...
    def getVisualizationVisible(self) -> bool: ...
    def getVolumeIlluminationMode(self) -> vrLightTypes.VolumeIlluminationMode: ...
    def getWorldBoundingBox(self) -> vrdBoundingBox: ...
    def getWorldRotatePivot(self) -> QVector3D: ...
    def getWorldScalePivot(self) -> QVector3D: ...
    def getWorldTransform(self) -> QMatrix4x4: ...
    def getWorldTranslation(self) -> QVector3D: ...
    def hasParent(self, parent: vrdNode) -> bool: ...
    def isEditable(self) -> bool: ...
    def isEditedAsset(self) -> bool: ...
    def isGroup(self) -> bool: ...
    def isImplicitShared(self) -> bool: ...
    def isNull(self) -> bool: ...
    def isShared(self) -> bool: ...
    def isSharedWith(self, node: vrdNode) -> bool: ...
    def isSynchronized(self) -> bool: ...
    def isType(self, arg__1: object) -> bool: ...
    def isValid(self) -> bool: ...
    def isVisible(self) -> bool: ...
    def resetTransformation(self) -> None: ...
    def setBakeLayer(self, layer: int) -> None: ...
    def setCastShadowOnShadowMaterial(self, castShadow: bool) -> None: ...
    def setDiffuseColor(self, diffuseColor: QVector3D) -> None: ...
    def setDiffuseColorSpectrum(self, spectrum: Union[vrSpectrum, QVector3D]) -> None: ...
    def setEulerRotationOrder(self, rotationOrder: vrTransformTypes.EulerRotationOrder) -> None: ...
    def setGlossyColor(self, glossyColor: QVector3D) -> None: ...
    def setGlossyColorSpectrum(self, spectrum: Union[vrSpectrum, QVector3D]) -> None: ...
    def setGroundShadowIntensity(self, intensity: float) -> None: ...
    def setIlluminateShadowMaterial(self, illuminateShadosMeterial: bool) -> None: ...
    def setImportanceMultiplier(self, importanceMultiplier: float) -> None: ...
    def setIntensity(self, intensity: float) -> None: ...
    def setIsPhysicallyBased(self, on: bool) -> None: ...
    def setLightUnit(self, unit: vrLightTypes.Unit) -> None: ...
    def setLocked(self, locked: bool) -> None: ...
    def setMaterialShadowIntensity(self, intensity: float) -> None: ...
    def setName(self, name: str) -> None: ...
    def setOn(self, on: bool) -> None: ...
    def setRotatePivot(self, rotatePivot: QVector3D) -> None: ...
    def setRotatePivotTranslation(self, rotatePivotTranslation: QVector3D) -> None: ...
    def setRotationAsEuler(self, rotation: QVector3D) -> None: ...
    def setRotationAsQuaternion(self, rotation: QQuaternion) -> None: ...
    def setRotationOrientationAsEuler(self, rotationOrientation: QVector3D) -> None: ...
    def setRotationOrientationAsQuaternion(self, orientation: QQuaternion) -> None: ...
    def setScale(self, scale: QVector3D) -> None: ...
    def setScalePivot(self, scalePivot: QVector3D) -> None: ...
    def setScalePivotTranslation(self, scalePivotTranslation: QVector3D) -> None: ...
    def setSelectableFlag(self, selectable: bool) -> None: ...
    def setShear(self, shear: QVector3D) -> None: ...
    def setTemperature(self, kelvin: int) -> None: ...
    def setTransform(self, matrix: Union[QMatrix4x4, QTransform]) -> None: ...
    def setTranslation(self, translation: QVector3D) -> None: ...
    def setUseLightTemperature(self, use: bool) -> None: ...
    def setVisibilityFlag(self, visible: bool) -> None: ...
    def setVisualizationVisible(self, showVisualization: bool) -> None: ...
    def setVolumeIlluminationMode(self, mode: vrLightTypes.VolumeIlluminationMode) -> None: ...
    def setWorldRotatePivot(self, rotatePivot: QVector3D) -> None: ...
    def setWorldScalePivot(self, scalePivot: QVector3D) -> None: ...
    def setWorldTransform(self, matrix: Union[QMatrix4x4, QTransform]) -> None: ...
    def setWorldTranslation(self, translation: QVector3D) -> None: ...

class vrdBaseLightProfile:
    __doc__: NoneType
    __module__: str
    def __copy__(self) -> None: ...
    def __delattr__(self) -> None: ...
    def __dir__(self, /): ...
    def __eq__(self) -> None: ...
    def __format__(self, format_spec, /): ...
    def __ge__(self) -> None: ...
    def __getattribute__(self) -> None: ...
    def __getstate__(self, /): ...
    def __gt__(self) -> None: ...
    def __hash__(self) -> None: ...
    def __init__(self) -> None: ...
    def __init_subclass__(cls) -> None: ...
    def __le__(self) -> None: ...
    def __lshift__(self) -> None: ...
    def __lt__(self) -> None: ...
    def __ne__(self) -> None: ...
    def __new__(cls) -> None: ...
    def __reduce__(self, /): ...
    def __reduce_ex__(self, protocol, /): ...
    def __repr__(self) -> None: ...
    def __rlshift__(self) -> None: ...
    def __rrshift__(self) -> None: ...
    def __rshift__(self) -> None: ...
    def __setattr__(self) -> None: ...
    def __sizeof__(self, /): ...
    def __str__(self) -> None: ...
    def __subclasshook__(self) -> None: ...
    def asType(self, arg__1: object) -> object: ...
    def getAbsolutePath(self) -> str: ...
    def getObjectId(self) -> int: ...
    def isNull(self) -> bool: ...
    def isType(self, arg__1: object) -> bool: ...
    def isValid(self) -> bool: ...

class vrdBillboardNode:
    __doc__: NoneType
    __module__: str
    axisOfRotationProperty: str
    focusOnCameraProperty: str
    alignToScreenProperty: str
    minAngleProperty: str
    maxAngleProperty: str
    def __copy__(self) -> None: ...
    def __delattr__(self) -> None: ...
    def __dir__(self, /): ...
    def __eq__(self) -> None: ...
    def __format__(self, format_spec, /): ...
    def __ge__(self) -> None: ...
    def __getattribute__(self) -> None: ...
    def __getstate__(self, /): ...
    def __gt__(self) -> None: ...
    def __hash__(self) -> None: ...
    def __init__(self) -> None: ...
    def __init_subclass__(cls) -> None: ...
    def __le__(self) -> None: ...
    def __lshift__(self) -> None: ...
    def __lt__(self) -> None: ...
    def __ne__(self) -> None: ...
    def __new__(cls) -> None: ...
    def __reduce__(self, /): ...
    def __reduce_ex__(self, protocol, /): ...
    def __repr__(self) -> None: ...
    def __rlshift__(self) -> None: ...
    def __rrshift__(self) -> None: ...
    def __rshift__(self) -> None: ...
    def __setattr__(self) -> None: ...
    def __sizeof__(self, /): ...
    def __str__(self) -> None: ...
    def __subclasshook__(self) -> None: ...
    def applyMaterial(self, material: vrdMaterial) -> None: ...
    def asType(self, arg__1: object) -> object: ...
    def getAlignToScreen(self) -> bool: ...
    def getAxisOfRotation(self) -> QVector3D: ...
    def getBoundingBox(self) -> vrdBoundingBox: ...
    def getChild(self, index: int) -> vrdNode: ...
    def getChildCount(self) -> int: ...
    def getChildIndex(self, child: vrdNode) -> int: ...
    def getChildren(self) -> List[vrdNode]: ...
    def getChildrenRecursive(self) -> List[vrdNode]: ...
    def getChildrenRef(self) -> vrdNodeList: ...
    def getFocusOnCamera(self) -> bool: ...
    def getLocked(self) -> bool: ...
    def getMaterial(self) -> vrdMaterial: ...
    def getMaxAngle(self) -> float: ...
    def getMinAngle(self) -> float: ...
    def getName(self) -> str: ...
    def getObjectId(self) -> int: ...
    def getOrCreateTransformNode(self) -> vrdNode: ...
    def getParent(self) -> vrdNode: ...
    def getPath(self) -> str: ...
    def getSelectableFlag(self) -> bool: ...
    def getSharedNodes(self) -> List[vrdNode]: ...
    def getSynchronizedNodes(self) -> List[vrdNode]: ...
    def getUniquePath(self) -> str: ...
    def getVisibilityFlag(self) -> bool: ...
    def getWorldBoundingBox(self) -> vrdBoundingBox: ...
    def getWorldTransform(self) -> QMatrix4x4: ...
    def hasParent(self, parent: vrdNode) -> bool: ...
    def isEditable(self) -> bool: ...
    def isEditedAsset(self) -> bool: ...
    def isGroup(self) -> bool: ...
    def isImplicitShared(self) -> bool: ...
    def isNull(self) -> bool: ...
    def isShared(self) -> bool: ...
    def isSharedWith(self, node: vrdNode) -> bool: ...
    def isSynchronized(self) -> bool: ...
    def isType(self, arg__1: object) -> bool: ...
    def isValid(self) -> bool: ...
    def isVisible(self) -> bool: ...
    def setAlignToScreen(self, value: bool) -> None: ...
    def setAxisOfRotation(self, value: QVector3D) -> None: ...
    def setFocusOnCamera(self, value: bool) -> None: ...
    def setLocked(self, locked: bool) -> None: ...
    def setMaxAngle(self, value: float) -> None: ...
    def setMinAngle(self, value: float) -> None: ...
    def setName(self, name: str) -> None: ...
    def setSelectableFlag(self, selectable: bool) -> None: ...
    def setVisibilityFlag(self, visible: bool) -> None: ...

class vrdBlendChunk:
    __doc__: NoneType
    __module__: str
    srcFactorProperty: str
    dstFactorProperty: str
    equationProperty: str
    colorProperty: str
    def DstFactor(self) -> None: ...
    def Equation(self) -> None: ...
    def SrcFactor(self) -> None: ...
    def __copy__(self) -> None: ...
    def __delattr__(self) -> None: ...
    def __dir__(self, /): ...
    def __eq__(self) -> None: ...
    def __format__(self, format_spec, /): ...
    def __ge__(self) -> None: ...
    def __getattribute__(self) -> None: ...
    def __getstate__(self, /): ...
    def __gt__(self) -> None: ...
    def __hash__(self) -> None: ...
    def __init__(self) -> None: ...
    def __init_subclass__(cls) -> None: ...
    def __le__(self) -> None: ...
    def __lshift__(self) -> None: ...
    def __lt__(self) -> None: ...
    def __ne__(self) -> None: ...
    def __new__(cls) -> None: ...
    def __reduce__(self, /): ...
    def __reduce_ex__(self, protocol, /): ...
    def __repr__(self) -> None: ...
    def __rlshift__(self) -> None: ...
    def __rrshift__(self) -> None: ...
    def __rshift__(self) -> None: ...
    def __setattr__(self) -> None: ...
    def __sizeof__(self, /): ...
    def __str__(self) -> None: ...
    def __subclasshook__(self) -> None: ...
    def asType(self, arg__1: object) -> object: ...
    def getColor(self) -> QVector3D: ...
    def getDstFactor(self) -> vrdBlendChunk.DstFactor: ...
    def getEquation(self) -> vrdBlendChunk.Equation: ...
    def getObjectId(self) -> int: ...
    def getSrcFactor(self) -> vrdBlendChunk.SrcFactor: ...
    def isNull(self) -> bool: ...
    def isType(self, arg__1: object) -> bool: ...
    def isValid(self) -> bool: ...
    def setColor(self, value: QVector3D) -> None: ...
    def setDstFactor(self, srcFactor: vrdBlendChunk.DstFactor) -> None: ...
    def setEquation(self, equation: vrdBlendChunk.Equation) -> None: ...
    def setSrcFactor(self, srcFactor: vrdBlendChunk.SrcFactor) -> None: ...

class vrdBoundingBox:
    __doc__: NoneType
    __module__: str
    maxProperty: str
    minProperty: str
    def __copy__(self) -> None: ...
    def __delattr__(self) -> None: ...
    def __dir__(self, /): ...
    def __eq__(self) -> None: ...
    def __format__(self, format_spec, /): ...
    def __ge__(self) -> None: ...
    def __getattribute__(self) -> None: ...
    def __getstate__(self, /): ...
    def __gt__(self) -> None: ...
    def __hash__(self) -> None: ...
    def __init__(self) -> None: ...
    def __init_subclass__(cls) -> None: ...
    def __le__(self) -> None: ...
    def __lt__(self) -> None: ...
    def __ne__(self) -> None: ...
    def __new__(cls) -> None: ...
    def __reduce__(self, /): ...
    def __reduce_ex__(self, protocol, /): ...
    def __repr__(self) -> None: ...
    def __setattr__(self) -> None: ...
    def __sizeof__(self, /): ...
    def __str__(self) -> None: ...
    def __subclasshook__(self) -> None: ...
    def extendBy(self, bb: vrdBoundingBox) -> None: ...
    def getCenter(self) -> QVector3D: ...
    def getMax(self) -> QVector3D: ...
    def getMin(self) -> QVector3D: ...
    def getSize(self) -> QVector3D: ...
    def isValid(self) -> bool: ...
    def setMax(self, max: QVector3D) -> None: ...
    def setMin(self, min: QVector3D) -> None: ...

class vrdBrushOrientation:
    __doc__: NoneType
    __module__: str
    PlanarXY: BrushAxis
    PlanarXZ: BrushAxis
    PlanarYZ: BrushAxis
    RadialXY: BrushAxis
    RadialXZ: BrushAxis
    RadialYZ: BrushAxis
    Triplanar: BrushAxis
    brushAxisProperty: str
    structureScaleUProperty: str
    structureScaleVProperty: str
    triplanarRotateProperty: str
    orientationProperty: str
    centerProperty: str
    centerFromObjectProperty: str
    def BrushAxis(self) -> None: ...
    def __copy__(self) -> None: ...
    def __delattr__(self) -> None: ...
    def __dir__(self, /): ...
    def __eq__(self) -> None: ...
    def __format__(self, format_spec, /): ...
    def __ge__(self) -> None: ...
    def __getattribute__(self) -> None: ...
    def __getstate__(self, /): ...
    def __gt__(self) -> None: ...
    def __hash__(self) -> None: ...
    def __init__(self) -> None: ...
    def __init_subclass__(cls) -> None: ...
    def __le__(self) -> None: ...
    def __lshift__(self) -> None: ...
    def __lt__(self) -> None: ...
    def __ne__(self) -> None: ...
    def __new__(cls) -> None: ...
    def __reduce__(self, /): ...
    def __reduce_ex__(self, protocol, /): ...
    def __repr__(self) -> None: ...
    def __rlshift__(self) -> None: ...
    def __rrshift__(self) -> None: ...
    def __rshift__(self) -> None: ...
    def __setattr__(self) -> None: ...
    def __sizeof__(self, /): ...
    def __str__(self) -> None: ...
    def __subclasshook__(self) -> None: ...
    def asType(self, arg__1: object) -> object: ...
    def getBrushAxis(self) -> vrdBrushOrientation.BrushAxis: ...
    def getCenter(self) -> QVector3D: ...
    def getObjectId(self) -> int: ...
    def getOrientation(self) -> QVector3D: ...
    def getStructureScaleU(self) -> float: ...
    def getStructureScaleV(self) -> float: ...
    def getTriplanarRotate(self) -> QVector3D: ...
    def isNull(self) -> bool: ...
    def isType(self, arg__1: object) -> bool: ...
    def isValid(self) -> bool: ...
    def setBrushAxis(self, m: vrdBrushOrientation.BrushAxis) -> None: ...
    def setCenter(self, v: QVector3D) -> None: ...
    def setCenterFromObject(self) -> None: ...
    def setOrientation(self, v: QVector3D) -> None: ...
    def setStructureScaleU(self, v: float) -> None: ...
    def setStructureScaleV(self, v: float) -> None: ...
    def setTriplanarRotate(self, v: QVector3D) -> None: ...

class vrdBrushedMetalMaterial:
    __doc__: NoneType
    __module__: str
    CustomReflectivity: MetalType
    Aluminium: MetalType
    AmorphousCarbon: MetalType
    Silver: MetalType
    Gold: MetalType
    Cobalt: MetalType
    Copper: MetalType
    Chromium: MetalType
    Lithium: MetalType
    Mercury: MetalType
    Nickel: MetalType
    Potassium: MetalType
    Platinum: MetalType
    Iridium: MetalType
    Silicon: MetalType
    AmorphousSilicon: MetalType
    Sodium: MetalType
    Rhodium: MetalType
    Tungsten: MetalType
    Vanadium: MetalType
    Iron: MetalType
    diffuseColorProperty: str
    diffuseColorSpectrumProperty: str
    glossyColorProperty: str
    glossyColorSpectrumProperty: str
    roughnessUProperty: str
    roughnessVProperty: str
    metalTypeProperty: str
    reflectivityProperty: str
    clearcoatProperty: str
    brushOrientationProperty: str
    diffuseTextureProperty: str
    glossyTextureProperty: str
    roughnessTextureProperty: str
    bumpTextureProperty: str
    incandescenceProperty: str
    displacementTextureProperty: str
    def MetalType(self) -> None: ...
    def __copy__(self) -> None: ...
    def __delattr__(self) -> None: ...
    def __dir__(self, /): ...
    def __eq__(self) -> None: ...
    def __format__(self, format_spec, /): ...
    def __ge__(self) -> None: ...
    def __getattribute__(self) -> None: ...
    def __getstate__(self, /): ...
    def __gt__(self) -> None: ...
    def __hash__(self) -> None: ...
    def __init__(self) -> None: ...
    def __init_subclass__(cls) -> None: ...
    def __le__(self) -> None: ...
    def __lshift__(self) -> None: ...
    def __lt__(self) -> None: ...
    def __ne__(self) -> None: ...
    def __new__(cls) -> None: ...
    def __reduce__(self, /): ...
    def __reduce_ex__(self, protocol, /): ...
    def __repr__(self) -> None: ...
    def __rlshift__(self) -> None: ...
    def __rrshift__(self) -> None: ...
    def __rshift__(self) -> None: ...
    def __setattr__(self) -> None: ...
    def __sizeof__(self, /): ...
    def __str__(self) -> None: ...
    def __subclasshook__(self) -> None: ...
    def asType(self, arg__1: object) -> object: ...
    def duplicate(self, name: str = '') -> vrdMaterial: ...
    def getAnalytic(self) -> vrdAnalyticSettings: ...
    def getBrushOrientation(self) -> vrdBrushOrientation: ...
    def getBumpTexture(self) -> vrdBumpTexture: ...
    def getClearcoat(self) -> vrdClearcoat: ...
    def getCommon(self) -> vrdBRDFCommonSettings: ...
    def getDiffuseColor(self) -> QVector3D: ...
    def getDiffuseColorSpectrum(self) -> vrSpectrum: ...
    def getDiffuseTexture(self) -> vrdTexture: ...
    def getDisplacementTexture(self) -> vrdDisplacementTexture: ...
    def getGlossyColor(self) -> QVector3D: ...
    def getGlossyColorSpectrum(self) -> vrSpectrum: ...
    def getGlossyTexture(self) -> vrdTexture: ...
    def getIcon(self) -> QIcon: ...
    def getIncandescence(self) -> vrdIncandescence: ...
    def getLocked(self) -> bool: ...
    def getMetalType(self) -> vrdBrushedMetalMaterial.MetalType: ...
    def getNPR(self) -> vrdNPRSettings: ...
    def getName(self) -> str: ...
    def getObjectId(self) -> int: ...
    def getPreview(self) -> QImage: ...
    def getPreviewScene(self) -> str: ...
    def getRaytracing(self) -> vrdMaterialRaytracingSettings: ...
    def getReflectivity(self) -> float: ...
    def getRoughnessTexture(self) -> vrdRoughnessTexture: ...
    def getRoughnessU(self) -> float: ...
    def getRoughnessV(self) -> float: ...
    def getRoundedEdges(self) -> vrdRoundedEdges: ...
    def getTextures(self) -> List[vrdTexture]: ...
    def getTransparency(self) -> vrdTransparency: ...
    def isAsset(self) -> bool: ...
    def isComponent(self) -> bool: ...
    def isDisplacementActive(self) -> bool: ...
    def isEditable(self) -> bool: ...
    def isEditedAsset(self) -> bool: ...
    def isNull(self) -> bool: ...
    def isType(self, arg__1: object) -> bool: ...
    def isValid(self) -> bool: ...
    def setDiffuseColor(self, value: QVector3D) -> None: ...
    def setDiffuseColorSpectrum(self, value: Union[vrSpectrum, QVector3D]) -> None: ...
    def setGlossyColor(self, value: QVector3D) -> None: ...
    def setGlossyColorSpectrum(self, value: Union[vrSpectrum, QVector3D]) -> None: ...
    def setInlineAllImageSequences(self, value: bool) -> List[vrdImage]: ...
    def setLocked(self, locked: bool) -> None: ...
    def setMetalType(self, value: vrdBrushedMetalMaterial.MetalType) -> None: ...
    def setName(self, name: str) -> None: ...
    def setPreviewScene(self, name: str) -> None: ...
    def setReflectivity(self, v: float) -> None: ...
    def setRoughnessU(self, u: float) -> None: ...
    def setRoughnessV(self, v: float) -> None: ...

class vrdBsdfMeasurement:
    __doc__: NoneType
    __module__: str
    def __copy__(self) -> None: ...
    def __delattr__(self) -> None: ...
    def __dir__(self, /): ...
    def __eq__(self) -> None: ...
    def __format__(self, format_spec, /): ...
    def __ge__(self) -> None: ...
    def __getattribute__(self) -> None: ...
    def __getstate__(self, /): ...
    def __gt__(self) -> None: ...
    def __hash__(self) -> None: ...
    def __init__(self) -> None: ...
    def __init_subclass__(cls) -> None: ...
    def __le__(self) -> None: ...
    def __lshift__(self) -> None: ...
    def __lt__(self) -> None: ...
    def __ne__(self) -> None: ...
    def __new__(cls) -> None: ...
    def __reduce__(self, /): ...
    def __reduce_ex__(self, protocol, /): ...
    def __repr__(self) -> None: ...
    def __rlshift__(self) -> None: ...
    def __rrshift__(self) -> None: ...
    def __rshift__(self) -> None: ...
    def __setattr__(self) -> None: ...
    def __sizeof__(self, /): ...
    def __str__(self) -> None: ...
    def __subclasshook__(self) -> None: ...
    def asType(self, arg__1: object) -> object: ...
    def getAbsolutePath(self) -> str: ...
    def getObjectId(self) -> int: ...
    def isNull(self) -> bool: ...
    def isType(self, arg__1: object) -> bool: ...
    def isValid(self) -> bool: ...

class vrdBumpTexture:
    __doc__: NoneType
    __module__: str
    BumpMapping: BumpType
    DisplacementMapping: BumpType
    useStructureProperty: str
    parallaxIntensityProperty: str
    bumpIntensityProperty: str
    structureSizeProperty: str
    glossyWeightProperty: str
    bumpAffectsSpecularProperty: str
    bumpTypeProperty: str
    flipUProperty: str
    flipVProperty: str
    normalmapEncodesHeightProperty: str
    def BumpType(self) -> None: ...
    def __copy__(self) -> None: ...
    def __delattr__(self) -> None: ...
    def __dir__(self, /): ...
    def __eq__(self) -> None: ...
    def __format__(self, format_spec, /): ...
    def __ge__(self) -> None: ...
    def __getattribute__(self) -> None: ...
    def __getstate__(self, /): ...
    def __gt__(self) -> None: ...
    def __hash__(self) -> None: ...
    def __init__(self) -> None: ...
    def __init_subclass__(cls) -> None: ...
    def __le__(self) -> None: ...
    def __lshift__(self) -> None: ...
    def __lt__(self) -> None: ...
    def __ne__(self) -> None: ...
    def __new__(cls) -> None: ...
    def __reduce__(self, /): ...
    def __reduce_ex__(self, protocol, /): ...
    def __repr__(self) -> None: ...
    def __rlshift__(self) -> None: ...
    def __rrshift__(self) -> None: ...
    def __rshift__(self) -> None: ...
    def __setattr__(self) -> None: ...
    def __sizeof__(self, /): ...
    def __str__(self) -> None: ...
    def __subclasshook__(self) -> None: ...
    def asType(self, arg__1: object) -> object: ...
    def getAnisotropy(self) -> float: ...
    def getBumpAffectsSpecular(self) -> bool: ...
    def getBumpIntensity(self) -> float: ...
    def getBumpType(self) -> vrdBumpTexture.BumpType: ...
    def getComponentName(self) -> str: ...
    def getConnectRepeatModes(self) -> bool: ...
    def getFlipU(self) -> bool: ...
    def getFlipV(self) -> bool: ...
    def getFrameOffset(self) -> int: ...
    def getGamma(self) -> float: ...
    def getGlossyWeight(self) -> float: ...
    def getImage(self) -> vrdImage: ...
    def getImageNumber(self) -> int: ...
    def getInfiniteTilingContrast(self) -> float: ...
    def getInfiniteTilingGridSize(self) -> int: ...
    def getInfiniteTilingHueWeight(self) -> float: ...
    def getInfiniteTilingMaxRotation(self) -> float: ...
    def getInfiniteTilingSaturationWeight(self) -> float: ...
    def getInfiniteTilingValueWeight(self) -> float: ...
    def getInlineImageSequence(self) -> bool: ...
    def getInvertTexture(self) -> bool: ...
    def getLinkTextureSettings(self) -> bool: ...
    def getManipulate(self) -> bool: ...
    def getMappingType(self) -> vrTextureTypes.MappingType: ...
    def getNormalmapEncodesHeight(self) -> bool: ...
    def getObjectId(self) -> int: ...
    def getOffset(self) -> QVector2D: ...
    def getParallaxIntensity(self) -> float: ...
    def getPlanarProjectionCenter(self) -> QVector3D: ...
    def getPlanarProjectionKeepAspectRatio(self) -> bool: ...
    def getPlanarProjectionOrientation(self) -> QVector2D: ...
    def getPlanarProjectionSingleSided(self) -> bool: ...
    def getPlanarProjectionSize(self) -> QVector3D: ...
    def getRepeat(self) -> QVector2D: ...
    def getRepeatModeU(self) -> vrTextureTypes.RepeatMode: ...
    def getRepeatModeV(self) -> vrTextureTypes.RepeatMode: ...
    def getRotate(self) -> float: ...
    def getStructureSize(self) -> float: ...
    def getTextureSize(self) -> QVector2D: ...
    def getTriplanarBlend(self) -> float: ...
    def getTriplanarXOffset(self) -> QVector2D: ...
    def getTriplanarXRepeat(self) -> QVector2D: ...
    def getTriplanarXRotation(self) -> float: ...
    def getTriplanarYOffset(self) -> QVector2D: ...
    def getTriplanarYRepeat(self) -> QVector2D: ...
    def getTriplanarYRotation(self) -> float: ...
    def getTriplanarZOffset(self) -> QVector2D: ...
    def getTriplanarZRepeat(self) -> QVector2D: ...
    def getTriplanarZRotation(self) -> float: ...
    def getUniformRepeat(self) -> bool: ...
    def getUseAlpha(self) -> bool: ...
    def getUseCutout(self) -> bool: ...
    def getUseImageSequence(self) -> bool: ...
    def getUseInfiniteTiling(self) -> bool: ...
    def getUseStructure(self) -> bool: ...
    def getUseTexture(self) -> bool: ...
    def getUseTextureSize(self) -> bool: ...
    def isNull(self) -> bool: ...
    def isType(self, arg__1: object) -> bool: ...
    def isValid(self) -> bool: ...
    def setAnisotropy(self, anisotropy: float) -> None: ...
    def setBumpAffectsSpecular(self, s: bool) -> None: ...
    def setBumpIntensity(self, intensity: float) -> None: ...
    def setBumpType(self, type: vrdBumpTexture.BumpType) -> None: ...
    def setConnectRepeatModes(self, s: bool) -> None: ...
    def setFlipU(self, s: bool) -> None: ...
    def setFlipV(self, s: bool) -> None: ...
    def setFrameOffset(self, frameOffset: int) -> None: ...
    def setGamma(self, gamma: float) -> None: ...
    def setGlossyWeight(self, value: float) -> None: ...
    def setImage(self, img: vrdImage) -> None: ...
    def setImageNumber(self, imageNumber: int) -> None: ...
    def setInfiniteTilingContrast(self, contrast: float) -> None: ...
    def setInfiniteTilingGridSize(self, gridSize: int) -> None: ...
    def setInfiniteTilingHueWeight(self, hueWeight: float) -> None: ...
    def setInfiniteTilingMaxRotation(self, maxRotation: float) -> None: ...
    def setInfiniteTilingSaturationWeight(self, saturationWeight: float) -> None: ...
    def setInfiniteTilingValueWeight(self, valueWeight: float) -> None: ...
    def setInlineImageSequence(self, s: bool) -> None: ...
    def setInvertTexture(self, invertTexture: bool) -> None: ...
    def setLinkTextureSettings(self, s: bool) -> None: ...
    def setManipulate(self, s: bool) -> None: ...
    def setMappingType(self, type: vrTextureTypes.MappingType) -> None: ...
    def setNormalmapEncodesHeight(self, normalmapEncodesHeight: bool) -> None: ...
    def setOffset(self, offset: QVector2D) -> None: ...
    def setParallaxIntensity(self, intensity: float) -> None: ...
    def setPlanarProjectionCenter(self, center: QVector3D) -> None: ...
    def setPlanarProjectionFitSize(self) -> None: ...
    def setPlanarProjectionKeepAspectRatio(self, s: bool) -> None: ...
    def setPlanarProjectionObjectCenter(self) -> None: ...
    def setPlanarProjectionOrientation(self, orientation: QVector2D) -> None: ...
    def setPlanarProjectionPlane(self, center: QVector3D, direction: QVector3D) -> None: ...
    def setPlanarProjectionSingleSided(self, s: bool) -> None: ...
    def setPlanarProjectionSize(self, size: QVector3D) -> None: ...
    def setRepeat(self, repeat: QVector2D) -> None: ...
    def setRepeatModeU(self, mode: vrTextureTypes.RepeatMode) -> None: ...
    def setRepeatModeV(self, mode: vrTextureTypes.RepeatMode) -> None: ...
    def setRotate(self, rotate: float) -> None: ...
    def setStructureSize(self, size: float) -> None: ...
    def setTextureSize(self, size: QVector2D) -> None: ...
    def setTriplanarBlend(self, blend: float) -> None: ...
    def setTriplanarXOffset(self, offset: QVector2D) -> None: ...
    def setTriplanarXRepeat(self, repeat: QVector2D) -> None: ...
    def setTriplanarXRotation(self, rotation: float) -> None: ...
    def setTriplanarYOffset(self, offset: QVector2D) -> None: ...
    def setTriplanarYRepeat(self, repeat: QVector2D) -> None: ...
    def setTriplanarYRotation(self, rotation: float) -> None: ...
    def setTriplanarZOffset(self, offset: QVector2D) -> None: ...
    def setTriplanarZRepeat(self, repeat: QVector2D) -> None: ...
    def setTriplanarZRotation(self, rotation: float) -> None: ...
    def setUniformRepeat(self, s: bool) -> None: ...
    def setUseAlpha(self, s: bool) -> None: ...
    def setUseCutout(self, s: bool) -> None: ...
    def setUseImageSequence(self, s: bool) -> None: ...
    def setUseInfiniteTiling(self, s: bool) -> None: ...
    def setUseStructure(self, useStructure: bool) -> None: ...
    def setUseTexture(self, s: bool) -> None: ...
    def setUseTextureSize(self, s: bool) -> None: ...
    def supportsGamma(self) -> bool: ...
    def supportsGlossyWeight(self) -> bool: ...
    def supportsInvertTexture(self) -> bool: ...
    def supportsMappingType(self) -> bool: ...
    def supportsTexture(self) -> bool: ...
    def supportsUseAlpha(self) -> bool: ...
    def supportsUseCutout(self) -> bool: ...

class vrdButtonState:
    __doc__: NoneType
    __module__: str
    def __copy__(self) -> None: ...
    def __delattr__(self) -> None: ...
    def __dir__(self, /): ...
    def __eq__(self) -> None: ...
    def __format__(self, format_spec, /): ...
    def __ge__(self) -> None: ...
    def __getattribute__(self) -> None: ...
    def __getstate__(self, /): ...
    def __gt__(self) -> None: ...
    def __hash__(self) -> None: ...
    def __init__(self) -> None: ...
    def __init_subclass__(cls) -> None: ...
    def __le__(self) -> None: ...
    def __lt__(self) -> None: ...
    def __ne__(self) -> None: ...
    def __new__(cls) -> None: ...
    def __reduce__(self, /): ...
    def __reduce_ex__(self, protocol, /): ...
    def __repr__(self) -> None: ...
    def __setattr__(self) -> None: ...
    def __sizeof__(self, /): ...
    def __str__(self) -> None: ...
    def __subclasshook__(self) -> None: ...
    def getName(self) -> str: ...
    def getPosition(self) -> QVector2D: ...
    def isPressed(self) -> bool: ...
    def isTouched(self) -> bool: ...
    def setName(self, name: str) -> None: ...
    def setPosition(self, position: QVector2D) -> None: ...
    def setPressed(self, pressed: bool) -> None: ...
    def setTouched(self, touched: bool) -> None: ...

class vrdCameraBaseNode(vrdTransformNode):
    __doc__: NoneType
    __module__: str
    fovProperty: str
    fovModeProperty: str
    stereoLayoutProperty: str
    stereoEyeSeparationProperty: str
    stereoPolarMergeAngleProperty: str
    nearClippingDistanceProperty: str
    farClippingDistanceProperty: str
    fromAtUpProperty: str
    fromAtUpWorldProperty: str
    colorCorrectionHueOffsetProperty: str
    colorCorrectionSaturationProperty: str
    colorCorrectionContrastProperty: str
    colorCorrectionBrightnessProperty: str
    glowProperty: str
    glowThresholdProperty: str
    glowSizeProperty: str
    glowIntensityProperty: str
    glowFalloffProperty: str
    glareProperty: str
    glareThresholdProperty: str
    glareSizeProperty: str
    glareIntensityProperty: str
    glareRotationProperty: str
    glareStreaksProperty: str
    lensFlareProperty: str
    blendModeProperty: str
    blendAmountProperty: str
    vignetteRadiusProperty: str
    vignetteRoundnessProperty: str
    vignetteFeatherProperty: str
    blendMapLeftEyeProperty: str
    blendMapRightEyeProperty: str
    distanceFogProperty: str
    distanceFogFalloffProperty: str
    distanceFogRangeProperty: str
    distanceFogDensityProperty: str
    distanceFogColorProperty: str
    distanceFogNoiseProperty: str
    distanceFogEnableNoiseSizeUniformProperty: str
    distanceFogNoiseSizeProperty: str
    distanceFogNoiseOffsetProperty: str
    heightFogProperty: str
    heightFogFalloffProperty: str
    heightFogDensityProperty: str
    heightFogRangeProperty: str
    heightFogColorProperty: str
    heightFogNoiseProperty: str
    heightFogNoiseSizeProperty: str
    heightFogNoiseOffsetProperty: str
    heightFogEnableNoiseSizeUniformProperty: str
    heightFogBlendProperty: str
    distortionProperty: str
    distortionMapLeftEyeProperty: str
    distortionMapRightEyeProperty: str
    frustumProperty: str
    frustumLeftProperty: str
    frustumRightProperty: str
    frustumBottomProperty: str
    frustumTopProperty: str
    orthographicSizeProperty: str
    customProjectionMatrixProperty: str
    customFrustumEnabledProperty: str
    depthOfFieldProperty: str
    depthOfFieldModeProperty: str
    focusDistanceProperty: str
    autofocusProperty: str
    interactiveDofQualityProperty: str
    autofocusTransitionTimeProperty: str
    motionBlurProperty: str
    shutterSpeedProperty: str
    rollProperty: str
    skewProperty: str
    projectionModeProperty: str
    sensorSizeProperty: str
    principalPointOffsetProperty: str
    fStopProperty: str
    focalLengthProperty: str
    wireframeRenderingProperty: str
    applyColorCorrectionToBackgroundProperty: str
    applyColorCorrectionToForegroundProperty: str
    viewpointTransitionProperty: str
    viewpointTransitionDurationProperty: str
    tonemapperProperty: str
    perspectiveMatchProperty: str
    toCurrentViewProperty: str
    editableProperty: str
    idProperty: str
    orthographicProperty: str
    useHightAsVRGroundProperty: str
    def __copy__(self) -> None: ...
    def __delattr__(self) -> None: ...
    def __dir__(self, /): ...
    def __eq__(self) -> None: ...
    def __format__(self, format_spec, /): ...
    def __ge__(self) -> None: ...
    def __getattribute__(self) -> None: ...
    def __getstate__(self, /): ...
    def __gt__(self) -> None: ...
    def __hash__(self) -> None: ...
    def __init__(self) -> None: ...
    def __init_subclass__(cls) -> None: ...
    def __le__(self) -> None: ...
    def __lshift__(self) -> None: ...
    def __lt__(self) -> None: ...
    def __ne__(self) -> None: ...
    def __new__(cls) -> None: ...
    def __reduce__(self, /): ...
    def __reduce_ex__(self, protocol, /): ...
    def __repr__(self) -> None: ...
    def __rlshift__(self) -> None: ...
    def __rrshift__(self) -> None: ...
    def __rshift__(self) -> None: ...
    def __setattr__(self) -> None: ...
    def __sizeof__(self, /): ...
    def __str__(self) -> None: ...
    def __subclasshook__(self) -> None: ...
    def adjustAtPosition(self, root: vrdNode = Default(vrdNode)) -> None: ...
    def applyMaterial(self, material: vrdMaterial) -> None: ...
    def asType(self, arg__1: object) -> object: ...
    def calculateClippingPlanes(self) -> None: ...
    def captureTransformVariant(self, name: str) -> None: ...
    def deleteTransformVariant(self, variant: vrdTransformNodeVariant) -> None: ...
    def findTransformVariant(self, name: str) -> vrdTransformNodeVariant: ...
    def getApplyColorCorrectionToBackground(self) -> bool: ...
    def getApplyColorCorrectionToForeground(self) -> bool: ...
    def getAutofocus(self) -> bool: ...
    def getAutofocusTransitionTime(self) -> int: ...
    def getBlendAmount(self) -> float: ...
    def getBlendMapLeftEye(self) -> vrdImage: ...
    def getBlendMapRightEye(self) -> vrdImage: ...
    def getBlendMode(self) -> vrCameraTypes.BlendMode: ...
    def getBoundingBox(self) -> vrdBoundingBox: ...
    def getChild(self, index: int) -> vrdNode: ...
    def getChildCount(self) -> int: ...
    def getChildIndex(self, child: vrdNode) -> int: ...
    def getChildren(self) -> List[vrdNode]: ...
    def getChildrenRecursive(self) -> List[vrdNode]: ...
    def getChildrenRef(self) -> vrdNodeList: ...
    def getColorCorrectionBrightness(self) -> float: ...
    def getColorCorrectionContrast(self) -> float: ...
    def getColorCorrectionHueOffset(self) -> float: ...
    def getColorCorrectionSaturation(self) -> float: ...
    def getCustomFrustumEnabled(self) -> bool: ...
    def getCustomProjectionMatrix(self) -> QMatrix4x4: ...
    def getDepthOfField(self) -> bool: ...
    def getDepthOfFieldMode(self) -> vrCameraTypes.DepthOfFieldMode: ...
    def getDistanceFog(self) -> bool: ...
    def getDistanceFogColor(self) -> QColor: ...
    def getDistanceFogDensity(self) -> float: ...
    def getDistanceFogEnableNoiseSizeUniform(self) -> bool: ...
    def getDistanceFogFalloff(self) -> vrCameraTypes.FogFalloffMode: ...
    def getDistanceFogNoise(self) -> float: ...
    def getDistanceFogNoiseOffset(self) -> QVector3D: ...
    def getDistanceFogNoiseSize(self) -> QVector3D: ...
    def getDistanceFogRange(self) -> float: ...
    def getDistortion(self) -> bool: ...
    def getDistortionMapLeftEye(self) -> vrdImage: ...
    def getDistortionMapRightEye(self) -> vrdImage: ...
    def getEulerRotationOrder(self) -> vrTransformTypes.EulerRotationOrder: ...
    def getFStop(self) -> float: ...
    def getFarClippingDistance(self) -> float: ...
    def getFocalLength(self) -> float: ...
    def getFocusDistance(self) -> float: ...
    def getFov(self) -> float: ...
    def getFovMode(self) -> vrCameraTypes.FovMode: ...
    def getFromAtUp(self) -> vrCameraFromAtUp: ...
    def getFromAtUpWorld(self) -> vrCameraFromAtUp: ...
    def getFrustum(self) -> QVector4D: ...
    def getFrustumBottom(self) -> float: ...
    def getFrustumLeft(self) -> float: ...
    def getFrustumRight(self) -> float: ...
    def getFrustumTop(self) -> float: ...
    def getGlare(self) -> bool: ...
    def getGlareIntensity(self) -> float: ...
    def getGlareRotation(self) -> float: ...
    def getGlareSize(self) -> float: ...
    def getGlareStreaks(self) -> int: ...
    def getGlareThreshold(self) -> float: ...
    def getGlow(self) -> bool: ...
    def getGlowFalloff(self) -> float: ...
    def getGlowIntensity(self) -> float: ...
    def getGlowSize(self) -> float: ...
    def getGlowThreshold(self) -> float: ...
    def getHeightFog(self) -> bool: ...
    def getHeightFogBlend(self) -> float: ...
    def getHeightFogColor(self) -> QColor: ...
    def getHeightFogDensity(self) -> float: ...
    def getHeightFogEnableNoiseSizeUniform(self) -> bool: ...
    def getHeightFogFalloff(self) -> vrCameraTypes.FogFalloffMode: ...
    def getHeightFogNoise(self) -> float: ...
    def getHeightFogNoiseOffset(self) -> QVector3D: ...
    def getHeightFogNoiseSize(self) -> QVector3D: ...
    def getHeightFogRange(self) -> QVector2D: ...
    def getInteractiveDofQuality(self) -> vrCameraTypes.InteractiveDofQuality: ...
    def getLensFlare(self) -> bool: ...
    def getLocked(self) -> bool: ...
    def getMaterial(self) -> vrdMaterial: ...
    def getMotionBlur(self) -> bool: ...
    def getName(self) -> str: ...
    def getNearClippingDistance(self) -> float: ...
    def getObjectId(self) -> int: ...
    def getOrCreateTransformNode(self) -> vrdNode: ...
    def getOrthographicSize(self) -> float: ...
    def getParent(self) -> vrdNode: ...
    def getPath(self) -> str: ...
    def getPerspectiveMatch(self) -> vrdPerspectiveMatch: ...
    def getPrincipalPointOffset(self) -> QVector2D: ...
    def getProjectionMode(self) -> vrCameraTypes.CameraProjectionMode: ...
    def getRoll(self) -> float: ...
    def getRotatePivot(self) -> QVector3D: ...
    def getRotatePivotTranslation(self) -> QVector3D: ...
    def getRotationAsEuler(self) -> QVector3D: ...
    def getRotationAsQuaternion(self) -> QQuaternion: ...
    def getRotationOrientationAsEuler(self) -> QVector3D: ...
    def getRotationOrientationAsQuaternion(self) -> QQuaternion: ...
    def getScale(self) -> QVector3D: ...
    def getScalePivot(self) -> QVector3D: ...
    def getScalePivotTranslation(self) -> QVector3D: ...
    def getSelectableFlag(self) -> bool: ...
    def getSensorSize(self) -> QVector2D: ...
    def getSharedNodes(self) -> List[vrdNode]: ...
    def getShear(self) -> QVector3D: ...
    def getShutterSpeed(self) -> float: ...
    def getSkew(self) -> float: ...
    def getStereoEyeSeparation(self) -> float: ...
    def getStereoLayout(self) -> vrCameraTypes.CameraStereoLayout: ...
    def getStereoPolarMergeAngle(self) -> float: ...
    def getSynchronizedNodes(self) -> List[vrdNode]: ...
    def getTonemapper(self) -> vrdTonemapper: ...
    def getTransform(self) -> QMatrix4x4: ...
    def getTransformVariants(self) -> List[vrdTransformNodeVariant]: ...
    def getTranslation(self) -> QVector3D: ...
    def getUniquePath(self) -> str: ...
    def getUseHightAsVRGround(self) -> bool: ...
    def getViewpointTransition(self) -> bool: ...
    def getViewpointTransitionDuration(self) -> float: ...
    def getVignetteFeather(self) -> float: ...
    def getVignetteRadius(self) -> float: ...
    def getVignetteRoundness(self) -> float: ...
    def getVisibilityFlag(self) -> bool: ...
    def getWireframeRendering(self) -> bool: ...
    def getWorldBoundingBox(self) -> vrdBoundingBox: ...
    def getWorldRotatePivot(self) -> QVector3D: ...
    def getWorldScalePivot(self) -> QVector3D: ...
    def getWorldTransform(self) -> QMatrix4x4: ...
    def getWorldTranslation(self) -> QVector3D: ...
    def hasParent(self, parent: vrdNode) -> bool: ...
    def isEditable(self) -> bool: ...
    def isEditedAsset(self) -> bool: ...
    def isEqual(self, camera: vrdCameraBaseNode) -> bool: ...
    def isGroup(self) -> bool: ...
    def isImplicitShared(self) -> bool: ...
    def isNull(self) -> bool: ...
    def isOrthographic(self) -> bool: ...
    def isShared(self) -> bool: ...
    def isSharedWith(self, node: vrdNode) -> bool: ...
    def isSynchronized(self) -> bool: ...
    def isType(self, arg__1: object) -> bool: ...
    def isValid(self) -> bool: ...
    def isVisible(self) -> bool: ...
    def loadBlendMap(self, fileName: str, eye: vrCameraTypes.CameraEye) -> bool: ...
    def loadDistortionMap(self, fileName: str, eye: vrCameraTypes.CameraEye) -> bool: ...
    def mirrorView(self, axis: vrCameraTypes.CameraAxis) -> None: ...
    def resetTransformation(self) -> None: ...
    def resetView(self) -> None: ...
    def setApplyColorCorrectionToBackground(self, enabled: bool) -> None: ...
    def setApplyColorCorrectionToForeground(self, enabled: bool) -> None: ...
    def setAutofocus(self, enabled: bool) -> None: ...
    def setAutofocusTransitionTime(self, value: int) -> None: ...
    def setBlendAmount(self, value: float) -> None: ...
    def setBlendMapLeftEye(self, image: vrdImage) -> None: ...
    def setBlendMapRightEye(self, image: vrdImage) -> None: ...
    def setBlendMode(self, mode: vrCameraTypes.BlendMode) -> None: ...
    def setColorCorrectionBrightness(self, value: float) -> None: ...
    def setColorCorrectionContrast(self, value: float) -> None: ...
    def setColorCorrectionHueOffset(self, value: float) -> None: ...
    def setColorCorrectionSaturation(self, value: float) -> None: ...
    def setCustomFrustumEnabled(self, enabled: bool) -> None: ...
    def setCustomProjectionMatrix(self, matrix: Union[QMatrix4x4, QTransform]) -> None: ...
    def setDepthOfField(self, enabled: bool) -> None: ...
    def setDepthOfFieldMode(self, mode: vrCameraTypes.DepthOfFieldMode) -> None: ...
    def setDistanceFog(self, enable: bool) -> None: ...
    def setDistanceFogColor(self, color: Union[QColor, QRgba64, Any, Qt.GlobalColor, str, int]) -> None: ...
    def setDistanceFogDensity(self, density: float) -> None: ...
    def setDistanceFogEnableNoiseSizeUniform(self, enable: bool) -> None: ...
    def setDistanceFogFalloff(self, value: vrCameraTypes.FogFalloffMode) -> None: ...
    def setDistanceFogNoise(self, intensity: float) -> None: ...
    def setDistanceFogNoiseOffset(self, offset: QVector3D) -> None: ...
    def setDistanceFogNoiseSize(self, size: QVector3D) -> None: ...
    def setDistanceFogRange(self, nearDistance: float) -> None: ...
    def setDistortion(self, enabled: bool) -> None: ...
    def setDistortionMapLeftEye(self, image: vrdImage) -> None: ...
    def setDistortionMapRightEye(self, image: vrdImage) -> None: ...
    def setEulerRotationOrder(self, rotationOrder: vrTransformTypes.EulerRotationOrder) -> None: ...
    def setFStop(self, value: float) -> None: ...
    def setFarClippingDistance(self, value: float) -> None: ...
    def setFocalLength(self, value: float) -> None: ...
    def setFocusDistance(self, distance: float) -> None: ...
    def setFov(self, value: float) -> None: ...
    def setFovMode(self, mode: vrCameraTypes.FovMode) -> None: ...
    def setFromAtUp(self, fromAtUp: vrCameraFromAtUp) -> None: ...
    def setFromAtUpWorld(self, fromAtUp: vrCameraFromAtUp) -> None: ...
    def setFrustum(self, frustum: QVector4D) -> None: ...
    def setFrustumBottom(self, value: float) -> None: ...
    def setFrustumLeft(self, value: float) -> None: ...
    def setFrustumRight(self, value: float) -> None: ...
    def setFrustumTop(self, value: float) -> None: ...
    def setGlare(self, enabled: bool) -> None: ...
    def setGlareIntensity(self, value: float) -> None: ...
    def setGlareRotation(self, value: float) -> None: ...
    def setGlareSize(self, value: float) -> None: ...
    def setGlareStreaks(self, value: int) -> None: ...
    def setGlareThreshold(self, value: float) -> None: ...
    def setGlow(self, enabled: bool) -> None: ...
    def setGlowFalloff(self, value: float) -> None: ...
    def setGlowIntensity(self, value: float) -> None: ...
    def setGlowSize(self, value: float) -> None: ...
    def setGlowThreshold(self, value: float) -> None: ...
    def setHeightFog(self, enable: bool) -> None: ...
    def setHeightFogBlend(self, blend: float) -> None: ...
    def setHeightFogColor(self, color: Union[QColor, QRgba64, Any, Qt.GlobalColor, str, int]) -> None: ...
    def setHeightFogDensity(self, density: float) -> None: ...
    def setHeightFogEnableNoiseSizeUniform(self, enable: bool) -> None: ...
    def setHeightFogFalloff(self, value: vrCameraTypes.FogFalloffMode) -> None: ...
    def setHeightFogNoise(self, intensity: float) -> None: ...
    def setHeightFogNoiseOffset(self, offset: QVector3D) -> None: ...
    def setHeightFogNoiseSize(self, size: QVector3D) -> None: ...
    def setHeightFogRange(self, range: QVector2D) -> None: ...
    def setInteractiveDofQuality(self, value: vrCameraTypes.InteractiveDofQuality) -> None: ...
    def setLensFlare(self, enabled: bool) -> None: ...
    def setLocked(self, locked: bool) -> None: ...
    def setMotionBlur(self, enabled: bool) -> None: ...
    def setName(self, name: str) -> None: ...
    def setNearClippingDistance(self, value: float) -> None: ...
    def setOrthographicSize(self, size: float) -> None: ...
    def setPrincipalPointOffset(self, offset: QVector2D) -> None: ...
    def setProjectionMode(self, mode: vrCameraTypes.CameraProjectionMode) -> None: ...
    def setRoll(self, value: float) -> None: ...
    def setRotatePivot(self, rotatePivot: QVector3D) -> None: ...
    def setRotatePivotTranslation(self, rotatePivotTranslation: QVector3D) -> None: ...
    def setRotationAsEuler(self, rotation: QVector3D) -> None: ...
    def setRotationAsQuaternion(self, rotation: QQuaternion) -> None: ...
    def setRotationOrientationAsEuler(self, rotationOrientation: QVector3D) -> None: ...
    def setRotationOrientationAsQuaternion(self, orientation: QQuaternion) -> None: ...
    def setScale(self, scale: QVector3D) -> None: ...
    def setScalePivot(self, scalePivot: QVector3D) -> None: ...
    def setScalePivotTranslation(self, scalePivotTranslation: QVector3D) -> None: ...
    def setSelectableFlag(self, selectable: bool) -> None: ...
    def setSensorSize(self, size: QVector2D) -> None: ...
    def setShear(self, shear: QVector3D) -> None: ...
    def setShutterSpeed(self, value: float) -> None: ...
    def setSkew(self, value: float) -> None: ...
    def setStereoEyeSeparation(self, value: float) -> None: ...
    def setStereoLayout(self, layout: vrCameraTypes.CameraStereoLayout) -> None: ...
    def setStereoPolarMergeAngle(self, value: float) -> None: ...
    def setToCurrentView(self) -> None: ...
    def setTransform(self, matrix: Union[QMatrix4x4, QTransform]) -> None: ...
    def setTranslation(self, translation: QVector3D) -> None: ...
    def setUseHightAsVRGround(self, value: bool) -> None: ...
    def setViewpointTransition(self, enabled: bool) -> None: ...
    def setViewpointTransitionDuration(self, seconds: float) -> None: ...
    def setVignetteFeather(self, value: float) -> None: ...
    def setVignetteRadius(self, value: float) -> None: ...
    def setVignetteRoundness(self, value: float) -> None: ...
    def setVisibilityFlag(self, visible: bool) -> None: ...
    def setWireframeRendering(self, enabled: bool) -> None: ...
    def setWorldRotatePivot(self, rotatePivot: QVector3D) -> None: ...
    def setWorldScalePivot(self, scalePivot: QVector3D) -> None: ...
    def setWorldTransform(self, matrix: Union[QMatrix4x4, QTransform]) -> None: ...
    def setWorldTranslation(self, translation: QVector3D) -> None: ...

class vrdCameraCollider:
    __doc__: NoneType
    __module__: str
    enabledProperty: str
    slideProperty: str
    distanceProperty: str
    collisionStructureBuildMethodProperty: str
    nodesProperty: str
    def __copy__(self) -> None: ...
    def __delattr__(self) -> None: ...
    def __dir__(self, /): ...
    def __eq__(self) -> None: ...
    def __format__(self, format_spec, /): ...
    def __ge__(self) -> None: ...
    def __getattribute__(self) -> None: ...
    def __getstate__(self, /): ...
    def __gt__(self) -> None: ...
    def __hash__(self) -> None: ...
    def __init__(self) -> None: ...
    def __init_subclass__(cls) -> None: ...
    def __le__(self) -> None: ...
    def __lshift__(self) -> None: ...
    def __lt__(self) -> None: ...
    def __ne__(self) -> None: ...
    def __new__(cls) -> None: ...
    def __reduce__(self, /): ...
    def __reduce_ex__(self, protocol, /): ...
    def __repr__(self) -> None: ...
    def __rlshift__(self) -> None: ...
    def __rrshift__(self) -> None: ...
    def __rshift__(self) -> None: ...
    def __setattr__(self) -> None: ...
    def __sizeof__(self, /): ...
    def __str__(self) -> None: ...
    def __subclasshook__(self) -> None: ...
    def addNode(self, nodeName: str) -> None: ...
    def asType(self, arg__1: object) -> object: ...
    def buildCollisionStructure(self) -> None: ...
    def getCollisionStructureBuildMethod(self) -> vrCameraTypes.CollisionStructureBuildMethod: ...
    def getDistance(self) -> float: ...
    def getEnabled(self) -> bool: ...
    def getNodes(self) -> List[str]: ...
    def getObjectId(self) -> int: ...
    def getSlide(self) -> bool: ...
    def isNull(self) -> bool: ...
    def isType(self, arg__1: object) -> bool: ...
    def isValid(self) -> bool: ...
    def removeNode(self, nodeName: str) -> None: ...
    def setCollisionStructureBuildMethod(self, method: vrCameraTypes.CollisionStructureBuildMethod) -> None: ...
    def setDistance(self, distance: float) -> None: ...
    def setEnabled(self, enabled: bool) -> None: ...
    def setNodes(self, nodeNames: Sequence[str]) -> None: ...
    def setSlide(self, enabled: bool) -> None: ...

class vrdCameraNode(vrdCameraBaseNode):
    __doc__: NoneType
    __module__: str
    activeProperty: str
    dollyZoomProperty: str
    upVectorConstraintSourcesProperty: str
    aimConstraintSourcesProperty: str
    visualizationVisibleProperty: str
    aimVisualizationVisibleProperty: str
    visualizationScaleProperty: str
    aimVisualizationScaleProperty: str
    evaluateNavigationModeProperty: str
    cameraColliderProperty: str
    turntableProperty: str
    cameraTrackCountProperty: str
    defaultCameraTrackProperty: str
    cameraTracksProperty: str
    def __copy__(self) -> None: ...
    def __delattr__(self) -> None: ...
    def __dir__(self, /): ...
    def __eq__(self) -> None: ...
    def __format__(self, format_spec, /): ...
    def __ge__(self) -> None: ...
    def __getattribute__(self) -> None: ...
    def __getstate__(self, /): ...
    def __gt__(self) -> None: ...
    def __hash__(self) -> None: ...
    def __init__(self) -> None: ...
    def __init_subclass__(cls) -> None: ...
    def __le__(self) -> None: ...
    def __lshift__(self) -> None: ...
    def __lt__(self) -> None: ...
    def __ne__(self) -> None: ...
    def __new__(cls) -> None: ...
    def __reduce__(self, /): ...
    def __reduce_ex__(self, protocol, /): ...
    def __repr__(self) -> None: ...
    def __rlshift__(self) -> None: ...
    def __rrshift__(self) -> None: ...
    def __rshift__(self) -> None: ...
    def __setattr__(self) -> None: ...
    def __sizeof__(self, /): ...
    def __str__(self) -> None: ...
    def __subclasshook__(self) -> None: ...
    def activate(self) -> None: ...
    def adjustAtPosition(self, root: vrdNode = Default(vrdNode)) -> None: ...
    def applyMaterial(self, material: vrdMaterial) -> None: ...
    def asType(self, arg__1: object) -> object: ...
    def calculateClippingPlanes(self) -> None: ...
    def captureTransformVariant(self, name: str) -> None: ...
    def deleteTransformVariant(self, variant: vrdTransformNodeVariant) -> None: ...
    def findTransformVariant(self, name: str) -> vrdTransformNodeVariant: ...
    def getAimConstraintSources(self) -> List[vrdNode]: ...
    def getAimVisualizationScale(self) -> float: ...
    def getAimVisualizationVisible(self) -> bool: ...
    def getApplyColorCorrectionToBackground(self) -> bool: ...
    def getApplyColorCorrectionToForeground(self) -> bool: ...
    def getAutofocus(self) -> bool: ...
    def getAutofocusTransitionTime(self) -> int: ...
    def getBlendAmount(self) -> float: ...
    def getBlendMapLeftEye(self) -> vrdImage: ...
    def getBlendMapRightEye(self) -> vrdImage: ...
    def getBlendMode(self) -> vrCameraTypes.BlendMode: ...
    def getBoundingBox(self) -> vrdBoundingBox: ...
    def getCameraCollider(self) -> vrdCameraCollider: ...
    def getCameraTrack(self, cameraTrackIndex: int) -> vrdCameraTrackNode: ...
    def getCameraTrackCount(self) -> int: ...
    def getCameraTracks(self) -> List[vrdCameraTrackNode]: ...
    def getChild(self, index: int) -> vrdNode: ...
    def getChildCount(self) -> int: ...
    def getChildIndex(self, child: vrdNode) -> int: ...
    def getChildren(self) -> List[vrdNode]: ...
    def getChildrenRecursive(self) -> List[vrdNode]: ...
    def getChildrenRef(self) -> vrdNodeList: ...
    def getColorCorrectionBrightness(self) -> float: ...
    def getColorCorrectionContrast(self) -> float: ...
    def getColorCorrectionHueOffset(self) -> float: ...
    def getColorCorrectionSaturation(self) -> float: ...
    def getCustomFrustumEnabled(self) -> bool: ...
    def getCustomProjectionMatrix(self) -> QMatrix4x4: ...
    def getDefaultCameraTrack(self) -> vrdCameraTrackNode: ...
    def getDepthOfField(self) -> bool: ...
    def getDepthOfFieldMode(self) -> vrCameraTypes.DepthOfFieldMode: ...
    def getDistanceFog(self) -> bool: ...
    def getDistanceFogColor(self) -> QColor: ...
    def getDistanceFogDensity(self) -> float: ...
    def getDistanceFogEnableNoiseSizeUniform(self) -> bool: ...
    def getDistanceFogFalloff(self) -> vrCameraTypes.FogFalloffMode: ...
    def getDistanceFogNoise(self) -> float: ...
    def getDistanceFogNoiseOffset(self) -> QVector3D: ...
    def getDistanceFogNoiseSize(self) -> QVector3D: ...
    def getDistanceFogRange(self) -> float: ...
    def getDistortion(self) -> bool: ...
    def getDistortionMapLeftEye(self) -> vrdImage: ...
    def getDistortionMapRightEye(self) -> vrdImage: ...
    def getDollyZoom(self) -> bool: ...
    def getEulerRotationOrder(self) -> vrTransformTypes.EulerRotationOrder: ...
    def getEvaluateNavigationMode(self) -> bool: ...
    def getFStop(self) -> float: ...
    def getFarClippingDistance(self) -> float: ...
    def getFocalLength(self) -> float: ...
    def getFocusDistance(self) -> float: ...
    def getFov(self) -> float: ...
    def getFovMode(self) -> vrCameraTypes.FovMode: ...
    def getFromAtUp(self) -> vrCameraFromAtUp: ...
    def getFromAtUpWorld(self) -> vrCameraFromAtUp: ...
    def getFrustum(self) -> QVector4D: ...
    def getFrustumBottom(self) -> float: ...
    def getFrustumLeft(self) -> float: ...
    def getFrustumRight(self) -> float: ...
    def getFrustumTop(self) -> float: ...
    def getGlare(self) -> bool: ...
    def getGlareIntensity(self) -> float: ...
    def getGlareRotation(self) -> float: ...
    def getGlareSize(self) -> float: ...
    def getGlareStreaks(self) -> int: ...
    def getGlareThreshold(self) -> float: ...
    def getGlow(self) -> bool: ...
    def getGlowFalloff(self) -> float: ...
    def getGlowIntensity(self) -> float: ...
    def getGlowSize(self) -> float: ...
    def getGlowThreshold(self) -> float: ...
    def getHeightFog(self) -> bool: ...
    def getHeightFogBlend(self) -> float: ...
    def getHeightFogColor(self) -> QColor: ...
    def getHeightFogDensity(self) -> float: ...
    def getHeightFogEnableNoiseSizeUniform(self) -> bool: ...
    def getHeightFogFalloff(self) -> vrCameraTypes.FogFalloffMode: ...
    def getHeightFogNoise(self) -> float: ...
    def getHeightFogNoiseOffset(self) -> QVector3D: ...
    def getHeightFogNoiseSize(self) -> QVector3D: ...
    def getHeightFogRange(self) -> QVector2D: ...
    def getInteractiveDofQuality(self) -> vrCameraTypes.InteractiveDofQuality: ...
    def getLensFlare(self) -> bool: ...
    def getLocked(self) -> bool: ...
    def getMaterial(self) -> vrdMaterial: ...
    def getModuleNode(self) -> vrdCameraNode: ...
    def getMotionBlur(self) -> bool: ...
    def getName(self) -> str: ...
    def getNearClippingDistance(self) -> float: ...
    def getObjectId(self) -> int: ...
    def getOrCreateTransformNode(self) -> vrdNode: ...
    def getOrthographicSize(self) -> float: ...
    def getParent(self) -> vrdNode: ...
    def getPath(self) -> str: ...
    def getPerspectiveMatch(self) -> vrdPerspectiveMatch: ...
    def getPrincipalPointOffset(self) -> QVector2D: ...
    def getProjectionMode(self) -> vrCameraTypes.CameraProjectionMode: ...
    def getRoll(self) -> float: ...
    def getRotatePivot(self) -> QVector3D: ...
    def getRotatePivotTranslation(self) -> QVector3D: ...
    def getRotationAsEuler(self) -> QVector3D: ...
    def getRotationAsQuaternion(self) -> QQuaternion: ...
    def getRotationOrientationAsEuler(self) -> QVector3D: ...
    def getRotationOrientationAsQuaternion(self) -> QQuaternion: ...
    def getScale(self) -> QVector3D: ...
    def getScalePivot(self) -> QVector3D: ...
    def getScalePivotTranslation(self) -> QVector3D: ...
    def getSelectableFlag(self) -> bool: ...
    def getSensorSize(self) -> QVector2D: ...
    def getSharedNodes(self) -> List[vrdNode]: ...
    def getShear(self) -> QVector3D: ...
    def getShutterSpeed(self) -> float: ...
    def getSkew(self) -> float: ...
    def getStereoEyeSeparation(self) -> float: ...
    def getStereoLayout(self) -> vrCameraTypes.CameraStereoLayout: ...
    def getStereoPolarMergeAngle(self) -> float: ...
    def getSynchronizedNodes(self) -> List[vrdNode]: ...
    def getTonemapper(self) -> vrdTonemapper: ...
    def getTransform(self) -> QMatrix4x4: ...
    def getTransformVariants(self) -> List[vrdTransformNodeVariant]: ...
    def getTranslation(self) -> QVector3D: ...
    def getTurntable(self) -> vrdTurntable: ...
    def getUniquePath(self) -> str: ...
    def getUpVectorConstraintSources(self) -> List[vrdNode]: ...
    def getUseHightAsVRGround(self) -> bool: ...
    def getViewpointTransition(self) -> bool: ...
    def getViewpointTransitionDuration(self) -> float: ...
    def getVignetteFeather(self) -> float: ...
    def getVignetteRadius(self) -> float: ...
    def getVignetteRoundness(self) -> float: ...
    def getVisibilityFlag(self) -> bool: ...
    def getVisualizationScale(self) -> float: ...
    def getVisualizationVisible(self) -> bool: ...
    def getWireframeRendering(self) -> bool: ...
    def getWorldBoundingBox(self) -> vrdBoundingBox: ...
    def getWorldRotatePivot(self) -> QVector3D: ...
    def getWorldScalePivot(self) -> QVector3D: ...
    def getWorldTransform(self) -> QMatrix4x4: ...
    def getWorldTranslation(self) -> QVector3D: ...
    def hasAimConstraint(self) -> bool: ...
    def hasAimConstraintSource(self, sourceNode: vrdNode) -> bool: ...
    def hasParent(self, parent: vrdNode) -> bool: ...
    def isActive(self) -> bool: ...
    def isDefault(self) -> bool: ...
    def isEditable(self) -> bool: ...
    def isEditedAsset(self) -> bool: ...
    def isEqual(self, camera: vrdCameraBaseNode) -> bool: ...
    def isGroup(self) -> bool: ...
    def isImplicitShared(self) -> bool: ...
    def isInitialCamera(self) -> bool: ...
    def isNull(self) -> bool: ...
    def isOrthographic(self) -> bool: ...
    def isShared(self) -> bool: ...
    def isSharedWith(self, node: vrdNode) -> bool: ...
    def isSynchronized(self) -> bool: ...
    def isType(self, arg__1: object) -> bool: ...
    def isValid(self) -> bool: ...
    def isVisible(self) -> bool: ...
    def loadBlendMap(self, fileName: str, eye: vrCameraTypes.CameraEye) -> bool: ...
    def loadDistortionMap(self, fileName: str, eye: vrCameraTypes.CameraEye) -> bool: ...
    def mirrorView(self, axis: vrCameraTypes.CameraAxis) -> None: ...
    def removeAimConstraintSources(self) -> bool: ...
    def removeUpVectorConstraintSources(self) -> bool: ...
    def resetTransformation(self) -> None: ...
    def resetView(self) -> None: ...
    def setActive(self, active: bool) -> None: ...
    def setAimConstraintSources(self, nodes: Sequence[vrdNode]) -> None: ...
    def setAimVisualizationScale(self, value: float) -> None: ...
    def setAimVisualizationVisible(self, enable: bool) -> None: ...
    def setApplyColorCorrectionToBackground(self, enabled: bool) -> None: ...
    def setApplyColorCorrectionToForeground(self, enabled: bool) -> None: ...
    def setAutofocus(self, enabled: bool) -> None: ...
    def setAutofocusTransitionTime(self, value: int) -> None: ...
    def setBlendAmount(self, value: float) -> None: ...
    def setBlendMapLeftEye(self, image: vrdImage) -> None: ...
    def setBlendMapRightEye(self, image: vrdImage) -> None: ...
    def setBlendMode(self, mode: vrCameraTypes.BlendMode) -> None: ...
    def setColorCorrectionBrightness(self, value: float) -> None: ...
    def setColorCorrectionContrast(self, value: float) -> None: ...
    def setColorCorrectionHueOffset(self, value: float) -> None: ...
    def setColorCorrectionSaturation(self, value: float) -> None: ...
    def setCustomFrustumEnabled(self, enabled: bool) -> None: ...
    def setCustomProjectionMatrix(self, matrix: Union[QMatrix4x4, QTransform]) -> None: ...
    def setDepthOfField(self, enabled: bool) -> None: ...
    def setDepthOfFieldMode(self, mode: vrCameraTypes.DepthOfFieldMode) -> None: ...
    def setDistanceFog(self, enable: bool) -> None: ...
    def setDistanceFogColor(self, color: Union[QColor, QRgba64, Any, Qt.GlobalColor, str, int]) -> None: ...
    def setDistanceFogDensity(self, density: float) -> None: ...
    def setDistanceFogEnableNoiseSizeUniform(self, enable: bool) -> None: ...
    def setDistanceFogFalloff(self, value: vrCameraTypes.FogFalloffMode) -> None: ...
    def setDistanceFogNoise(self, intensity: float) -> None: ...
    def setDistanceFogNoiseOffset(self, offset: QVector3D) -> None: ...
    def setDistanceFogNoiseSize(self, size: QVector3D) -> None: ...
    def setDistanceFogRange(self, nearDistance: float) -> None: ...
    def setDistortion(self, enabled: bool) -> None: ...
    def setDistortionMapLeftEye(self, image: vrdImage) -> None: ...
    def setDistortionMapRightEye(self, image: vrdImage) -> None: ...
    def setDollyZoom(self, enabled: bool) -> None: ...
    def setEulerRotationOrder(self, rotationOrder: vrTransformTypes.EulerRotationOrder) -> None: ...
    def setEvaluateNavigationMode(self, enabled: bool) -> None: ...
    def setFStop(self, value: float) -> None: ...
    def setFarClippingDistance(self, value: float) -> None: ...
    def setFocalLength(self, value: float) -> None: ...
    def setFocusDistance(self, distance: float) -> None: ...
    def setFov(self, value: float) -> None: ...
    def setFovMode(self, mode: vrCameraTypes.FovMode) -> None: ...
    def setFromAtUp(self, fromAtUp: vrCameraFromAtUp) -> None: ...
    def setFromAtUpWorld(self, fromAtUp: vrCameraFromAtUp) -> None: ...
    def setFrustum(self, frustum: QVector4D) -> None: ...
    def setFrustumBottom(self, value: float) -> None: ...
    def setFrustumLeft(self, value: float) -> None: ...
    def setFrustumRight(self, value: float) -> None: ...
    def setFrustumTop(self, value: float) -> None: ...
    def setGlare(self, enabled: bool) -> None: ...
    def setGlareIntensity(self, value: float) -> None: ...
    def setGlareRotation(self, value: float) -> None: ...
    def setGlareSize(self, value: float) -> None: ...
    def setGlareStreaks(self, value: int) -> None: ...
    def setGlareThreshold(self, value: float) -> None: ...
    def setGlow(self, enabled: bool) -> None: ...
    def setGlowFalloff(self, value: float) -> None: ...
    def setGlowIntensity(self, value: float) -> None: ...
    def setGlowSize(self, value: float) -> None: ...
    def setGlowThreshold(self, value: float) -> None: ...
    def setHeightFog(self, enable: bool) -> None: ...
    def setHeightFogBlend(self, blend: float) -> None: ...
    def setHeightFogColor(self, color: Union[QColor, QRgba64, Any, Qt.GlobalColor, str, int]) -> None: ...
    def setHeightFogDensity(self, density: float) -> None: ...
    def setHeightFogEnableNoiseSizeUniform(self, enable: bool) -> None: ...
    def setHeightFogFalloff(self, value: vrCameraTypes.FogFalloffMode) -> None: ...
    def setHeightFogNoise(self, intensity: float) -> None: ...
    def setHeightFogNoiseOffset(self, offset: QVector3D) -> None: ...
    def setHeightFogNoiseSize(self, size: QVector3D) -> None: ...
    def setHeightFogRange(self, range: QVector2D) -> None: ...
    def setInitialCamera(self) -> None: ...
    def setInteractiveDofQuality(self, value: vrCameraTypes.InteractiveDofQuality) -> None: ...
    def setLensFlare(self, enabled: bool) -> None: ...
    def setLocked(self, locked: bool) -> None: ...
    def setMotionBlur(self, enabled: bool) -> None: ...
    def setName(self, name: str) -> None: ...
    def setNearClippingDistance(self, value: float) -> None: ...
    def setOrthographicSize(self, size: float) -> None: ...
    def setPrincipalPointOffset(self, offset: QVector2D) -> None: ...
    def setProjectionMode(self, mode: vrCameraTypes.CameraProjectionMode) -> None: ...
    def setRoll(self, value: float) -> None: ...
    def setRotatePivot(self, rotatePivot: QVector3D) -> None: ...
    def setRotatePivotTranslation(self, rotatePivotTranslation: QVector3D) -> None: ...
    def setRotationAsEuler(self, rotation: QVector3D) -> None: ...
    def setRotationAsQuaternion(self, rotation: QQuaternion) -> None: ...
    def setRotationOrientationAsEuler(self, rotationOrientation: QVector3D) -> None: ...
    def setRotationOrientationAsQuaternion(self, orientation: QQuaternion) -> None: ...
    def setScale(self, scale: QVector3D) -> None: ...
    def setScalePivot(self, scalePivot: QVector3D) -> None: ...
    def setScalePivotTranslation(self, scalePivotTranslation: QVector3D) -> None: ...
    def setSelectableFlag(self, selectable: bool) -> None: ...
    def setSensorSize(self, size: QVector2D) -> None: ...
    def setShear(self, shear: QVector3D) -> None: ...
    def setShutterSpeed(self, value: float) -> None: ...
    def setSkew(self, value: float) -> None: ...
    def setStereoEyeSeparation(self, value: float) -> None: ...
    def setStereoLayout(self, layout: vrCameraTypes.CameraStereoLayout) -> None: ...
    def setStereoPolarMergeAngle(self, value: float) -> None: ...
    def setToCurrentView(self) -> None: ...
    def setTransform(self, matrix: Union[QMatrix4x4, QTransform]) -> None: ...
    def setTranslation(self, translation: QVector3D) -> None: ...
    def setUpVectorConstraintSources(self, nodes: Sequence[vrdNode]) -> None: ...
    def setUseHightAsVRGround(self, value: bool) -> None: ...
    def setViewpointTransition(self, enabled: bool) -> None: ...
    def setViewpointTransitionDuration(self, seconds: float) -> None: ...
    def setVignetteFeather(self, value: float) -> None: ...
    def setVignetteRadius(self, value: float) -> None: ...
    def setVignetteRoundness(self, value: float) -> None: ...
    def setVisibilityFlag(self, visible: bool) -> None: ...
    def setVisualizationScale(self, value: float) -> None: ...
    def setVisualizationVisible(self, enable: bool) -> None: ...
    def setWireframeRendering(self, enabled: bool) -> None: ...
    def setWorldRotatePivot(self, rotatePivot: QVector3D) -> None: ...
    def setWorldScalePivot(self, scalePivot: QVector3D) -> None: ...
    def setWorldTransform(self, matrix: Union[QMatrix4x4, QTransform]) -> None: ...
    def setWorldTranslation(self, translation: QVector3D) -> None: ...
    def updateFromPerspectiveMatch(self) -> None: ...

class vrdCameraTrackNode:
    __doc__: NoneType
    __module__: str
    fadeInDurationProperty: str
    transitionDurationProperty: str
    pauseDurationProperty: str
    playingProperty: str
    viewpointsProperty: str
    viewpointCountProperty: str
    def __copy__(self) -> None: ...
    def __delattr__(self) -> None: ...
    def __dir__(self, /): ...
    def __eq__(self) -> None: ...
    def __format__(self, format_spec, /): ...
    def __ge__(self) -> None: ...
    def __getattribute__(self) -> None: ...
    def __getstate__(self, /): ...
    def __gt__(self) -> None: ...
    def __hash__(self) -> None: ...
    def __init__(self) -> None: ...
    def __init_subclass__(cls) -> None: ...
    def __le__(self) -> None: ...
    def __lshift__(self) -> None: ...
    def __lt__(self) -> None: ...
    def __ne__(self) -> None: ...
    def __new__(cls) -> None: ...
    def __reduce__(self, /): ...
    def __reduce_ex__(self, protocol, /): ...
    def __repr__(self) -> None: ...
    def __rlshift__(self) -> None: ...
    def __rrshift__(self) -> None: ...
    def __rshift__(self) -> None: ...
    def __setattr__(self) -> None: ...
    def __sizeof__(self, /): ...
    def __str__(self) -> None: ...
    def __subclasshook__(self) -> None: ...
    def applyMaterial(self, material: vrdMaterial) -> None: ...
    def asType(self, arg__1: object) -> object: ...
    def getBoundingBox(self) -> vrdBoundingBox: ...
    def getChild(self, index: int) -> vrdNode: ...
    def getChildCount(self) -> int: ...
    def getChildIndex(self, child: vrdNode) -> int: ...
    def getChildren(self) -> List[vrdNode]: ...
    def getChildrenRecursive(self) -> List[vrdNode]: ...
    def getChildrenRef(self) -> vrdNodeList: ...
    def getFadeInDuration(self) -> float: ...
    def getLocked(self) -> bool: ...
    def getMaterial(self) -> vrdMaterial: ...
    def getName(self) -> str: ...
    def getObjectId(self) -> int: ...
    def getOrCreateTransformNode(self) -> vrdNode: ...
    def getParent(self) -> vrdNode: ...
    def getPath(self) -> str: ...
    def getPauseDuration(self) -> float: ...
    def getPlaying(self) -> bool: ...
    def getSelectableFlag(self) -> bool: ...
    def getSharedNodes(self) -> List[vrdNode]: ...
    def getSynchronizedNodes(self) -> List[vrdNode]: ...
    def getTransitionDuration(self) -> float: ...
    def getType(self) -> vrCameraTypes.CameraTrackType: ...
    def getUniquePath(self) -> str: ...
    def getViewpoint(self, index: int) -> vrdViewpointNode: ...
    def getViewpointCount(self) -> int: ...
    def getViewpoints(self) -> List[vrdViewpointNode]: ...
    def getVisibilityFlag(self) -> bool: ...
    def getWorldBoundingBox(self) -> vrdBoundingBox: ...
    def getWorldTransform(self) -> QMatrix4x4: ...
    def hasParent(self, parent: vrdNode) -> bool: ...
    def isEditable(self) -> bool: ...
    def isEditedAsset(self) -> bool: ...
    def isGroup(self) -> bool: ...
    def isImplicitShared(self) -> bool: ...
    def isNull(self) -> bool: ...
    def isRenderQueueCameraTrack(self) -> bool: ...
    def isShared(self) -> bool: ...
    def isSharedWith(self, node: vrdNode) -> bool: ...
    def isSynchronized(self) -> bool: ...
    def isType(self, arg__1: object) -> bool: ...
    def isValid(self) -> bool: ...
    def isVariantSetCameraTrack(self) -> bool: ...
    def isVisible(self) -> bool: ...
    def setFadeInDuration(self, duration: float) -> None: ...
    def setLocked(self, locked: bool) -> None: ...
    def setName(self, name: str) -> None: ...
    def setPauseDuration(self, duration: float) -> None: ...
    def setPlaying(self, playing: bool) -> None: ...
    def setSelectableFlag(self, selectable: bool) -> None: ...
    def setTransitionDuration(self, duration: float) -> None: ...
    def setVisibilityFlag(self, visible: bool) -> None: ...

class vrdCarbon2DMaterial:
    __doc__: NoneType
    __module__: str
    diffuseColorProperty: str
    diffuseColorSpectrumProperty: str
    glossyColorProperty: str
    glossyColorSpectrumProperty: str
    roughnessProperty: str
    clearcoatProperty: str
    carbonPatternProperty: str
    bumpTextureProperty: str
    incandescenceProperty: str
    displacementTextureProperty: str
    def __copy__(self) -> None: ...
    def __delattr__(self) -> None: ...
    def __dir__(self, /): ...
    def __eq__(self) -> None: ...
    def __format__(self, format_spec, /): ...
    def __ge__(self) -> None: ...
    def __getattribute__(self) -> None: ...
    def __getstate__(self, /): ...
    def __gt__(self) -> None: ...
    def __hash__(self) -> None: ...
    def __init__(self) -> None: ...
    def __init_subclass__(cls) -> None: ...
    def __le__(self) -> None: ...
    def __lshift__(self) -> None: ...
    def __lt__(self) -> None: ...
    def __ne__(self) -> None: ...
    def __new__(cls) -> None: ...
    def __reduce__(self, /): ...
    def __reduce_ex__(self, protocol, /): ...
    def __repr__(self) -> None: ...
    def __rlshift__(self) -> None: ...
    def __rrshift__(self) -> None: ...
    def __rshift__(self) -> None: ...
    def __setattr__(self) -> None: ...
    def __sizeof__(self, /): ...
    def __str__(self) -> None: ...
    def __subclasshook__(self) -> None: ...
    def asType(self, arg__1: object) -> object: ...
    def duplicate(self, name: str = '') -> vrdMaterial: ...
    def getAnalytic(self) -> vrdAnalyticSettings: ...
    def getBumpTexture(self) -> vrdBumpTexture: ...
    def getCarbonPattern(self) -> vrdCarbonPattern2D: ...
    def getClearcoat(self) -> vrdClearcoat: ...
    def getCommon(self) -> vrdBRDFCommonSettings: ...
    def getDiffuseColor(self) -> QVector3D: ...
    def getDiffuseColorSpectrum(self) -> vrSpectrum: ...
    def getDisplacementTexture(self) -> vrdDisplacementTexture: ...
    def getGlossyColor(self) -> QVector3D: ...
    def getGlossyColorSpectrum(self) -> vrSpectrum: ...
    def getIcon(self) -> QIcon: ...
    def getIncandescence(self) -> vrdIncandescence: ...
    def getLocked(self) -> bool: ...
    def getNPR(self) -> vrdNPRSettings: ...
    def getName(self) -> str: ...
    def getObjectId(self) -> int: ...
    def getPreview(self) -> QImage: ...
    def getPreviewScene(self) -> str: ...
    def getRaytracing(self) -> vrdMaterialRaytracingSettings: ...
    def getRoughness(self) -> float: ...
    def getRoundedEdges(self) -> vrdRoundedEdges: ...
    def getTextures(self) -> List[vrdTexture]: ...
    def getTransparency(self) -> vrdTransparency: ...
    def isAsset(self) -> bool: ...
    def isComponent(self) -> bool: ...
    def isDisplacementActive(self) -> bool: ...
    def isEditable(self) -> bool: ...
    def isEditedAsset(self) -> bool: ...
    def isNull(self) -> bool: ...
    def isType(self, arg__1: object) -> bool: ...
    def isValid(self) -> bool: ...
    def setDiffuseColor(self, value: QVector3D) -> None: ...
    def setDiffuseColorSpectrum(self, value: Union[vrSpectrum, QVector3D]) -> None: ...
    def setGlossyColor(self, value: QVector3D) -> None: ...
    def setGlossyColorSpectrum(self, value: Union[vrSpectrum, QVector3D]) -> None: ...
    def setInlineAllImageSequences(self, value: bool) -> List[vrdImage]: ...
    def setLocked(self, locked: bool) -> None: ...
    def setName(self, name: str) -> None: ...
    def setPreviewScene(self, name: str) -> None: ...
    def setRoughness(self, roughness: float) -> None: ...

class vrdCarbonMaterial:
    __doc__: NoneType
    __module__: str
    diffuseColorProperty: str
    diffuseColorSpectrumProperty: str
    glossyColorProperty: str
    glossyColorSpectrumProperty: str
    roughnessProperty: str
    clearcoatProperty: str
    carbonPatternProperty: str
    bumpTextureProperty: str
    incandescenceProperty: str
    displacementTextureProperty: str
    def __copy__(self) -> None: ...
    def __delattr__(self) -> None: ...
    def __dir__(self, /): ...
    def __eq__(self) -> None: ...
    def __format__(self, format_spec, /): ...
    def __ge__(self) -> None: ...
    def __getattribute__(self) -> None: ...
    def __getstate__(self, /): ...
    def __gt__(self) -> None: ...
    def __hash__(self) -> None: ...
    def __init__(self) -> None: ...
    def __init_subclass__(cls) -> None: ...
    def __le__(self) -> None: ...
    def __lshift__(self) -> None: ...
    def __lt__(self) -> None: ...
    def __ne__(self) -> None: ...
    def __new__(cls) -> None: ...
    def __reduce__(self, /): ...
    def __reduce_ex__(self, protocol, /): ...
    def __repr__(self) -> None: ...
    def __rlshift__(self) -> None: ...
    def __rrshift__(self) -> None: ...
    def __rshift__(self) -> None: ...
    def __setattr__(self) -> None: ...
    def __sizeof__(self, /): ...
    def __str__(self) -> None: ...
    def __subclasshook__(self) -> None: ...
    def asType(self, arg__1: object) -> object: ...
    def duplicate(self, name: str = '') -> vrdMaterial: ...
    def getAnalytic(self) -> vrdAnalyticSettings: ...
    def getBumpTexture(self) -> vrdBumpTexture: ...
    def getCarbonPattern(self) -> vrdCarbonPattern3D: ...
    def getClearcoat(self) -> vrdClearcoat: ...
    def getCommon(self) -> vrdBRDFCommonSettings: ...
    def getDiffuseColor(self) -> QVector3D: ...
    def getDiffuseColorSpectrum(self) -> vrSpectrum: ...
    def getDisplacementTexture(self) -> vrdDisplacementTexture: ...
    def getGlossyColor(self) -> QVector3D: ...
    def getGlossyColorSpectrum(self) -> vrSpectrum: ...
    def getIcon(self) -> QIcon: ...
    def getIncandescence(self) -> vrdIncandescence: ...
    def getLocked(self) -> bool: ...
    def getNPR(self) -> vrdNPRSettings: ...
    def getName(self) -> str: ...
    def getObjectId(self) -> int: ...
    def getPreview(self) -> QImage: ...
    def getPreviewScene(self) -> str: ...
    def getRaytracing(self) -> vrdMaterialRaytracingSettings: ...
    def getRoughness(self) -> float: ...
    def getRoundedEdges(self) -> vrdRoundedEdges: ...
    def getTextures(self) -> List[vrdTexture]: ...
    def getTransparency(self) -> vrdTransparency: ...
    def isAsset(self) -> bool: ...
    def isComponent(self) -> bool: ...
    def isDisplacementActive(self) -> bool: ...
    def isEditable(self) -> bool: ...
    def isEditedAsset(self) -> bool: ...
    def isNull(self) -> bool: ...
    def isType(self, arg__1: object) -> bool: ...
    def isValid(self) -> bool: ...
    def setDiffuseColor(self, value: QVector3D) -> None: ...
    def setDiffuseColorSpectrum(self, value: Union[vrSpectrum, QVector3D]) -> None: ...
    def setGlossyColor(self, value: QVector3D) -> None: ...
    def setGlossyColorSpectrum(self, value: Union[vrSpectrum, QVector3D]) -> None: ...
    def setInlineAllImageSequences(self, value: bool) -> List[vrdImage]: ...
    def setLocked(self, locked: bool) -> None: ...
    def setName(self, name: str) -> None: ...
    def setPreviewScene(self, name: str) -> None: ...
    def setRoughness(self, roughness: float) -> None: ...

class vrdCarbonPattern:
    __doc__: NoneType
    __module__: str
    Pattern2x2: Type
    Pattern3x1Staircase: Type
    Pattern3x1Interweaved: Type
    Pattern5x1: Type
    typeProperty: str
    sizeProperty: str
    intensityProperty: str
    def Type(self) -> None: ...
    def __copy__(self) -> None: ...
    def __delattr__(self) -> None: ...
    def __dir__(self, /): ...
    def __eq__(self) -> None: ...
    def __format__(self, format_spec, /): ...
    def __ge__(self) -> None: ...
    def __getattribute__(self) -> None: ...
    def __getstate__(self, /): ...
    def __gt__(self) -> None: ...
    def __hash__(self) -> None: ...
    def __init__(self) -> None: ...
    def __init_subclass__(cls) -> None: ...
    def __le__(self) -> None: ...
    def __lshift__(self) -> None: ...
    def __lt__(self) -> None: ...
    def __ne__(self) -> None: ...
    def __new__(cls) -> None: ...
    def __reduce__(self, /): ...
    def __reduce_ex__(self, protocol, /): ...
    def __repr__(self) -> None: ...
    def __rlshift__(self) -> None: ...
    def __rrshift__(self) -> None: ...
    def __rshift__(self) -> None: ...
    def __setattr__(self) -> None: ...
    def __sizeof__(self, /): ...
    def __str__(self) -> None: ...
    def __subclasshook__(self) -> None: ...
    def asType(self, arg__1: object) -> object: ...
    def getIntensity(self) -> float: ...
    def getObjectId(self) -> int: ...
    def getSize(self) -> float: ...
    def getType(self) -> vrdCarbonPattern.Type: ...
    def isNull(self) -> bool: ...
    def isType(self, arg__1: object) -> bool: ...
    def isValid(self) -> bool: ...
    def setIntensity(self, value: float) -> None: ...
    def setSize(self, value: float) -> None: ...
    def setType(self, value: vrdCarbonPattern.Type) -> None: ...

class vrdCarbonPattern2D:
    __doc__: NoneType
    __module__: str
    rotationProperty: str
    def Type(self) -> None: ...
    def __copy__(self) -> None: ...
    def __delattr__(self) -> None: ...
    def __dir__(self, /): ...
    def __eq__(self) -> None: ...
    def __format__(self, format_spec, /): ...
    def __ge__(self) -> None: ...
    def __getattribute__(self) -> None: ...
    def __getstate__(self, /): ...
    def __gt__(self) -> None: ...
    def __hash__(self) -> None: ...
    def __init__(self) -> None: ...
    def __init_subclass__(cls) -> None: ...
    def __le__(self) -> None: ...
    def __lshift__(self) -> None: ...
    def __lt__(self) -> None: ...
    def __ne__(self) -> None: ...
    def __new__(cls) -> None: ...
    def __reduce__(self, /): ...
    def __reduce_ex__(self, protocol, /): ...
    def __repr__(self) -> None: ...
    def __rlshift__(self) -> None: ...
    def __rrshift__(self) -> None: ...
    def __rshift__(self) -> None: ...
    def __setattr__(self) -> None: ...
    def __sizeof__(self, /): ...
    def __str__(self) -> None: ...
    def __subclasshook__(self) -> None: ...
    def asType(self, arg__1: object) -> object: ...
    def getIntensity(self) -> float: ...
    def getObjectId(self) -> int: ...
    def getRotation(self) -> float: ...
    def getSize(self) -> float: ...
    def getType(self) -> vrdCarbonPattern.Type: ...
    def isNull(self) -> bool: ...
    def isType(self, arg__1: object) -> bool: ...
    def isValid(self) -> bool: ...
    def setIntensity(self, value: float) -> None: ...
    def setRotation(self, value: float) -> None: ...
    def setSize(self, value: float) -> None: ...
    def setType(self, value: vrdCarbonPattern.Type) -> None: ...

class vrdCarbonPattern3D:
    __doc__: NoneType
    __module__: str
    rotationXProperty: str
    rotationYProperty: str
    rotationZProperty: str
    def Type(self) -> None: ...
    def __copy__(self) -> None: ...
    def __delattr__(self) -> None: ...
    def __dir__(self, /): ...
    def __eq__(self) -> None: ...
    def __format__(self, format_spec, /): ...
    def __ge__(self) -> None: ...
    def __getattribute__(self) -> None: ...
    def __getstate__(self, /): ...
    def __gt__(self) -> None: ...
    def __hash__(self) -> None: ...
    def __init__(self) -> None: ...
    def __init_subclass__(cls) -> None: ...
    def __le__(self) -> None: ...
    def __lshift__(self) -> None: ...
    def __lt__(self) -> None: ...
    def __ne__(self) -> None: ...
    def __new__(cls) -> None: ...
    def __reduce__(self, /): ...
    def __reduce_ex__(self, protocol, /): ...
    def __repr__(self) -> None: ...
    def __rlshift__(self) -> None: ...
    def __rrshift__(self) -> None: ...
    def __rshift__(self) -> None: ...
    def __setattr__(self) -> None: ...
    def __sizeof__(self, /): ...
    def __str__(self) -> None: ...
    def __subclasshook__(self) -> None: ...
    def asType(self, arg__1: object) -> object: ...
    def getIntensity(self) -> float: ...
    def getObjectId(self) -> int: ...
    def getRotationX(self) -> float: ...
    def getRotationY(self) -> float: ...
    def getRotationZ(self) -> float: ...
    def getSize(self) -> float: ...
    def getType(self) -> vrdCarbonPattern.Type: ...
    def isNull(self) -> bool: ...
    def isType(self, arg__1: object) -> bool: ...
    def isValid(self) -> bool: ...
    def setIntensity(self, value: float) -> None: ...
    def setRotationX(self, value: float) -> None: ...
    def setRotationY(self, value: float) -> None: ...
    def setRotationZ(self, value: float) -> None: ...
    def setSize(self, value: float) -> None: ...
    def setType(self, value: vrdCarbonPattern.Type) -> None: ...

class vrdChromeMaterial:
    __doc__: NoneType
    __module__: str
    HighlyReflective: MetalType
    Aluminium: MetalType
    AmorphousCarbon: MetalType
    Silver: MetalType
    Gold: MetalType
    Cobalt: MetalType
    Copper: MetalType
    Chromium: MetalType
    Lithium: MetalType
    Mercury: MetalType
    Nickel: MetalType
    Potassium: MetalType
    Platinum: MetalType
    Iridium: MetalType
    Silicon: MetalType
    AmorphousSilicon: MetalType
    Sodium: MetalType
    Rhodium: MetalType
    Tungsten: MetalType
    Vanadium: MetalType
    Iron: MetalType
    reflectionColorProperty: str
    reflectionColorSpectrumProperty: str
    smearProperty: str
    contrastProperty: str
    saturationProperty: str
    metalTypeProperty: str
    useRoughnessProperty: str
    roughnessProperty: str
    roughnessTextureProperty: str
    bumpTextureProperty: str
    incandescenceProperty: str
    displacementTextureProperty: str
    def MetalType(self) -> None: ...
    def __copy__(self) -> None: ...
    def __delattr__(self) -> None: ...
    def __dir__(self, /): ...
    def __eq__(self) -> None: ...
    def __format__(self, format_spec, /): ...
    def __ge__(self) -> None: ...
    def __getattribute__(self) -> None: ...
    def __getstate__(self, /): ...
    def __gt__(self) -> None: ...
    def __hash__(self) -> None: ...
    def __init__(self) -> None: ...
    def __init_subclass__(cls) -> None: ...
    def __le__(self) -> None: ...
    def __lshift__(self) -> None: ...
    def __lt__(self) -> None: ...
    def __ne__(self) -> None: ...
    def __new__(cls) -> None: ...
    def __reduce__(self, /): ...
    def __reduce_ex__(self, protocol, /): ...
    def __repr__(self) -> None: ...
    def __rlshift__(self) -> None: ...
    def __rrshift__(self) -> None: ...
    def __rshift__(self) -> None: ...
    def __setattr__(self) -> None: ...
    def __sizeof__(self, /): ...
    def __str__(self) -> None: ...
    def __subclasshook__(self) -> None: ...
    def asType(self, arg__1: object) -> object: ...
    def duplicate(self, name: str = '') -> vrdMaterial: ...
    def getAnalytic(self) -> vrdAnalyticSettings: ...
    def getBumpTexture(self) -> vrdBumpTexture: ...
    def getCommon(self) -> vrdBRDFCommonSettings: ...
    def getContrast(self) -> float: ...
    def getDisplacementTexture(self) -> vrdDisplacementTexture: ...
    def getIcon(self) -> QIcon: ...
    def getIncandescence(self) -> vrdIncandescence: ...
    def getLocked(self) -> bool: ...
    def getMetalType(self) -> vrdChromeMaterial.MetalType: ...
    def getNPR(self) -> vrdNPRSettings: ...
    def getName(self) -> str: ...
    def getObjectId(self) -> int: ...
    def getPreview(self) -> QImage: ...
    def getPreviewScene(self) -> str: ...
    def getRaytracing(self) -> vrdMaterialRaytracingSettings: ...
    def getReflectionColor(self) -> QVector3D: ...
    def getReflectionColorSpectrum(self) -> vrSpectrum: ...
    def getRoughness(self) -> float: ...
    def getRoughnessTexture(self) -> vrdRoughnessTexture: ...
    def getRoundedEdges(self) -> vrdRoundedEdges: ...
    def getSaturation(self) -> float: ...
    def getSmear(self) -> float: ...
    def getTextures(self) -> List[vrdTexture]: ...
    def getTransparency(self) -> vrdTransparency: ...
    def getUseRoughness(self) -> bool: ...
    def isAsset(self) -> bool: ...
    def isComponent(self) -> bool: ...
    def isDisplacementActive(self) -> bool: ...
    def isEditable(self) -> bool: ...
    def isEditedAsset(self) -> bool: ...
    def isNull(self) -> bool: ...
    def isType(self, arg__1: object) -> bool: ...
    def isValid(self) -> bool: ...
    def setContrast(self, contrast: float) -> None: ...
    def setInlineAllImageSequences(self, value: bool) -> List[vrdImage]: ...
    def setLocked(self, locked: bool) -> None: ...
    def setMetalType(self, type: vrdChromeMaterial.MetalType) -> None: ...
    def setName(self, name: str) -> None: ...
    def setPreviewScene(self, name: str) -> None: ...
    def setReflectionColor(self, color: QVector3D) -> None: ...
    def setReflectionColorSpectrum(self, value: Union[vrSpectrum, QVector3D]) -> None: ...
    def setRoughness(self, roughness: float) -> None: ...
    def setSaturation(self, saturation: float) -> None: ...
    def setSmear(self, smear: float) -> None: ...
    def setUseRoughness(self, use: bool) -> None: ...

class vrdChunkMaterial:
    chunks: getset_descriptor
    __doc__: NoneType
    __module__: str
    AutoDetection: TransparencyMode
    ForceTransparent: TransparencyMode
    ForceOpaque: TransparencyMode
    sortKeyProperty: str
    transparencyModeProperty: str
    chunksRefProperty: str
    def TransparencyMode(self) -> None: ...
    def __copy__(self) -> None: ...
    def __delattr__(self) -> None: ...
    def __dir__(self, /): ...
    def __eq__(self) -> None: ...
    def __format__(self, format_spec, /): ...
    def __ge__(self) -> None: ...
    def __getattribute__(self) -> None: ...
    def __getstate__(self, /): ...
    def __gt__(self) -> None: ...
    def __hash__(self) -> None: ...
    def __init__(self) -> None: ...
    def __init_subclass__(cls) -> None: ...
    def __le__(self) -> None: ...
    def __lshift__(self) -> None: ...
    def __lt__(self) -> None: ...
    def __ne__(self) -> None: ...
    def __new__(cls) -> None: ...
    def __reduce__(self, /): ...
    def __reduce_ex__(self, protocol, /): ...
    def __repr__(self) -> None: ...
    def __rlshift__(self) -> None: ...
    def __rrshift__(self) -> None: ...
    def __rshift__(self) -> None: ...
    def __setattr__(self) -> None: ...
    def __sizeof__(self, /): ...
    def __str__(self) -> None: ...
    def __subclasshook__(self) -> None: ...
    def asType(self, arg__1: object) -> object: ...
    def duplicate(self, name: str = '') -> vrdMaterial: ...
    def getChunksRef(self) -> vrdMaterialChunkList: ...
    def getIcon(self) -> QIcon: ...
    def getLocked(self) -> bool: ...
    def getName(self) -> str: ...
    def getObjectId(self) -> int: ...
    def getPreview(self) -> QImage: ...
    def getPreviewScene(self) -> str: ...
    def getSortKey(self) -> int: ...
    def getTextures(self) -> List[vrdTexture]: ...
    def getTransparencyMode(self) -> vrdChunkMaterial.TransparencyMode: ...
    def isAsset(self) -> bool: ...
    def isComponent(self) -> bool: ...
    def isEditable(self) -> bool: ...
    def isEditedAsset(self) -> bool: ...
    def isNull(self) -> bool: ...
    def isType(self, arg__1: object) -> bool: ...
    def isValid(self) -> bool: ...
    def setInlineAllImageSequences(self, value: bool) -> List[vrdImage]: ...
    def setLocked(self, locked: bool) -> None: ...
    def setName(self, name: str) -> None: ...
    def setPreviewScene(self, name: str) -> None: ...
    def setSortKey(self, value: int) -> None: ...
    def setTransparencyMode(self, mode: vrdChunkMaterial.TransparencyMode) -> None: ...

class vrdClearcoat:
    __doc__: NoneType
    __module__: str
    Off: Type
    Fast: Type
    Accurate: Type
    UseRefractionIndex: Type
    typeProperty: str
    colorProperty: str
    colorSpectrumProperty: str
    reflectivityProperty: str
    roughnessProperty: str
    thicknessProperty: str
    densityProperty: str
    refractionIndexProperty: str
    useOrangePeelProperty: str
    orangePeelFrequencyProperty: str
    orangePeelIntensityProperty: str
    def Type(self) -> None: ...
    def __copy__(self) -> None: ...
    def __delattr__(self) -> None: ...
    def __dir__(self, /): ...
    def __eq__(self) -> None: ...
    def __format__(self, format_spec, /): ...
    def __ge__(self) -> None: ...
    def __getattribute__(self) -> None: ...
    def __getstate__(self, /): ...
    def __gt__(self) -> None: ...
    def __hash__(self) -> None: ...
    def __init__(self) -> None: ...
    def __init_subclass__(cls) -> None: ...
    def __le__(self) -> None: ...
    def __lshift__(self) -> None: ...
    def __lt__(self) -> None: ...
    def __ne__(self) -> None: ...
    def __new__(cls) -> None: ...
    def __reduce__(self, /): ...
    def __reduce_ex__(self, protocol, /): ...
    def __repr__(self) -> None: ...
    def __rlshift__(self) -> None: ...
    def __rrshift__(self) -> None: ...
    def __rshift__(self) -> None: ...
    def __setattr__(self) -> None: ...
    def __sizeof__(self, /): ...
    def __str__(self) -> None: ...
    def __subclasshook__(self) -> None: ...
    def asType(self, arg__1: object) -> object: ...
    def getColor(self) -> QVector3D: ...
    def getColorSpectrum(self) -> vrSpectrum: ...
    def getDensity(self) -> float: ...
    def getObjectId(self) -> int: ...
    def getOrangePeelFrequency(self) -> float: ...
    def getOrangePeelIntensity(self) -> float: ...
    def getReflectivity(self) -> float: ...
    def getRefractionIndex(self) -> float: ...
    def getRoughness(self) -> float: ...
    def getThickness(self) -> float: ...
    def getType(self) -> vrdClearcoat.Type: ...
    def getUseOrangePeel(self) -> bool: ...
    def isNull(self) -> bool: ...
    def isType(self, arg__1: object) -> bool: ...
    def isValid(self) -> bool: ...
    def setColor(self, value: QVector3D) -> None: ...
    def setColorSpectrum(self, value: Union[vrSpectrum, QVector3D]) -> None: ...
    def setDensity(self, value: float) -> None: ...
    def setOrangePeelFrequency(self, value: float) -> None: ...
    def setOrangePeelIntensity(self, value: float) -> None: ...
    def setReflectivity(self, value: float) -> None: ...
    def setRefractionIndex(self, value: float) -> None: ...
    def setRoughness(self, value: float) -> None: ...
    def setThickness(self, value: float) -> None: ...
    def setType(self, value: vrdClearcoat.Type) -> None: ...
    def setUseOrangePeel(self, value: bool) -> None: ...
    def supportsOrangePeel(self) -> bool: ...
    def supportsRefractionIndex(self) -> bool: ...
    def supportsThickness(self) -> bool: ...

class vrdClipPlaneNode:
    __doc__: NoneType
    __module__: str
    enabledProperty: str
    def __copy__(self) -> None: ...
    def __delattr__(self) -> None: ...
    def __dir__(self, /): ...
    def __eq__(self) -> None: ...
    def __format__(self, format_spec, /): ...
    def __ge__(self) -> None: ...
    def __getattribute__(self) -> None: ...
    def __getstate__(self, /): ...
    def __gt__(self) -> None: ...
    def __hash__(self) -> None: ...
    def __init__(self) -> None: ...
    def __init_subclass__(cls) -> None: ...
    def __le__(self) -> None: ...
    def __lshift__(self) -> None: ...
    def __lt__(self) -> None: ...
    def __ne__(self) -> None: ...
    def __new__(cls) -> None: ...
    def __reduce__(self, /): ...
    def __reduce_ex__(self, protocol, /): ...
    def __repr__(self) -> None: ...
    def __rlshift__(self) -> None: ...
    def __rrshift__(self) -> None: ...
    def __rshift__(self) -> None: ...
    def __setattr__(self) -> None: ...
    def __sizeof__(self, /): ...
    def __str__(self) -> None: ...
    def __subclasshook__(self) -> None: ...
    def applyMaterial(self, material: vrdMaterial) -> None: ...
    def asType(self, arg__1: object) -> object: ...
    def captureTransformVariant(self, name: str) -> None: ...
    def deleteTransformVariant(self, variant: vrdTransformNodeVariant) -> None: ...
    def findTransformVariant(self, name: str) -> vrdTransformNodeVariant: ...
    def getBoundingBox(self) -> vrdBoundingBox: ...
    def getChild(self, index: int) -> vrdNode: ...
    def getChildCount(self) -> int: ...
    def getChildIndex(self, child: vrdNode) -> int: ...
    def getChildren(self) -> List[vrdNode]: ...
    def getChildrenRecursive(self) -> List[vrdNode]: ...
    def getChildrenRef(self) -> vrdNodeList: ...
    def getEnabled(self) -> bool: ...
    def getEulerRotationOrder(self) -> vrTransformTypes.EulerRotationOrder: ...
    def getLocked(self) -> bool: ...
    def getMaterial(self) -> vrdMaterial: ...
    def getName(self) -> str: ...
    def getObjectId(self) -> int: ...
    def getOrCreateTransformNode(self) -> vrdNode: ...
    def getParent(self) -> vrdNode: ...
    def getPath(self) -> str: ...
    def getRotatePivot(self) -> QVector3D: ...
    def getRotatePivotTranslation(self) -> QVector3D: ...
    def getRotationAsEuler(self) -> QVector3D: ...
    def getRotationAsQuaternion(self) -> QQuaternion: ...
    def getRotationOrientationAsEuler(self) -> QVector3D: ...
    def getRotationOrientationAsQuaternion(self) -> QQuaternion: ...
    def getScale(self) -> QVector3D: ...
    def getScalePivot(self) -> QVector3D: ...
    def getScalePivotTranslation(self) -> QVector3D: ...
    def getSelectableFlag(self) -> bool: ...
    def getSharedNodes(self) -> List[vrdNode]: ...
    def getShear(self) -> QVector3D: ...
    def getSynchronizedNodes(self) -> List[vrdNode]: ...
    def getTransform(self) -> QMatrix4x4: ...
    def getTransformVariants(self) -> List[vrdTransformNodeVariant]: ...
    def getTranslation(self) -> QVector3D: ...
    def getUniquePath(self) -> str: ...
    def getVisibilityFlag(self) -> bool: ...
    def getWorldBoundingBox(self) -> vrdBoundingBox: ...
    def getWorldRotatePivot(self) -> QVector3D: ...
    def getWorldScalePivot(self) -> QVector3D: ...
    def getWorldTransform(self) -> QMatrix4x4: ...
    def getWorldTranslation(self) -> QVector3D: ...
    def hasParent(self, parent: vrdNode) -> bool: ...
    def isEditable(self) -> bool: ...
    def isEditedAsset(self) -> bool: ...
    def isGroup(self) -> bool: ...
    def isImplicitShared(self) -> bool: ...
    def isNull(self) -> bool: ...
    def isShared(self) -> bool: ...
    def isSharedWith(self, node: vrdNode) -> bool: ...
    def isSynchronized(self) -> bool: ...
    def isType(self, arg__1: object) -> bool: ...
    def isValid(self) -> bool: ...
    def isVisible(self) -> bool: ...
    def resetTransformation(self) -> None: ...
    def setEnabled(self, value: bool) -> None: ...
    def setEulerRotationOrder(self, rotationOrder: vrTransformTypes.EulerRotationOrder) -> None: ...
    def setLocked(self, locked: bool) -> None: ...
    def setName(self, name: str) -> None: ...
    def setRotatePivot(self, rotatePivot: QVector3D) -> None: ...
    def setRotatePivotTranslation(self, rotatePivotTranslation: QVector3D) -> None: ...
    def setRotationAsEuler(self, rotation: QVector3D) -> None: ...
    def setRotationAsQuaternion(self, rotation: QQuaternion) -> None: ...
    def setRotationOrientationAsEuler(self, rotationOrientation: QVector3D) -> None: ...
    def setRotationOrientationAsQuaternion(self, orientation: QQuaternion) -> None: ...
    def setScale(self, scale: QVector3D) -> None: ...
    def setScalePivot(self, scalePivot: QVector3D) -> None: ...
    def setScalePivotTranslation(self, scalePivotTranslation: QVector3D) -> None: ...
    def setSelectableFlag(self, selectable: bool) -> None: ...
    def setShear(self, shear: QVector3D) -> None: ...
    def setTransform(self, matrix: Union[QMatrix4x4, QTransform]) -> None: ...
    def setTranslation(self, translation: QVector3D) -> None: ...
    def setVisibilityFlag(self, visible: bool) -> None: ...
    def setWorldRotatePivot(self, rotatePivot: QVector3D) -> None: ...
    def setWorldScalePivot(self, scalePivot: QVector3D) -> None: ...
    def setWorldTransform(self, matrix: Union[QMatrix4x4, QTransform]) -> None: ...
    def setWorldTranslation(self, translation: QVector3D) -> None: ...

class vrdColorCorrection:
    __doc__: NoneType
    __module__: str
    hueShiftProperty: str
    contrastProperty: str
    brightnessProperty: str
    saturationProperty: str
    def __copy__(self) -> None: ...
    def __delattr__(self) -> None: ...
    def __dir__(self, /): ...
    def __eq__(self) -> None: ...
    def __format__(self, format_spec, /): ...
    def __ge__(self) -> None: ...
    def __getattribute__(self) -> None: ...
    def __getstate__(self, /): ...
    def __gt__(self) -> None: ...
    def __hash__(self) -> None: ...
    def __init__(self) -> None: ...
    def __init_subclass__(cls) -> None: ...
    def __le__(self) -> None: ...
    def __lshift__(self) -> None: ...
    def __lt__(self) -> None: ...
    def __ne__(self) -> None: ...
    def __new__(cls) -> None: ...
    def __reduce__(self, /): ...
    def __reduce_ex__(self, protocol, /): ...
    def __repr__(self) -> None: ...
    def __rlshift__(self) -> None: ...
    def __rrshift__(self) -> None: ...
    def __rshift__(self) -> None: ...
    def __setattr__(self) -> None: ...
    def __sizeof__(self, /): ...
    def __str__(self) -> None: ...
    def __subclasshook__(self) -> None: ...
    def asType(self, arg__1: object) -> object: ...
    def getBrightness(self) -> float: ...
    def getContrast(self) -> float: ...
    def getHueShift(self) -> float: ...
    def getObjectId(self) -> int: ...
    def getSaturation(self) -> float: ...
    def isNull(self) -> bool: ...
    def isType(self, arg__1: object) -> bool: ...
    def isValid(self) -> bool: ...
    def setBrightness(self, value: float) -> None: ...
    def setContrast(self, contrast: float) -> None: ...
    def setHueShift(self, value: float) -> None: ...
    def setSaturation(self, saturation: float) -> None: ...

class vrdConstraintNode:
    __doc__: NoneType
    __module__: str
    activeProperty: str
    targetNodesProperty: str
    constrainedNodeProperty: str
    def __copy__(self) -> None: ...
    def __delattr__(self) -> None: ...
    def __dir__(self, /): ...
    def __eq__(self) -> None: ...
    def __format__(self, format_spec, /): ...
    def __ge__(self) -> None: ...
    def __getattribute__(self) -> None: ...
    def __getstate__(self, /): ...
    def __gt__(self) -> None: ...
    def __hash__(self) -> None: ...
    def __init__(self) -> None: ...
    def __init_subclass__(cls) -> None: ...
    def __le__(self) -> None: ...
    def __lshift__(self) -> None: ...
    def __lt__(self) -> None: ...
    def __ne__(self) -> None: ...
    def __new__(cls) -> None: ...
    def __reduce__(self, /): ...
    def __reduce_ex__(self, protocol, /): ...
    def __repr__(self) -> None: ...
    def __rlshift__(self) -> None: ...
    def __rrshift__(self) -> None: ...
    def __rshift__(self) -> None: ...
    def __setattr__(self) -> None: ...
    def __sizeof__(self, /): ...
    def __str__(self) -> None: ...
    def __subclasshook__(self) -> None: ...
    def applyMaterial(self, material: vrdMaterial) -> None: ...
    def asType(self, arg__1: object) -> object: ...
    def clearConstrainedNode(self) -> None: ...
    def clearTargetNodes(self) -> None: ...
    def getBoundingBox(self) -> vrdBoundingBox: ...
    def getChild(self, index: int) -> vrdNode: ...
    def getChildCount(self) -> int: ...
    def getChildIndex(self, child: vrdNode) -> int: ...
    def getChildren(self) -> List[vrdNode]: ...
    def getChildrenRecursive(self) -> List[vrdNode]: ...
    def getChildrenRef(self) -> vrdNodeList: ...
    def getConstrainedNode(self) -> vrdNode: ...
    def getLocked(self) -> bool: ...
    def getMaterial(self) -> vrdMaterial: ...
    def getName(self) -> str: ...
    def getObjectId(self) -> int: ...
    def getOrCreateTransformNode(self) -> vrdNode: ...
    def getParent(self) -> vrdNode: ...
    def getPath(self) -> str: ...
    def getSelectableFlag(self) -> bool: ...
    def getSharedNodes(self) -> List[vrdNode]: ...
    def getSynchronizedNodes(self) -> List[vrdNode]: ...
    def getTargetNodeWeight(self, node: vrdNode) -> float: ...
    def getTargetNodes(self) -> List[vrdNode]: ...
    def getUniquePath(self) -> str: ...
    def getVisibilityFlag(self) -> bool: ...
    def getWorldBoundingBox(self) -> vrdBoundingBox: ...
    def getWorldTransform(self) -> QMatrix4x4: ...
    def hasParent(self, parent: vrdNode) -> bool: ...
    def isActive(self) -> bool: ...
    def isEditable(self) -> bool: ...
    def isEditedAsset(self) -> bool: ...
    def isGroup(self) -> bool: ...
    def isImplicitShared(self) -> bool: ...
    def isNull(self) -> bool: ...
    def isShared(self) -> bool: ...
    def isSharedWith(self, node: vrdNode) -> bool: ...
    def isSynchronized(self) -> bool: ...
    def isType(self, arg__1: object) -> bool: ...
    def isValid(self) -> bool: ...
    def isVisible(self) -> bool: ...
    def setActive(self, value: bool) -> None: ...
    def setConstrainedNode(self, node: vrdNode) -> None: ...
    def setLocked(self, locked: bool) -> None: ...
    def setName(self, name: str) -> None: ...
    def setSelectableFlag(self, selectable: bool) -> None: ...
    def setTargetNodeWeight(self, node: vrdNode, weight: float) -> None: ...
    def setTargetNodes(self, nodes: Sequence[vrdNode]) -> None: ...
    def setVisibilityFlag(self, visible: bool) -> None: ...

class vrdCubeTextureChunk:
    __doc__: NoneType
    __module__: str
    posXImageProperty: str
    posYImageProperty: str
    posZImageProperty: str
    negXImageProperty: str
    negYImageProperty: str
    negZImageProperty: str
    def InternalFormat(self) -> None: ...
    def MagFilter(self) -> None: ...
    def MinFilter(self) -> None: ...
    def WrapMode(self) -> None: ...
    def __copy__(self) -> None: ...
    def __delattr__(self) -> None: ...
    def __dir__(self, /): ...
    def __eq__(self) -> None: ...
    def __format__(self, format_spec, /): ...
    def __ge__(self) -> None: ...
    def __getattribute__(self) -> None: ...
    def __getstate__(self, /): ...
    def __gt__(self) -> None: ...
    def __hash__(self) -> None: ...
    def __init__(self) -> None: ...
    def __init_subclass__(cls) -> None: ...
    def __le__(self) -> None: ...
    def __lshift__(self) -> None: ...
    def __lt__(self) -> None: ...
    def __ne__(self) -> None: ...
    def __new__(cls) -> None: ...
    def __reduce__(self, /): ...
    def __reduce_ex__(self, protocol, /): ...
    def __repr__(self) -> None: ...
    def __rlshift__(self) -> None: ...
    def __rrshift__(self) -> None: ...
    def __rshift__(self) -> None: ...
    def __setattr__(self) -> None: ...
    def __sizeof__(self, /): ...
    def __str__(self) -> None: ...
    def __subclasshook__(self) -> None: ...
    def asType(self, arg__1: object) -> object: ...
    def getAnisotropy(self) -> float: ...
    def getImage(self) -> vrdImage: ...
    def getInternalFormat(self) -> vrdTextureChunk.InternalFormat: ...
    def getLodBias(self) -> float: ...
    def getMagFilter(self) -> vrdTextureChunk.MagFilter: ...
    def getMinFilter(self) -> vrdTextureChunk.MinFilter: ...
    def getNegXImage(self) -> vrdImage: ...
    def getNegYImage(self) -> vrdImage: ...
    def getNegZImage(self) -> vrdImage: ...
    def getObjectId(self) -> int: ...
    def getPosXImage(self) -> vrdImage: ...
    def getPosYImage(self) -> vrdImage: ...
    def getPosZImage(self) -> vrdImage: ...
    def getWrapModeR(self) -> vrdTextureChunk.WrapMode: ...
    def getWrapModeS(self) -> vrdTextureChunk.WrapMode: ...
    def getWrapModeT(self) -> vrdTextureChunk.WrapMode: ...
    def isNull(self) -> bool: ...
    def isType(self, arg__1: object) -> bool: ...
    def isValid(self) -> bool: ...
    def setAnisotropy(self, anisotropy: float) -> None: ...
    def setImage(self, img: vrdImage) -> None: ...
    def setInternalFormat(self, format: vrdTextureChunk.InternalFormat) -> None: ...
    def setLodBias(self, bias: float) -> None: ...
    def setMagFilter(self, minFilter: vrdTextureChunk.MagFilter) -> None: ...
    def setMinFilter(self, minFilter: vrdTextureChunk.MinFilter) -> None: ...
    def setNegXImage(self, image: vrdImage) -> None: ...
    def setNegYImage(self, image: vrdImage) -> None: ...
    def setNegZImage(self, image: vrdImage) -> None: ...
    def setPosXImage(self, image: vrdImage) -> None: ...
    def setPosYImage(self, image: vrdImage) -> None: ...
    def setPosZImage(self, image: vrdImage) -> None: ...
    def setWrapModeR(self, mode: vrdTextureChunk.WrapMode) -> None: ...
    def setWrapModeS(self, mode: vrdTextureChunk.WrapMode) -> None: ...
    def setWrapModeT(self, mode: vrdTextureChunk.WrapMode) -> None: ...

class vrdDecoreSettings:
    __doc__: NoneType
    __module__: str
    def __copy__(self) -> None: ...
    def __delattr__(self) -> None: ...
    def __dir__(self, /): ...
    def __eq__(self) -> None: ...
    def __format__(self, format_spec, /): ...
    def __ge__(self) -> None: ...
    def __getattribute__(self) -> None: ...
    def __getstate__(self, /): ...
    def __gt__(self) -> None: ...
    def __hash__(self) -> None: ...
    def __init__(self) -> None: ...
    def __init_subclass__(cls) -> None: ...
    def __le__(self) -> None: ...
    def __lt__(self) -> None: ...
    def __ne__(self) -> None: ...
    def __new__(cls) -> None: ...
    def __reduce__(self, /): ...
    def __reduce_ex__(self, protocol, /): ...
    def __repr__(self) -> None: ...
    def __setattr__(self) -> None: ...
    def __sizeof__(self, /): ...
    def __str__(self) -> None: ...
    def __subclasshook__(self) -> None: ...
    def getCorrectFaceNormals(self) -> bool: ...
    def getDecoreEnabled(self) -> bool: ...
    def getDecoreMode(self) -> vrGeometryTypes.DecoreMode: ...
    def getQualitySteps(self) -> int: ...
    def getResolution(self) -> int: ...
    def getSubObjectMode(self) -> vrGeometryTypes.DecoreSubObjectMode: ...
    def getTransparentObjectMode(self) -> vrGeometryTypes.DecoreTransparentObjectMode: ...
    def setCorrectFaceNormals(self, correctFaceNormals: bool) -> None: ...
    def setDecoreEnabled(self, enabled: bool) -> None: ...
    def setDecoreMode(self, decoreMode: vrGeometryTypes.DecoreMode) -> None: ...
    def setQualitySteps(self, steps: int) -> None: ...
    def setResolution(self, resolution: int) -> None: ...
    def setSubObjectMode(self, subObjects: vrGeometryTypes.DecoreSubObjectMode) -> None: ...
    def setTransparentObjectMode(self, ignoreTransparentObjects: vrGeometryTypes.DecoreTransparentObjectMode) -> None: ...

class vrdDeltaLightNode:
    __doc__: NoneType
    __module__: str
    localLightProperty: str
    illuminateSceneProperty: str
    visualizationScaleProperty: str
    shadowMapProperty: str
    def __copy__(self) -> None: ...
    def __delattr__(self) -> None: ...
    def __dir__(self, /): ...
    def __eq__(self) -> None: ...
    def __format__(self, format_spec, /): ...
    def __ge__(self) -> None: ...
    def __getattribute__(self) -> None: ...
    def __getstate__(self, /): ...
    def __gt__(self) -> None: ...
    def __hash__(self) -> None: ...
    def __init__(self) -> None: ...
    def __init_subclass__(cls) -> None: ...
    def __le__(self) -> None: ...
    def __lshift__(self) -> None: ...
    def __lt__(self) -> None: ...
    def __ne__(self) -> None: ...
    def __new__(cls) -> None: ...
    def __reduce__(self, /): ...
    def __reduce_ex__(self, protocol, /): ...
    def __repr__(self) -> None: ...
    def __rlshift__(self) -> None: ...
    def __rrshift__(self) -> None: ...
    def __rshift__(self) -> None: ...
    def __setattr__(self) -> None: ...
    def __sizeof__(self, /): ...
    def __str__(self) -> None: ...
    def __subclasshook__(self) -> None: ...
    def applyMaterial(self, material: vrdMaterial) -> None: ...
    def asType(self, arg__1: object) -> object: ...
    def captureTransformVariant(self, name: str) -> None: ...
    def deleteTransformVariant(self, variant: vrdTransformNodeVariant) -> None: ...
    def findTransformVariant(self, name: str) -> vrdTransformNodeVariant: ...
    def getBakeLayer(self) -> int: ...
    def getBoundingBox(self) -> vrdBoundingBox: ...
    def getCastShadowOnShadowMaterial(self) -> bool: ...
    def getChild(self, index: int) -> vrdNode: ...
    def getChildCount(self) -> int: ...
    def getChildIndex(self, child: vrdNode) -> int: ...
    def getChildren(self) -> List[vrdNode]: ...
    def getChildrenRecursive(self) -> List[vrdNode]: ...
    def getChildrenRef(self) -> vrdNodeList: ...
    def getDiffuseColor(self) -> QVector3D: ...
    def getDiffuseColorSpectrum(self) -> vrSpectrum: ...
    def getEulerRotationOrder(self) -> vrTransformTypes.EulerRotationOrder: ...
    def getGlossyColor(self) -> QVector3D: ...
    def getGlossyColorSpectrum(self) -> vrSpectrum: ...
    def getGroundShadowIntensity(self) -> float: ...
    def getIlluminateScene(self) -> bool: ...
    def getIlluminateShadowMaterial(self) -> bool: ...
    def getImportanceMultiplier(self) -> float: ...
    def getIntensity(self) -> float: ...
    def getIsPhysicallyBased(self) -> bool: ...
    def getLightTransform(self) -> vrdLightTransform: ...
    def getLightUnit(self) -> vrLightTypes.Unit: ...
    def getLocalLight(self) -> bool: ...
    def getLocked(self) -> bool: ...
    def getMaterial(self) -> vrdMaterial: ...
    def getMaterialShadowIntensity(self) -> float: ...
    def getModuleNode(self) -> vrdBaseLightNode: ...
    def getName(self) -> str: ...
    def getObjectId(self) -> int: ...
    def getOn(self) -> bool: ...
    def getOrCreateTransformNode(self) -> vrdNode: ...
    def getParent(self) -> vrdNode: ...
    def getPath(self) -> str: ...
    def getRotatePivot(self) -> QVector3D: ...
    def getRotatePivotTranslation(self) -> QVector3D: ...
    def getRotationAsEuler(self) -> QVector3D: ...
    def getRotationAsQuaternion(self) -> QQuaternion: ...
    def getRotationOrientationAsEuler(self) -> QVector3D: ...
    def getRotationOrientationAsQuaternion(self) -> QQuaternion: ...
    def getScale(self) -> QVector3D: ...
    def getScalePivot(self) -> QVector3D: ...
    def getScalePivotTranslation(self) -> QVector3D: ...
    def getSelectableFlag(self) -> bool: ...
    def getShadowMap(self) -> vrdShadowMap: ...
    def getSharedNodes(self) -> List[vrdNode]: ...
    def getShear(self) -> QVector3D: ...
    def getSynchronizedNodes(self) -> List[vrdNode]: ...
    def getTemperature(self) -> int: ...
    def getTransform(self) -> QMatrix4x4: ...
    def getTransformVariants(self) -> List[vrdTransformNodeVariant]: ...
    def getTranslation(self) -> QVector3D: ...
    def getUniquePath(self) -> str: ...
    def getUseLightTemperature(self) -> bool: ...
    def getVisibilityFlag(self) -> bool: ...
    def getVisualizationScale(self) -> float: ...
    def getVisualizationVisible(self) -> bool: ...
    def getVolumeIlluminationMode(self) -> vrLightTypes.VolumeIlluminationMode: ...
    def getWorldBoundingBox(self) -> vrdBoundingBox: ...
    def getWorldRotatePivot(self) -> QVector3D: ...
    def getWorldScalePivot(self) -> QVector3D: ...
    def getWorldTransform(self) -> QMatrix4x4: ...
    def getWorldTranslation(self) -> QVector3D: ...
    def hasParent(self, parent: vrdNode) -> bool: ...
    def isEditable(self) -> bool: ...
    def isEditedAsset(self) -> bool: ...
    def isGroup(self) -> bool: ...
    def isImplicitShared(self) -> bool: ...
    def isNull(self) -> bool: ...
    def isShared(self) -> bool: ...
    def isSharedWith(self, node: vrdNode) -> bool: ...
    def isSynchronized(self) -> bool: ...
    def isType(self, arg__1: object) -> bool: ...
    def isValid(self) -> bool: ...
    def isVisible(self) -> bool: ...
    def resetTransformation(self) -> None: ...
    def setBakeLayer(self, layer: int) -> None: ...
    def setCastShadowOnShadowMaterial(self, castShadow: bool) -> None: ...
    def setDiffuseColor(self, diffuseColor: QVector3D) -> None: ...
    def setDiffuseColorSpectrum(self, spectrum: Union[vrSpectrum, QVector3D]) -> None: ...
    def setEulerRotationOrder(self, rotationOrder: vrTransformTypes.EulerRotationOrder) -> None: ...
    def setGlossyColor(self, glossyColor: QVector3D) -> None: ...
    def setGlossyColorSpectrum(self, spectrum: Union[vrSpectrum, QVector3D]) -> None: ...
    def setGroundShadowIntensity(self, intensity: float) -> None: ...
    def setIlluminateScene(self, illuminateScene: bool) -> None: ...
    def setIlluminateShadowMaterial(self, illuminateShadosMeterial: bool) -> None: ...
    def setImportanceMultiplier(self, importanceMultiplier: float) -> None: ...
    def setIntensity(self, intensity: float) -> None: ...
    def setIsPhysicallyBased(self, on: bool) -> None: ...
    def setLightUnit(self, unit: vrLightTypes.Unit) -> None: ...
    def setLocalLight(self, isLocalLight: bool) -> None: ...
    def setLocked(self, locked: bool) -> None: ...
    def setMaterialShadowIntensity(self, intensity: float) -> None: ...
    def setName(self, name: str) -> None: ...
    def setOn(self, on: bool) -> None: ...
    def setRotatePivot(self, rotatePivot: QVector3D) -> None: ...
    def setRotatePivotTranslation(self, rotatePivotTranslation: QVector3D) -> None: ...
    def setRotationAsEuler(self, rotation: QVector3D) -> None: ...
    def setRotationAsQuaternion(self, rotation: QQuaternion) -> None: ...
    def setRotationOrientationAsEuler(self, rotationOrientation: QVector3D) -> None: ...
    def setRotationOrientationAsQuaternion(self, orientation: QQuaternion) -> None: ...
    def setScale(self, scale: QVector3D) -> None: ...
    def setScalePivot(self, scalePivot: QVector3D) -> None: ...
    def setScalePivotTranslation(self, scalePivotTranslation: QVector3D) -> None: ...
    def setSelectableFlag(self, selectable: bool) -> None: ...
    def setShear(self, shear: QVector3D) -> None: ...
    def setTemperature(self, kelvin: int) -> None: ...
    def setTransform(self, matrix: Union[QMatrix4x4, QTransform]) -> None: ...
    def setTranslation(self, translation: QVector3D) -> None: ...
    def setUseLightTemperature(self, use: bool) -> None: ...
    def setVisibilityFlag(self, visible: bool) -> None: ...
    def setVisualizationScale(self, scale: float) -> None: ...
    def setVisualizationVisible(self, showVisualization: bool) -> None: ...
    def setVolumeIlluminationMode(self, mode: vrLightTypes.VolumeIlluminationMode) -> None: ...
    def setWorldRotatePivot(self, rotatePivot: QVector3D) -> None: ...
    def setWorldScalePivot(self, scalePivot: QVector3D) -> None: ...
    def setWorldTransform(self, matrix: Union[QMatrix4x4, QTransform]) -> None: ...
    def setWorldTranslation(self, translation: QVector3D) -> None: ...

class vrdDepthTestChunk:
    __doc__: NoneType
    __module__: str
    depthFuncProperty: str
    def DepthFunc(self) -> None: ...
    def __copy__(self) -> None: ...
    def __delattr__(self) -> None: ...
    def __dir__(self, /): ...
    def __eq__(self) -> None: ...
    def __format__(self, format_spec, /): ...
    def __ge__(self) -> None: ...
    def __getattribute__(self) -> None: ...
    def __getstate__(self, /): ...
    def __gt__(self) -> None: ...
    def __hash__(self) -> None: ...
    def __init__(self) -> None: ...
    def __init_subclass__(cls) -> None: ...
    def __le__(self) -> None: ...
    def __lshift__(self) -> None: ...
    def __lt__(self) -> None: ...
    def __ne__(self) -> None: ...
    def __new__(cls) -> None: ...
    def __reduce__(self, /): ...
    def __reduce_ex__(self, protocol, /): ...
    def __repr__(self) -> None: ...
    def __rlshift__(self) -> None: ...
    def __rrshift__(self) -> None: ...
    def __rshift__(self) -> None: ...
    def __setattr__(self) -> None: ...
    def __sizeof__(self, /): ...
    def __str__(self) -> None: ...
    def __subclasshook__(self) -> None: ...
    def asType(self, arg__1: object) -> object: ...
    def getDepthFunc(self) -> vrdDepthTestChunk.DepthFunc: ...
    def getObjectId(self) -> int: ...
    def isNull(self) -> bool: ...
    def isType(self, arg__1: object) -> bool: ...
    def isValid(self) -> bool: ...
    def setDepthFunc(self, depthFunc: vrdDepthTestChunk.DepthFunc) -> None: ...

class vrdDeviceAction:
    __doc__: NoneType
    __module__: str
    nameProperty: str
    def __copy__(self) -> None: ...
    def __delattr__(self) -> None: ...
    def __dir__(self, /): ...
    def __eq__(self) -> None: ...
    def __format__(self, format_spec, /): ...
    def __ge__(self) -> None: ...
    def __getattribute__(self) -> None: ...
    def __getstate__(self, /): ...
    def __gt__(self) -> None: ...
    def __hash__(self) -> None: ...
    def __init__(self) -> None: ...
    def __init_subclass__(cls) -> None: ...
    def __le__(self) -> None: ...
    def __lshift__(self) -> None: ...
    def __lt__(self) -> None: ...
    def __ne__(self) -> None: ...
    def __new__(cls) -> None: ...
    def __reduce__(self, /): ...
    def __reduce_ex__(self, protocol, /): ...
    def __repr__(self) -> None: ...
    def __rlshift__(self) -> None: ...
    def __rrshift__(self) -> None: ...
    def __rshift__(self) -> None: ...
    def __setattr__(self) -> None: ...
    def __sizeof__(self, /): ...
    def __str__(self) -> None: ...
    def __subclasshook__(self) -> None: ...
    def asType(self, arg__1: object) -> object: ...
    def getName(self) -> str: ...
    def getObjectId(self) -> int: ...
    def isNull(self) -> bool: ...
    def isType(self, arg__1: object) -> bool: ...
    def signal(self) -> vrdDeviceActionSignal: ...

class vrdDeviceActionSignal:
    __doc__: NoneType
    __module__: str
    staticMetaObject: QMetaObject
    def __delattr__(self) -> None: ...
    def __dir__(self, /): ...
    def __eq__(self) -> None: ...
    def __format__(self, format_spec, /): ...
    def __ge__(self) -> None: ...
    def __getattribute__(self) -> None: ...
    def __getstate__(self, /): ...
    def __gt__(self) -> None: ...
    def __hash__(self) -> None: ...
    def __init__(self) -> None: ...
    def __init_subclass__(cls) -> None: ...
    def __le__(self) -> None: ...
    def __lt__(self) -> None: ...
    def __ne__(self) -> None: ...
    def __new__(cls) -> None: ...
    def __reduce__(self, /): ...
    def __reduce_ex__(self, protocol, /): ...
    def __repr__(self) -> None: ...
    def __setattr__(self) -> None: ...
    def __sizeof__(self, /): ...
    def __str__(self) -> None: ...
    def __subclasshook__(self) -> None: ...
    def blockSignals(self, b: bool) -> bool: ...
    def childEvent(self, event: QChildEvent) -> None: ...
    def children(self) -> List[QObject]: ...
    def connect(self) -> None: ...
    def connectNotify(self, signal: QMetaMethod) -> None: ...
    def customEvent(self, event: QEvent) -> None: ...
    def deleteLater(self) -> None: ...
    def destroyed(self) -> None: ...
    def disconnect(self) -> None: ...
    def disconnectNotify(self, signal: QMetaMethod) -> None: ...
    def dumpObjectInfo(self) -> None: ...
    def dumpObjectTree(self) -> None: ...
    def dynamicPropertyNames(self) -> List[QByteArray]: ...
    def emit(self, arg__1: bytes, *args: None) -> bool: ...
    def event(self, event: QEvent) -> bool: ...
    def eventFilter(self, watched: QObject, event: QEvent) -> bool: ...
    def findChild(self, type: type, name: str = {}, options: Qt.FindChildOptions = Qt.FindChildOption.FindChildrenRecursively) -> object: ...
    def inherits(self, classname: bytes) -> bool: ...
    def installEventFilter(self, filterObj: QObject) -> None: ...
    def isSignalConnected(self, signal: QMetaMethod) -> bool: ...
    def isWidgetType(self) -> bool: ...
    def isWindowType(self) -> bool: ...
    def killTimer(self, id: int) -> None: ...
    def metaObject(self) -> QMetaObject: ...
    def moveToThread(self, thread: QThread) -> None: ...
    def objectName(self) -> str: ...
    def objectNameChanged(self) -> None: ...
    def parent(self) -> QObject: ...
    def property(self, name: str) -> Any: ...
    def receivers(self, signal: bytes) -> int: ...
    def removeEventFilter(self, obj: QObject) -> None: ...
    def sender(self) -> QObject: ...
    def senderSignalIndex(self) -> int: ...
    def setObjectName(self, name: str) -> None: ...
    def setParent(self, parent: QObject) -> None: ...
    def setProperty(self, name: str, value: Any) -> bool: ...
    def signalsBlocked(self) -> bool: ...
    def startTimer(self, interval: int, timerType: Qt.TimerType = Qt.TimerType.CoarseTimer) -> int: ...
    def thread(self) -> QThread: ...
    def timerEvent(self, event: QTimerEvent) -> None: ...
    def tr(self) -> None: ...
    def triggered(self) -> None: ...

class vrdDeviceInteraction:
    __doc__: NoneType
    __module__: str
    nameProperty: str
    supportedInteractionGroupsProperty: str
    def __copy__(self) -> None: ...
    def __delattr__(self) -> None: ...
    def __dir__(self, /): ...
    def __eq__(self) -> None: ...
    def __format__(self, format_spec, /): ...
    def __ge__(self) -> None: ...
    def __getattribute__(self) -> None: ...
    def __getstate__(self, /): ...
    def __gt__(self) -> None: ...
    def __hash__(self) -> None: ...
    def __init__(self) -> None: ...
    def __init_subclass__(cls) -> None: ...
    def __le__(self) -> None: ...
    def __lshift__(self) -> None: ...
    def __lt__(self) -> None: ...
    def __ne__(self) -> None: ...
    def __new__(cls) -> None: ...
    def __reduce__(self, /): ...
    def __reduce_ex__(self, protocol, /): ...
    def __repr__(self) -> None: ...
    def __rlshift__(self) -> None: ...
    def __rrshift__(self) -> None: ...
    def __rshift__(self) -> None: ...
    def __setattr__(self) -> None: ...
    def __sizeof__(self, /): ...
    def __str__(self) -> None: ...
    def __subclasshook__(self) -> None: ...
    def addSupportedInteractionGroup(self, name: str) -> None: ...
    def asType(self, arg__1: object) -> object: ...
    def createControllerAction(self, mapping: str) -> vrdDeviceAction: ...
    def getControllerAction(self, name: str) -> vrdDeviceAction: ...
    def getControllerActions(self) -> List[vrdDeviceAction]: ...
    def getName(self) -> str: ...
    def getObjectId(self) -> int: ...
    def getSupportedInteractionGroups(self) -> List[str]: ...
    def isNull(self) -> bool: ...
    def isType(self, arg__1: object) -> bool: ...
    def removeControllerAction(self, action: vrdDeviceAction) -> None: ...
    def removeSupportedInteractionGroup(self, name: str) -> None: ...
    def setControllerActionMapping(self, actionName: str, mapping: str) -> None: ...
    def setSupportedInteractionGroups(self, names: Sequence[str]) -> None: ...

class vrdDeviceMessageData:
    __doc__: NoneType
    __module__: str
    def __copy__(self) -> None: ...
    def __delattr__(self) -> None: ...
    def __dir__(self, /): ...
    def __eq__(self) -> None: ...
    def __format__(self, format_spec, /): ...
    def __ge__(self) -> None: ...
    def __getattribute__(self) -> None: ...
    def __getstate__(self, /): ...
    def __gt__(self) -> None: ...
    def __hash__(self) -> None: ...
    def __init__(self) -> None: ...
    def __init_subclass__(cls) -> None: ...
    def __le__(self) -> None: ...
    def __lt__(self) -> None: ...
    def __ne__(self) -> None: ...
    def __new__(cls) -> None: ...
    def __reduce__(self, /): ...
    def __reduce_ex__(self, protocol, /): ...
    def __repr__(self) -> None: ...
    def __setattr__(self) -> None: ...
    def __sizeof__(self, /): ...
    def __str__(self) -> None: ...
    def __subclasshook__(self) -> None: ...
    def getBackgroundColor(self) -> QVector3D: ...
    def getFixedHeight(self) -> float: ...
    def getFontSize(self) -> int: ...
    def getForegroundColor(self) -> QVector3D: ...
    def getFrameSize(self) -> float: ...
    def getImageDpi(self) -> int: ...
    def getImagePath(self) -> str: ...
    def getPosition(self) -> QVector3D: ...
    def getRotation(self) -> QVector3D: ...
    def getText(self) -> str: ...
    def getUseFixedHeight(self) -> bool: ...
    def getUseImage(self) -> bool: ...
    def setBackgroundColor(self, color: QVector3D) -> None: ...
    def setFixedHeight(self, height: float) -> None: ...
    def setFontSize(self, value: int) -> None: ...
    def setForegroundColor(self, color: QVector3D) -> None: ...
    def setFrameSize(self, value: float) -> None: ...
    def setImageDpi(self, dpi: int) -> None: ...
    def setImagePath(self, path: str) -> None: ...
    def setPosition(self, position: QVector3D) -> None: ...
    def setRotation(self, eulerRotation: QVector3D) -> None: ...
    def setText(self, text: str) -> None: ...
    def setUseFixedHeight(self, value: bool) -> None: ...
    def setUseImage(self, value: bool) -> None: ...

class vrdDirectionalLightNode:
    __doc__: NoneType
    __module__: str
    isHeadLightProperty: str
    def __copy__(self) -> None: ...
    def __delattr__(self) -> None: ...
    def __dir__(self, /): ...
    def __eq__(self) -> None: ...
    def __format__(self, format_spec, /): ...
    def __ge__(self) -> None: ...
    def __getattribute__(self) -> None: ...
    def __getstate__(self, /): ...
    def __gt__(self) -> None: ...
    def __hash__(self) -> None: ...
    def __init__(self) -> None: ...
    def __init_subclass__(cls) -> None: ...
    def __le__(self) -> None: ...
    def __lshift__(self) -> None: ...
    def __lt__(self) -> None: ...
    def __ne__(self) -> None: ...
    def __new__(cls) -> None: ...
    def __reduce__(self, /): ...
    def __reduce_ex__(self, protocol, /): ...
    def __repr__(self) -> None: ...
    def __rlshift__(self) -> None: ...
    def __rrshift__(self) -> None: ...
    def __rshift__(self) -> None: ...
    def __setattr__(self) -> None: ...
    def __sizeof__(self, /): ...
    def __str__(self) -> None: ...
    def __subclasshook__(self) -> None: ...
    def applyMaterial(self, material: vrdMaterial) -> None: ...
    def asType(self, arg__1: object) -> object: ...
    def captureTransformVariant(self, name: str) -> None: ...
    def deleteTransformVariant(self, variant: vrdTransformNodeVariant) -> None: ...
    def findTransformVariant(self, name: str) -> vrdTransformNodeVariant: ...
    def getBakeLayer(self) -> int: ...
    def getBoundingBox(self) -> vrdBoundingBox: ...
    def getCastShadowOnShadowMaterial(self) -> bool: ...
    def getChild(self, index: int) -> vrdNode: ...
    def getChildCount(self) -> int: ...
    def getChildIndex(self, child: vrdNode) -> int: ...
    def getChildren(self) -> List[vrdNode]: ...
    def getChildrenRecursive(self) -> List[vrdNode]: ...
    def getChildrenRef(self) -> vrdNodeList: ...
    def getDiffuseColor(self) -> QVector3D: ...
    def getDiffuseColorSpectrum(self) -> vrSpectrum: ...
    def getEulerRotationOrder(self) -> vrTransformTypes.EulerRotationOrder: ...
    def getGlossyColor(self) -> QVector3D: ...
    def getGlossyColorSpectrum(self) -> vrSpectrum: ...
    def getGroundShadowIntensity(self) -> float: ...
    def getIlluminateScene(self) -> bool: ...
    def getIlluminateShadowMaterial(self) -> bool: ...
    def getImportanceMultiplier(self) -> float: ...
    def getIntensity(self) -> float: ...
    def getIsHeadLight(self) -> bool: ...
    def getIsPhysicallyBased(self) -> bool: ...
    def getLightTransform(self) -> vrdLightTransform: ...
    def getLightUnit(self) -> vrLightTypes.Unit: ...
    def getLocalLight(self) -> bool: ...
    def getLocked(self) -> bool: ...
    def getMaterial(self) -> vrdMaterial: ...
    def getMaterialShadowIntensity(self) -> float: ...
    def getModuleNode(self) -> vrdBaseLightNode: ...
    def getName(self) -> str: ...
    def getObjectId(self) -> int: ...
    def getOn(self) -> bool: ...
    def getOrCreateTransformNode(self) -> vrdNode: ...
    def getParent(self) -> vrdNode: ...
    def getPath(self) -> str: ...
    def getRotatePivot(self) -> QVector3D: ...
    def getRotatePivotTranslation(self) -> QVector3D: ...
    def getRotationAsEuler(self) -> QVector3D: ...
    def getRotationAsQuaternion(self) -> QQuaternion: ...
    def getRotationOrientationAsEuler(self) -> QVector3D: ...
    def getRotationOrientationAsQuaternion(self) -> QQuaternion: ...
    def getScale(self) -> QVector3D: ...
    def getScalePivot(self) -> QVector3D: ...
    def getScalePivotTranslation(self) -> QVector3D: ...
    def getSelectableFlag(self) -> bool: ...
    def getShadowMap(self) -> vrdShadowMap: ...
    def getSharedNodes(self) -> List[vrdNode]: ...
    def getShear(self) -> QVector3D: ...
    def getSynchronizedNodes(self) -> List[vrdNode]: ...
    def getTemperature(self) -> int: ...
    def getTransform(self) -> QMatrix4x4: ...
    def getTransformVariants(self) -> List[vrdTransformNodeVariant]: ...
    def getTranslation(self) -> QVector3D: ...
    def getUniquePath(self) -> str: ...
    def getUseLightTemperature(self) -> bool: ...
    def getVisibilityFlag(self) -> bool: ...
    def getVisualizationScale(self) -> float: ...
    def getVisualizationVisible(self) -> bool: ...
    def getVolumeIlluminationMode(self) -> vrLightTypes.VolumeIlluminationMode: ...
    def getWorldBoundingBox(self) -> vrdBoundingBox: ...
    def getWorldRotatePivot(self) -> QVector3D: ...
    def getWorldScalePivot(self) -> QVector3D: ...
    def getWorldTransform(self) -> QMatrix4x4: ...
    def getWorldTranslation(self) -> QVector3D: ...
    def hasParent(self, parent: vrdNode) -> bool: ...
    def isEditable(self) -> bool: ...
    def isEditedAsset(self) -> bool: ...
    def isGroup(self) -> bool: ...
    def isImplicitShared(self) -> bool: ...
    def isNull(self) -> bool: ...
    def isShared(self) -> bool: ...
    def isSharedWith(self, node: vrdNode) -> bool: ...
    def isSynchronized(self) -> bool: ...
    def isType(self, arg__1: object) -> bool: ...
    def isValid(self) -> bool: ...
    def isVisible(self) -> bool: ...
    def resetTransformation(self) -> None: ...
    def setBakeLayer(self, layer: int) -> None: ...
    def setCastShadowOnShadowMaterial(self, castShadow: bool) -> None: ...
    def setDiffuseColor(self, diffuseColor: QVector3D) -> None: ...
    def setDiffuseColorSpectrum(self, spectrum: Union[vrSpectrum, QVector3D]) -> None: ...
    def setEulerRotationOrder(self, rotationOrder: vrTransformTypes.EulerRotationOrder) -> None: ...
    def setGlossyColor(self, glossyColor: QVector3D) -> None: ...
    def setGlossyColorSpectrum(self, spectrum: Union[vrSpectrum, QVector3D]) -> None: ...
    def setGroundShadowIntensity(self, intensity: float) -> None: ...
    def setIlluminateScene(self, illuminateScene: bool) -> None: ...
    def setIlluminateShadowMaterial(self, illuminateShadosMeterial: bool) -> None: ...
    def setImportanceMultiplier(self, importanceMultiplier: float) -> None: ...
    def setIntensity(self, intensity: float) -> None: ...
    def setIsPhysicallyBased(self, on: bool) -> None: ...
    def setLightUnit(self, unit: vrLightTypes.Unit) -> None: ...
    def setLocalLight(self, isLocalLight: bool) -> None: ...
    def setLocked(self, locked: bool) -> None: ...
    def setMaterialShadowIntensity(self, intensity: float) -> None: ...
    def setName(self, name: str) -> None: ...
    def setOn(self, on: bool) -> None: ...
    def setRotatePivot(self, rotatePivot: QVector3D) -> None: ...
    def setRotatePivotTranslation(self, rotatePivotTranslation: QVector3D) -> None: ...
    def setRotationAsEuler(self, rotation: QVector3D) -> None: ...
    def setRotationAsQuaternion(self, rotation: QQuaternion) -> None: ...
    def setRotationOrientationAsEuler(self, rotationOrientation: QVector3D) -> None: ...
    def setRotationOrientationAsQuaternion(self, orientation: QQuaternion) -> None: ...
    def setScale(self, scale: QVector3D) -> None: ...
    def setScalePivot(self, scalePivot: QVector3D) -> None: ...
    def setScalePivotTranslation(self, scalePivotTranslation: QVector3D) -> None: ...
    def setSelectableFlag(self, selectable: bool) -> None: ...
    def setShear(self, shear: QVector3D) -> None: ...
    def setTemperature(self, kelvin: int) -> None: ...
    def setTransform(self, matrix: Union[QMatrix4x4, QTransform]) -> None: ...
    def setTranslation(self, translation: QVector3D) -> None: ...
    def setUseLightTemperature(self, use: bool) -> None: ...
    def setVisibilityFlag(self, visible: bool) -> None: ...
    def setVisualizationScale(self, scale: float) -> None: ...
    def setVisualizationVisible(self, showVisualization: bool) -> None: ...
    def setVolumeIlluminationMode(self, mode: vrLightTypes.VolumeIlluminationMode) -> None: ...
    def setWorldRotatePivot(self, rotatePivot: QVector3D) -> None: ...
    def setWorldScalePivot(self, scalePivot: QVector3D) -> None: ...
    def setWorldTransform(self, matrix: Union[QMatrix4x4, QTransform]) -> None: ...
    def setWorldTranslation(self, translation: QVector3D) -> None: ...

class vrdDiskLightNode:
    __doc__: NoneType
    __module__: str
    areaLightConeProperty: str
    def QualityMode(self) -> None: ...
    def __copy__(self) -> None: ...
    def __delattr__(self) -> None: ...
    def __dir__(self, /): ...
    def __eq__(self) -> None: ...
    def __format__(self, format_spec, /): ...
    def __ge__(self) -> None: ...
    def __getattribute__(self) -> None: ...
    def __getstate__(self, /): ...
    def __gt__(self) -> None: ...
    def __hash__(self) -> None: ...
    def __init__(self) -> None: ...
    def __init_subclass__(cls) -> None: ...
    def __le__(self) -> None: ...
    def __lshift__(self) -> None: ...
    def __lt__(self) -> None: ...
    def __ne__(self) -> None: ...
    def __new__(cls) -> None: ...
    def __reduce__(self, /): ...
    def __reduce_ex__(self, protocol, /): ...
    def __repr__(self) -> None: ...
    def __rlshift__(self) -> None: ...
    def __rrshift__(self) -> None: ...
    def __rshift__(self) -> None: ...
    def __setattr__(self) -> None: ...
    def __sizeof__(self, /): ...
    def __str__(self) -> None: ...
    def __subclasshook__(self) -> None: ...
    def applyMaterial(self, material: vrdMaterial) -> None: ...
    def asType(self, arg__1: object) -> object: ...
    def captureTransformVariant(self, name: str) -> None: ...
    def deleteTransformVariant(self, variant: vrdTransformNodeVariant) -> None: ...
    def findTransformVariant(self, name: str) -> vrdTransformNodeVariant: ...
    def getAreaLightCone(self) -> vrdAreaLightCone: ...
    def getAttenuation(self) -> vrLightTypes.Attenuation: ...
    def getBakeLayer(self) -> int: ...
    def getBoundingBox(self) -> vrdBoundingBox: ...
    def getCastShadowOnShadowMaterial(self) -> bool: ...
    def getChild(self, index: int) -> vrdNode: ...
    def getChildCount(self) -> int: ...
    def getChildIndex(self, child: vrdNode) -> int: ...
    def getChildren(self) -> List[vrdNode]: ...
    def getChildrenRecursive(self) -> List[vrdNode]: ...
    def getChildrenRef(self) -> vrdNodeList: ...
    def getDiffuseColor(self) -> QVector3D: ...
    def getDiffuseColorSpectrum(self) -> vrSpectrum: ...
    def getEulerRotationOrder(self) -> vrTransformTypes.EulerRotationOrder: ...
    def getGlossyColor(self) -> QVector3D: ...
    def getGlossyColorSpectrum(self) -> vrSpectrum: ...
    def getGroundShadowIntensity(self) -> float: ...
    def getIlluminateScene(self) -> bool: ...
    def getIlluminateShadowMaterial(self) -> bool: ...
    def getImportanceMultiplier(self) -> float: ...
    def getIntensity(self) -> float: ...
    def getInteractiveMode(self) -> vrdAreaLightNode.QualityMode: ...
    def getInteractiveQuality(self) -> int: ...
    def getIsPhysicallyBased(self) -> bool: ...
    def getLightProfile(self) -> vrdLightProfile: ...
    def getLightTransform(self) -> vrdLightTransform: ...
    def getLightUnit(self) -> vrLightTypes.Unit: ...
    def getLocalLight(self) -> bool: ...
    def getLocked(self) -> bool: ...
    def getMaterial(self) -> vrdMaterial: ...
    def getMaterialShadowIntensity(self) -> float: ...
    def getModuleNode(self) -> vrdBaseLightNode: ...
    def getName(self) -> str: ...
    def getObjectId(self) -> int: ...
    def getOn(self) -> bool: ...
    def getOrCreateTransformNode(self) -> vrdNode: ...
    def getParent(self) -> vrdNode: ...
    def getPath(self) -> str: ...
    def getPrimaryVisibility(self) -> bool: ...
    def getRotatePivot(self) -> QVector3D: ...
    def getRotatePivotTranslation(self) -> QVector3D: ...
    def getRotationAsEuler(self) -> QVector3D: ...
    def getRotationAsQuaternion(self) -> QQuaternion: ...
    def getRotationOrientationAsEuler(self) -> QVector3D: ...
    def getRotationOrientationAsQuaternion(self) -> QQuaternion: ...
    def getScale(self) -> QVector3D: ...
    def getScalePivot(self) -> QVector3D: ...
    def getScalePivotTranslation(self) -> QVector3D: ...
    def getSelectableFlag(self) -> bool: ...
    def getShadowMap(self) -> vrdShadowMap: ...
    def getSharedNodes(self) -> List[vrdNode]: ...
    def getShear(self) -> QVector3D: ...
    def getStillFrameMode(self) -> vrdAreaLightNode.QualityMode: ...
    def getStillFrameQuality(self) -> int: ...
    def getSynchronizedNodes(self) -> List[vrdNode]: ...
    def getTemperature(self) -> int: ...
    def getTexture(self) -> vrdLightTexture: ...
    def getTransform(self) -> QMatrix4x4: ...
    def getTransformVariants(self) -> List[vrdTransformNodeVariant]: ...
    def getTranslation(self) -> QVector3D: ...
    def getUniquePath(self) -> str: ...
    def getUseLightTemperature(self) -> bool: ...
    def getVisibilityFlag(self) -> bool: ...
    def getVisibleInReflections(self) -> bool: ...
    def getVisualizationVisible(self) -> bool: ...
    def getVolumeIlluminationMode(self) -> vrLightTypes.VolumeIlluminationMode: ...
    def getWorldBoundingBox(self) -> vrdBoundingBox: ...
    def getWorldRotatePivot(self) -> QVector3D: ...
    def getWorldScalePivot(self) -> QVector3D: ...
    def getWorldTransform(self) -> QMatrix4x4: ...
    def getWorldTranslation(self) -> QVector3D: ...
    def hasParent(self, parent: vrdNode) -> bool: ...
    def isEditable(self) -> bool: ...
    def isEditedAsset(self) -> bool: ...
    def isGroup(self) -> bool: ...
    def isImplicitShared(self) -> bool: ...
    def isNull(self) -> bool: ...
    def isShared(self) -> bool: ...
    def isSharedWith(self, node: vrdNode) -> bool: ...
    def isSynchronized(self) -> bool: ...
    def isType(self, arg__1: object) -> bool: ...
    def isValid(self) -> bool: ...
    def isVisible(self) -> bool: ...
    def resetTransformation(self) -> None: ...
    def setAttenuation(self, attenuation: vrLightTypes.Attenuation) -> None: ...
    def setBakeLayer(self, layer: int) -> None: ...
    def setCastShadowOnShadowMaterial(self, castShadow: bool) -> None: ...
    def setDiffuseColor(self, diffuseColor: QVector3D) -> None: ...
    def setDiffuseColorSpectrum(self, spectrum: Union[vrSpectrum, QVector3D]) -> None: ...
    def setEulerRotationOrder(self, rotationOrder: vrTransformTypes.EulerRotationOrder) -> None: ...
    def setGlossyColor(self, glossyColor: QVector3D) -> None: ...
    def setGlossyColorSpectrum(self, spectrum: Union[vrSpectrum, QVector3D]) -> None: ...
    def setGroundShadowIntensity(self, intensity: float) -> None: ...
    def setIlluminateScene(self, illuminateScene: bool) -> None: ...
    def setIlluminateShadowMaterial(self, illuminateShadosMeterial: bool) -> None: ...
    def setImportanceMultiplier(self, importanceMultiplier: float) -> None: ...
    def setIntensity(self, intensity: float) -> None: ...
    def setInteractiveMode(self, value: vrdAreaLightNode.QualityMode) -> None: ...
    def setInteractiveQuality(self, quality: int) -> None: ...
    def setIsPhysicallyBased(self, on: bool) -> None: ...
    def setLightUnit(self, unit: vrLightTypes.Unit) -> None: ...
    def setLocalLight(self, isLocalLight: bool) -> None: ...
    def setLocked(self, locked: bool) -> None: ...
    def setMaterialShadowIntensity(self, intensity: float) -> None: ...
    def setName(self, name: str) -> None: ...
    def setOn(self, on: bool) -> None: ...
    def setPrimaryVisibility(self, visible: bool) -> None: ...
    def setRotatePivot(self, rotatePivot: QVector3D) -> None: ...
    def setRotatePivotTranslation(self, rotatePivotTranslation: QVector3D) -> None: ...
    def setRotationAsEuler(self, rotation: QVector3D) -> None: ...
    def setRotationAsQuaternion(self, rotation: QQuaternion) -> None: ...
    def setRotationOrientationAsEuler(self, rotationOrientation: QVector3D) -> None: ...
    def setRotationOrientationAsQuaternion(self, orientation: QQuaternion) -> None: ...
    def setScale(self, scale: QVector3D) -> None: ...
    def setScalePivot(self, scalePivot: QVector3D) -> None: ...
    def setScalePivotTranslation(self, scalePivotTranslation: QVector3D) -> None: ...
    def setSelectableFlag(self, selectable: bool) -> None: ...
    def setShear(self, shear: QVector3D) -> None: ...
    def setStillFrameMode(self, value: vrdAreaLightNode.QualityMode) -> None: ...
    def setStillFrameQuality(self, quality: int) -> None: ...
    def setTemperature(self, kelvin: int) -> None: ...
    def setTransform(self, matrix: Union[QMatrix4x4, QTransform]) -> None: ...
    def setTranslation(self, translation: QVector3D) -> None: ...
    def setUseLightTemperature(self, use: bool) -> None: ...
    def setVisibilityFlag(self, visible: bool) -> None: ...
    def setVisibleInReflections(self, visible: bool) -> None: ...
    def setVisualizationVisible(self, showVisualization: bool) -> None: ...
    def setVolumeIlluminationMode(self, mode: vrLightTypes.VolumeIlluminationMode) -> None: ...
    def setWorldRotatePivot(self, rotatePivot: QVector3D) -> None: ...
    def setWorldScalePivot(self, scalePivot: QVector3D) -> None: ...
    def setWorldTransform(self, matrix: Union[QMatrix4x4, QTransform]) -> None: ...
    def setWorldTranslation(self, translation: QVector3D) -> None: ...

class vrdDisplacement:
    __doc__: NoneType
    __module__: str
    NoOpenGLSilhouettes: SilhouetteMode
    AccurateOpenGLSilhouettes: SilhouetteMode
    intersectionPrecisionProperty: str
    buildPrecisionProperty: str
    valueLimitProperty: str
    silhouetteModeProperty: str
    def SilhouetteMode(self) -> None: ...
    def __copy__(self) -> None: ...
    def __delattr__(self) -> None: ...
    def __dir__(self, /): ...
    def __eq__(self) -> None: ...
    def __format__(self, format_spec, /): ...
    def __ge__(self) -> None: ...
    def __getattribute__(self) -> None: ...
    def __getstate__(self, /): ...
    def __gt__(self) -> None: ...
    def __hash__(self) -> None: ...
    def __init__(self) -> None: ...
    def __init_subclass__(cls) -> None: ...
    def __le__(self) -> None: ...
    def __lshift__(self) -> None: ...
    def __lt__(self) -> None: ...
    def __ne__(self) -> None: ...
    def __new__(cls) -> None: ...
    def __reduce__(self, /): ...
    def __reduce_ex__(self, protocol, /): ...
    def __repr__(self) -> None: ...
    def __rlshift__(self) -> None: ...
    def __rrshift__(self) -> None: ...
    def __rshift__(self) -> None: ...
    def __setattr__(self) -> None: ...
    def __sizeof__(self, /): ...
    def __str__(self) -> None: ...
    def __subclasshook__(self) -> None: ...
    def asType(self, arg__1: object) -> object: ...
    def getBuildPrecision(self) -> float: ...
    def getIntersectionPrecision(self) -> float: ...
    def getObjectId(self) -> int: ...
    def getSilhouetteMode(self) -> vrdDisplacement.SilhouetteMode: ...
    def getValueLimit(self) -> QVector2D: ...
    def isNull(self) -> bool: ...
    def isType(self, arg__1: object) -> bool: ...
    def isValid(self) -> bool: ...
    def setBuildPrecision(self, value: float) -> None: ...
    def setIntersectionPrecision(self, value: float) -> None: ...
    def setSilhouetteMode(self, mode: vrdDisplacement.SilhouetteMode) -> None: ...
    def setValueLimit(self, range: QVector2D) -> None: ...

class vrdDisplacementTexture:
    __doc__: NoneType
    __module__: str
    NoOpenGLSilhouettes: DisplacementSilhouetteMode
    AccurateOpenGLSilhouettes: DisplacementSilhouetteMode
    displacementHeightProperty: str
    displacementOffsetProperty: str
    displacementSilhouetteModeProperty: str
    def DisplacementSilhouetteMode(self) -> None: ...
    def __copy__(self) -> None: ...
    def __delattr__(self) -> None: ...
    def __dir__(self, /): ...
    def __eq__(self) -> None: ...
    def __format__(self, format_spec, /): ...
    def __ge__(self) -> None: ...
    def __getattribute__(self) -> None: ...
    def __getstate__(self, /): ...
    def __gt__(self) -> None: ...
    def __hash__(self) -> None: ...
    def __init__(self) -> None: ...
    def __init_subclass__(cls) -> None: ...
    def __le__(self) -> None: ...
    def __lshift__(self) -> None: ...
    def __lt__(self) -> None: ...
    def __ne__(self) -> None: ...
    def __new__(cls) -> None: ...
    def __reduce__(self, /): ...
    def __reduce_ex__(self, protocol, /): ...
    def __repr__(self) -> None: ...
    def __rlshift__(self) -> None: ...
    def __rrshift__(self) -> None: ...
    def __rshift__(self) -> None: ...
    def __setattr__(self) -> None: ...
    def __sizeof__(self, /): ...
    def __str__(self) -> None: ...
    def __subclasshook__(self) -> None: ...
    def asType(self, arg__1: object) -> object: ...
    def getAnisotropy(self) -> float: ...
    def getComponentName(self) -> str: ...
    def getConnectRepeatModes(self) -> bool: ...
    def getDisplacementHeight(self) -> float: ...
    def getDisplacementOffset(self) -> float: ...
    def getDisplacementSilhouetteMode(self) -> vrdDisplacementTexture.DisplacementSilhouetteMode: ...
    def getFrameOffset(self) -> int: ...
    def getGamma(self) -> float: ...
    def getImage(self) -> vrdImage: ...
    def getImageNumber(self) -> int: ...
    def getInfiniteTilingContrast(self) -> float: ...
    def getInfiniteTilingGridSize(self) -> int: ...
    def getInfiniteTilingHueWeight(self) -> float: ...
    def getInfiniteTilingMaxRotation(self) -> float: ...
    def getInfiniteTilingSaturationWeight(self) -> float: ...
    def getInfiniteTilingValueWeight(self) -> float: ...
    def getInlineImageSequence(self) -> bool: ...
    def getInvertTexture(self) -> bool: ...
    def getLinkTextureSettings(self) -> bool: ...
    def getManipulate(self) -> bool: ...
    def getMappingType(self) -> vrTextureTypes.MappingType: ...
    def getObjectId(self) -> int: ...
    def getOffset(self) -> QVector2D: ...
    def getPlanarProjectionCenter(self) -> QVector3D: ...
    def getPlanarProjectionKeepAspectRatio(self) -> bool: ...
    def getPlanarProjectionOrientation(self) -> QVector2D: ...
    def getPlanarProjectionSingleSided(self) -> bool: ...
    def getPlanarProjectionSize(self) -> QVector3D: ...
    def getRepeat(self) -> QVector2D: ...
    def getRepeatModeU(self) -> vrTextureTypes.RepeatMode: ...
    def getRepeatModeV(self) -> vrTextureTypes.RepeatMode: ...
    def getRotate(self) -> float: ...
    def getTextureSize(self) -> QVector2D: ...
    def getTriplanarBlend(self) -> float: ...
    def getTriplanarXOffset(self) -> QVector2D: ...
    def getTriplanarXRepeat(self) -> QVector2D: ...
    def getTriplanarXRotation(self) -> float: ...
    def getTriplanarYOffset(self) -> QVector2D: ...
    def getTriplanarYRepeat(self) -> QVector2D: ...
    def getTriplanarYRotation(self) -> float: ...
    def getTriplanarZOffset(self) -> QVector2D: ...
    def getTriplanarZRepeat(self) -> QVector2D: ...
    def getTriplanarZRotation(self) -> float: ...
    def getUniformRepeat(self) -> bool: ...
    def getUseAlpha(self) -> bool: ...
    def getUseCutout(self) -> bool: ...
    def getUseImageSequence(self) -> bool: ...
    def getUseInfiniteTiling(self) -> bool: ...
    def getUseTexture(self) -> bool: ...
    def getUseTextureSize(self) -> bool: ...
    def isNull(self) -> bool: ...
    def isType(self, arg__1: object) -> bool: ...
    def isValid(self) -> bool: ...
    def setAnisotropy(self, anisotropy: float) -> None: ...
    def setConnectRepeatModes(self, s: bool) -> None: ...
    def setDisplacementHeight(self, height: float) -> None: ...
    def setDisplacementOffset(self, offset: float) -> None: ...
    def setDisplacementSilhouetteMode(self, mode: vrdDisplacementTexture.DisplacementSilhouetteMode) -> None: ...
    def setFrameOffset(self, frameOffset: int) -> None: ...
    def setGamma(self, gamma: float) -> None: ...
    def setImage(self, img: vrdImage) -> None: ...
    def setImageNumber(self, imageNumber: int) -> None: ...
    def setInfiniteTilingContrast(self, contrast: float) -> None: ...
    def setInfiniteTilingGridSize(self, gridSize: int) -> None: ...
    def setInfiniteTilingHueWeight(self, hueWeight: float) -> None: ...
    def setInfiniteTilingMaxRotation(self, maxRotation: float) -> None: ...
    def setInfiniteTilingSaturationWeight(self, saturationWeight: float) -> None: ...
    def setInfiniteTilingValueWeight(self, valueWeight: float) -> None: ...
    def setInlineImageSequence(self, s: bool) -> None: ...
    def setInvertTexture(self, invertTexture: bool) -> None: ...
    def setLinkTextureSettings(self, s: bool) -> None: ...
    def setManipulate(self, s: bool) -> None: ...
    def setMappingType(self, type: vrTextureTypes.MappingType) -> None: ...
    def setOffset(self, offset: QVector2D) -> None: ...
    def setPlanarProjectionCenter(self, center: QVector3D) -> None: ...
    def setPlanarProjectionFitSize(self) -> None: ...
    def setPlanarProjectionKeepAspectRatio(self, s: bool) -> None: ...
    def setPlanarProjectionObjectCenter(self) -> None: ...
    def setPlanarProjectionOrientation(self, orientation: QVector2D) -> None: ...
    def setPlanarProjectionPlane(self, center: QVector3D, direction: QVector3D) -> None: ...
    def setPlanarProjectionSingleSided(self, s: bool) -> None: ...
    def setPlanarProjectionSize(self, size: QVector3D) -> None: ...
    def setRepeat(self, repeat: QVector2D) -> None: ...
    def setRepeatModeU(self, mode: vrTextureTypes.RepeatMode) -> None: ...
    def setRepeatModeV(self, mode: vrTextureTypes.RepeatMode) -> None: ...
    def setRotate(self, rotate: float) -> None: ...
    def setTextureSize(self, size: QVector2D) -> None: ...
    def setTriplanarBlend(self, blend: float) -> None: ...
    def setTriplanarXOffset(self, offset: QVector2D) -> None: ...
    def setTriplanarXRepeat(self, repeat: QVector2D) -> None: ...
    def setTriplanarXRotation(self, rotation: float) -> None: ...
    def setTriplanarYOffset(self, offset: QVector2D) -> None: ...
    def setTriplanarYRepeat(self, repeat: QVector2D) -> None: ...
    def setTriplanarYRotation(self, rotation: float) -> None: ...
    def setTriplanarZOffset(self, offset: QVector2D) -> None: ...
    def setTriplanarZRepeat(self, repeat: QVector2D) -> None: ...
    def setTriplanarZRotation(self, rotation: float) -> None: ...
    def setUniformRepeat(self, s: bool) -> None: ...
    def setUseAlpha(self, s: bool) -> None: ...
    def setUseCutout(self, s: bool) -> None: ...
    def setUseImageSequence(self, s: bool) -> None: ...
    def setUseInfiniteTiling(self, s: bool) -> None: ...
    def setUseTexture(self, s: bool) -> None: ...
    def setUseTextureSize(self, s: bool) -> None: ...
    def supportsGamma(self) -> bool: ...
    def supportsInvertTexture(self) -> bool: ...
    def supportsMappingType(self) -> bool: ...
    def supportsUseAlpha(self) -> bool: ...
    def supportsUseCutout(self) -> bool: ...

class vrdDistanceLODNode:
    __doc__: NoneType
    __module__: str
    centerProperty: str
    rangesProperty: str
    def __copy__(self) -> None: ...
    def __delattr__(self) -> None: ...
    def __dir__(self, /): ...
    def __eq__(self) -> None: ...
    def __format__(self, format_spec, /): ...
    def __ge__(self) -> None: ...
    def __getattribute__(self) -> None: ...
    def __getstate__(self, /): ...
    def __gt__(self) -> None: ...
    def __hash__(self) -> None: ...
    def __init__(self) -> None: ...
    def __init_subclass__(cls) -> None: ...
    def __le__(self) -> None: ...
    def __lshift__(self) -> None: ...
    def __lt__(self) -> None: ...
    def __ne__(self) -> None: ...
    def __new__(cls) -> None: ...
    def __reduce__(self, /): ...
    def __reduce_ex__(self, protocol, /): ...
    def __repr__(self) -> None: ...
    def __rlshift__(self) -> None: ...
    def __rrshift__(self) -> None: ...
    def __rshift__(self) -> None: ...
    def __setattr__(self) -> None: ...
    def __sizeof__(self, /): ...
    def __str__(self) -> None: ...
    def __subclasshook__(self) -> None: ...
    def applyMaterial(self, material: vrdMaterial) -> None: ...
    def asType(self, arg__1: object) -> object: ...
    def getBoundingBox(self) -> vrdBoundingBox: ...
    def getCenter(self) -> QVector3D: ...
    def getChild(self, index: int) -> vrdNode: ...
    def getChildCount(self) -> int: ...
    def getChildIndex(self, child: vrdNode) -> int: ...
    def getChildren(self) -> List[vrdNode]: ...
    def getChildrenRecursive(self) -> List[vrdNode]: ...
    def getChildrenRef(self) -> vrdNodeList: ...
    def getLocked(self) -> bool: ...
    def getMaterial(self) -> vrdMaterial: ...
    def getName(self) -> str: ...
    def getObjectId(self) -> int: ...
    def getOrCreateTransformNode(self) -> vrdNode: ...
    def getParent(self) -> vrdNode: ...
    def getPath(self) -> str: ...
    def getRanges(self) -> List[float]: ...
    def getSelectableFlag(self) -> bool: ...
    def getSharedNodes(self) -> List[vrdNode]: ...
    def getSynchronizedNodes(self) -> List[vrdNode]: ...
    def getUniquePath(self) -> str: ...
    def getVisibilityFlag(self) -> bool: ...
    def getWorldBoundingBox(self) -> vrdBoundingBox: ...
    def getWorldTransform(self) -> QMatrix4x4: ...
    def hasParent(self, parent: vrdNode) -> bool: ...
    def isEditable(self) -> bool: ...
    def isEditedAsset(self) -> bool: ...
    def isGroup(self) -> bool: ...
    def isImplicitShared(self) -> bool: ...
    def isNull(self) -> bool: ...
    def isShared(self) -> bool: ...
    def isSharedWith(self, node: vrdNode) -> bool: ...
    def isSynchronized(self) -> bool: ...
    def isType(self, arg__1: object) -> bool: ...
    def isValid(self) -> bool: ...
    def isVisible(self) -> bool: ...
    def setCenter(self, value: QVector3D) -> None: ...
    def setLocked(self, locked: bool) -> None: ...
    def setName(self, name: str) -> None: ...
    def setRanges(self, value: Sequence[float]) -> None: ...
    def setSelectableFlag(self, selectable: bool) -> None: ...
    def setVisibilityFlag(self, visible: bool) -> None: ...

class vrdEnvironmentColorCorrection:
    __doc__: NoneType
    __module__: str
    whiteBalanceProperty: str
    reflectedSaturationProperty: str
    def __copy__(self) -> None: ...
    def __delattr__(self) -> None: ...
    def __dir__(self, /): ...
    def __eq__(self) -> None: ...
    def __format__(self, format_spec, /): ...
    def __ge__(self) -> None: ...
    def __getattribute__(self) -> None: ...
    def __getstate__(self, /): ...
    def __gt__(self) -> None: ...
    def __hash__(self) -> None: ...
    def __init__(self) -> None: ...
    def __init_subclass__(cls) -> None: ...
    def __le__(self) -> None: ...
    def __lshift__(self) -> None: ...
    def __lt__(self) -> None: ...
    def __ne__(self) -> None: ...
    def __new__(cls) -> None: ...
    def __reduce__(self, /): ...
    def __reduce_ex__(self, protocol, /): ...
    def __repr__(self) -> None: ...
    def __rlshift__(self) -> None: ...
    def __rrshift__(self) -> None: ...
    def __rshift__(self) -> None: ...
    def __setattr__(self) -> None: ...
    def __sizeof__(self, /): ...
    def __str__(self) -> None: ...
    def __subclasshook__(self) -> None: ...
    def asType(self, arg__1: object) -> object: ...
    def getBrightness(self) -> float: ...
    def getContrast(self) -> float: ...
    def getHueShift(self) -> float: ...
    def getObjectId(self) -> int: ...
    def getReflectedSaturation(self) -> float: ...
    def getSaturation(self) -> float: ...
    def getWhiteBalance(self) -> int: ...
    def isNull(self) -> bool: ...
    def isType(self, arg__1: object) -> bool: ...
    def isValid(self) -> bool: ...
    def setBrightness(self, value: float) -> None: ...
    def setContrast(self, contrast: float) -> None: ...
    def setHueShift(self, value: float) -> None: ...
    def setReflectedSaturation(self, value: float) -> None: ...
    def setSaturation(self, saturation: float) -> None: ...
    def setWhiteBalance(self, value: int) -> None: ...

class vrdEnvironmentMaterial:
    __doc__: NoneType
    __module__: str
    Custom: GeometryType
    Dome: GeometryType
    Sphere: GeometryType
    Cube: GeometryType
    filteredEnvMapSamplesProperty: str
    geometryTypeProperty: str
    geometryFileProperty: str
    visibleProperty: str
    flippedProperty: str
    shadowPlaneVisibleProperty: str
    illuminateVolumesProperty: str
    exposureProperty: str
    luminanceMappingProperty: str
    shadowsAndIlluminationProperty: str
    colorCorrectionProperty: str
    transformationProperty: str
    raytracingProperty: str
    def GeometryType(self) -> None: ...
    def __copy__(self) -> None: ...
    def __delattr__(self) -> None: ...
    def __dir__(self, /): ...
    def __eq__(self) -> None: ...
    def __format__(self, format_spec, /): ...
    def __ge__(self) -> None: ...
    def __getattribute__(self) -> None: ...
    def __getstate__(self, /): ...
    def __gt__(self) -> None: ...
    def __hash__(self) -> None: ...
    def __init__(self) -> None: ...
    def __init_subclass__(cls) -> None: ...
    def __le__(self) -> None: ...
    def __lshift__(self) -> None: ...
    def __lt__(self) -> None: ...
    def __ne__(self) -> None: ...
    def __new__(cls) -> None: ...
    def __reduce__(self, /): ...
    def __reduce_ex__(self, protocol, /): ...
    def __repr__(self) -> None: ...
    def __rlshift__(self) -> None: ...
    def __rrshift__(self) -> None: ...
    def __rshift__(self) -> None: ...
    def __setattr__(self) -> None: ...
    def __sizeof__(self, /): ...
    def __str__(self) -> None: ...
    def __subclasshook__(self) -> None: ...
    def asType(self, arg__1: object) -> object: ...
    def duplicate(self, name: str = '') -> vrdMaterial: ...
    def getColorCorrection(self) -> vrdEnvironmentColorCorrection: ...
    def getEnvironment(self) -> vrdImage: ...
    def getExposure(self) -> float: ...
    def getFilteredEnvMapSamples(self) -> int: ...
    def getGeometryFile(self) -> str: ...
    def getGeometryType(self) -> vrdEnvironmentMaterial.GeometryType: ...
    def getIcon(self) -> QIcon: ...
    def getIlluminateVolumes(self) -> bool: ...
    def getLocked(self) -> bool: ...
    def getLuminanceMapping(self) -> float: ...
    def getName(self) -> str: ...
    def getObjectId(self) -> int: ...
    def getPreview(self) -> QImage: ...
    def getPreviewScene(self) -> str: ...
    def getRaytracing(self) -> vrdEnvironmentRaytracingSettings: ...
    def getShadowsAndIllumination(self) -> vrdEnvironmentShadowsAndIllumination: ...
    def getTextures(self) -> List[vrdTexture]: ...
    def getTransformation(self) -> vrdEnvironmentTransformation: ...
    def isAsset(self) -> bool: ...
    def isComponent(self) -> bool: ...
    def isEditable(self) -> bool: ...
    def isEditedAsset(self) -> bool: ...
    def isFlipped(self) -> bool: ...
    def isNull(self) -> bool: ...
    def isShadowPlaneVisible(self) -> bool: ...
    def isType(self, arg__1: object) -> bool: ...
    def isValid(self) -> bool: ...
    def isVisible(self) -> bool: ...
    def setExposure(self, exposure: float) -> None: ...
    def setFilteredEnvMapSamples(self, samples: int) -> None: ...
    def setFlipped(self, s: bool) -> None: ...
    def setGeometryFile(self, filename: str) -> None: ...
    def setGeometryType(self, value: vrdEnvironmentMaterial.GeometryType) -> None: ...
    def setIlluminateVolumes(self, value: bool) -> None: ...
    def setInlineAllImageSequences(self, value: bool) -> List[vrdImage]: ...
    def setLocked(self, locked: bool) -> None: ...
    def setLuminanceMapping(self, luminanceMapping: float) -> None: ...
    def setName(self, name: str) -> None: ...
    def setPreviewScene(self, name: str) -> None: ...
    def setShadowPlaneVisible(self, s: bool) -> None: ...
    def setVisible(self, s: bool) -> None: ...
    def toSphericalQImage(self, width: int, height: int, toneMapped: bool = True) -> QImage: ...

class vrdEnvironmentNode:
    __doc__: NoneType
    __module__: str
    def __copy__(self) -> None: ...
    def __delattr__(self) -> None: ...
    def __dir__(self, /): ...
    def __eq__(self) -> None: ...
    def __format__(self, format_spec, /): ...
    def __ge__(self) -> None: ...
    def __getattribute__(self) -> None: ...
    def __getstate__(self, /): ...
    def __gt__(self) -> None: ...
    def __hash__(self) -> None: ...
    def __init__(self) -> None: ...
    def __init_subclass__(cls) -> None: ...
    def __le__(self) -> None: ...
    def __lshift__(self) -> None: ...
    def __lt__(self) -> None: ...
    def __ne__(self) -> None: ...
    def __new__(cls) -> None: ...
    def __reduce__(self, /): ...
    def __reduce_ex__(self, protocol, /): ...
    def __repr__(self) -> None: ...
    def __rlshift__(self) -> None: ...
    def __rrshift__(self) -> None: ...
    def __rshift__(self) -> None: ...
    def __setattr__(self) -> None: ...
    def __sizeof__(self, /): ...
    def __str__(self) -> None: ...
    def __subclasshook__(self) -> None: ...
    def applyMaterial(self, material: vrdMaterial) -> None: ...
    def asType(self, arg__1: object) -> object: ...
    def getBoundingBox(self) -> vrdBoundingBox: ...
    def getChild(self, index: int) -> vrdNode: ...
    def getChildCount(self) -> int: ...
    def getChildIndex(self, child: vrdNode) -> int: ...
    def getChildren(self) -> List[vrdNode]: ...
    def getChildrenRecursive(self) -> List[vrdNode]: ...
    def getChildrenRef(self) -> vrdNodeList: ...
    def getLocked(self) -> bool: ...
    def getMaterial(self) -> vrdMaterial: ...
    def getName(self) -> str: ...
    def getObjectId(self) -> int: ...
    def getOrCreateTransformNode(self) -> vrdNode: ...
    def getParent(self) -> vrdNode: ...
    def getPath(self) -> str: ...
    def getSelectableFlag(self) -> bool: ...
    def getSharedNodes(self) -> List[vrdNode]: ...
    def getSynchronizedNodes(self) -> List[vrdNode]: ...
    def getUniquePath(self) -> str: ...
    def getVisibilityFlag(self) -> bool: ...
    def getWorldBoundingBox(self) -> vrdBoundingBox: ...
    def getWorldTransform(self) -> QMatrix4x4: ...
    def hasParent(self, parent: vrdNode) -> bool: ...
    def isEditable(self) -> bool: ...
    def isEditedAsset(self) -> bool: ...
    def isGroup(self) -> bool: ...
    def isImplicitShared(self) -> bool: ...
    def isNull(self) -> bool: ...
    def isShared(self) -> bool: ...
    def isSharedWith(self, node: vrdNode) -> bool: ...
    def isSynchronized(self) -> bool: ...
    def isType(self, arg__1: object) -> bool: ...
    def isValid(self) -> bool: ...
    def isVisible(self) -> bool: ...
    def setLocked(self, locked: bool) -> None: ...
    def setName(self, name: str) -> None: ...
    def setSelectableFlag(self, selectable: bool) -> None: ...
    def setVisibilityFlag(self, visible: bool) -> None: ...

class vrdEnvironmentRaytracingSettings:
    __doc__: NoneType
    __module__: str
    FullSphere: Shadowing
    UpperHemisphere: Shadowing
    isVisibleInReflectionsProperty: str
    isLightsourceProperty: str
    useAccurateReflectionsProperty: str
    emitCausticsProperty: str
    filterSampledCausticsProperty: str
    anisotropyProperty: str
    materialIdProperty: str
    shadowingModeProperty: str
    importanceMapQualityProperty: str
    overrideIblSamplingProperty: str
    interactiveIblSamplingQualityProperty: str
    stillFrameIblSamplingQualityProperty: str
    def Shadowing(self) -> None: ...
    def __copy__(self) -> None: ...
    def __delattr__(self) -> None: ...
    def __dir__(self, /): ...
    def __eq__(self) -> None: ...
    def __format__(self, format_spec, /): ...
    def __ge__(self) -> None: ...
    def __getattribute__(self) -> None: ...
    def __getstate__(self, /): ...
    def __gt__(self) -> None: ...
    def __hash__(self) -> None: ...
    def __init__(self) -> None: ...
    def __init_subclass__(cls) -> None: ...
    def __le__(self) -> None: ...
    def __lshift__(self) -> None: ...
    def __lt__(self) -> None: ...
    def __ne__(self) -> None: ...
    def __new__(cls) -> None: ...
    def __reduce__(self, /): ...
    def __reduce_ex__(self, protocol, /): ...
    def __repr__(self) -> None: ...
    def __rlshift__(self) -> None: ...
    def __rrshift__(self) -> None: ...
    def __rshift__(self) -> None: ...
    def __setattr__(self) -> None: ...
    def __sizeof__(self, /): ...
    def __str__(self) -> None: ...
    def __subclasshook__(self) -> None: ...
    def asType(self, arg__1: object) -> object: ...
    def getAnisotropy(self) -> float: ...
    def getEmitCaustics(self) -> bool: ...
    def getFilterSampledCaustics(self) -> bool: ...
    def getImportanceMapQuality(self) -> int: ...
    def getInteractiveIblSamplingQuality(self) -> int: ...
    def getIsLightsource(self) -> bool: ...
    def getIsVisibleInReflections(self) -> bool: ...
    def getMaterialId(self) -> int: ...
    def getObjectId(self) -> int: ...
    def getOverrideIblSampling(self) -> bool: ...
    def getShadowingMode(self) -> vrdEnvironmentRaytracingSettings.Shadowing: ...
    def getStillFrameIblSamplingQuality(self) -> int: ...
    def getUseAccurateReflections(self) -> bool: ...
    def isNull(self) -> bool: ...
    def isType(self, arg__1: object) -> bool: ...
    def isValid(self) -> bool: ...
    def setAnisotropy(self, anisotropy: float) -> None: ...
    def setEmitCaustics(self, value: bool) -> None: ...
    def setFilterSampledCaustics(self, value: bool) -> None: ...
    def setImportanceMapQuality(self, value: int) -> None: ...
    def setInteractiveIblSamplingQuality(self, value: int) -> None: ...
    def setIsLightsource(self, value: bool) -> None: ...
    def setIsVisibleInReflections(self, value: bool) -> None: ...
    def setMaterialId(self, value: int) -> None: ...
    def setOverrideIblSampling(self, value: bool) -> None: ...
    def setShadowingMode(self, mode: vrdEnvironmentRaytracingSettings.Shadowing) -> None: ...
    def setStillFrameIblSamplingQuality(self, value: int) -> None: ...
    def setUseAccurateReflections(self, value: bool) -> None: ...

class vrdEnvironmentShadowsAndIllumination:
    __doc__: NoneType
    __module__: str
    lightsourcesCountProperty: str
    useLightsourcesOnlyProperty: str
    materialShadowIntensityProperty: str
    groundShadowIntensityProperty: str
    mapFilterRadiusProperty: str
    mapResolutionProperty: str
    def __copy__(self) -> None: ...
    def __delattr__(self) -> None: ...
    def __dir__(self, /): ...
    def __eq__(self) -> None: ...
    def __format__(self, format_spec, /): ...
    def __ge__(self) -> None: ...
    def __getattribute__(self) -> None: ...
    def __getstate__(self, /): ...
    def __gt__(self) -> None: ...
    def __hash__(self) -> None: ...
    def __init__(self) -> None: ...
    def __init_subclass__(cls) -> None: ...
    def __le__(self) -> None: ...
    def __lshift__(self) -> None: ...
    def __lt__(self) -> None: ...
    def __ne__(self) -> None: ...
    def __new__(cls) -> None: ...
    def __reduce__(self, /): ...
    def __reduce_ex__(self, protocol, /): ...
    def __repr__(self) -> None: ...
    def __rlshift__(self) -> None: ...
    def __rrshift__(self) -> None: ...
    def __rshift__(self) -> None: ...
    def __setattr__(self) -> None: ...
    def __sizeof__(self, /): ...
    def __str__(self) -> None: ...
    def __subclasshook__(self) -> None: ...
    def asType(self, arg__1: object) -> object: ...
    def getGroundShadowIntensity(self) -> float: ...
    def getLightsourcesCount(self) -> int: ...
    def getMapFilterRadius(self) -> float: ...
    def getMapResolution(self) -> int: ...
    def getMaterialShadowIntensity(self) -> float: ...
    def getObjectId(self) -> int: ...
    def getUseLightsourcesOnly(self) -> int: ...
    def isNull(self) -> bool: ...
    def isType(self, arg__1: object) -> bool: ...
    def isValid(self) -> bool: ...
    def setGroundShadowIntensity(self, value: float) -> None: ...
    def setLightsourcesCount(self, value: int) -> None: ...
    def setMapFilterRadius(self, value: float) -> None: ...
    def setMapResolution(self, value: int) -> None: ...
    def setMaterialShadowIntensity(self, value: float) -> None: ...
    def setUseLightsourcesOnly(self, value: bool) -> None: ...

class vrdEnvironmentSwitchMaterial:
    __doc__: NoneType
    __module__: str
    def __copy__(self) -> None: ...
    def __delattr__(self) -> None: ...
    def __dir__(self, /): ...
    def __eq__(self) -> None: ...
    def __format__(self, format_spec, /): ...
    def __ge__(self) -> None: ...
    def __getattribute__(self) -> None: ...
    def __getstate__(self, /): ...
    def __gt__(self) -> None: ...
    def __hash__(self) -> None: ...
    def __init__(self) -> None: ...
    def __init_subclass__(cls) -> None: ...
    def __le__(self) -> None: ...
    def __lshift__(self) -> None: ...
    def __lt__(self) -> None: ...
    def __ne__(self) -> None: ...
    def __new__(cls) -> None: ...
    def __reduce__(self, /): ...
    def __reduce_ex__(self, protocol, /): ...
    def __repr__(self) -> None: ...
    def __rlshift__(self) -> None: ...
    def __rrshift__(self) -> None: ...
    def __rshift__(self) -> None: ...
    def __setattr__(self) -> None: ...
    def __sizeof__(self, /): ...
    def __str__(self) -> None: ...
    def __subclasshook__(self) -> None: ...
    def asType(self, arg__1: object) -> object: ...
    def duplicate(self, name: str = '') -> vrdMaterial: ...
    def getChoice(self) -> int: ...
    def getIcon(self) -> QIcon: ...
    def getLocked(self) -> bool: ...
    def getMaterials(self) -> List[vrdMaterial]: ...
    def getMaterialsRef(self) -> vrdMaterialList: ...
    def getName(self) -> str: ...
    def getObjectId(self) -> int: ...
    def getPreview(self) -> QImage: ...
    def getPreviewScene(self) -> str: ...
    def getStateNames(self) -> List[str]: ...
    def getTextures(self) -> List[vrdTexture]: ...
    def isAsset(self) -> bool: ...
    def isComponent(self) -> bool: ...
    def isEditable(self) -> bool: ...
    def isEditedAsset(self) -> bool: ...
    def isNull(self) -> bool: ...
    def isType(self, arg__1: object) -> bool: ...
    def isValid(self) -> bool: ...
    def setChoice(self, index: int) -> None: ...
    def setInlineAllImageSequences(self, value: bool) -> List[vrdImage]: ...
    def setLocked(self, locked: bool) -> None: ...
    def setMaterials(self, materials: Sequence[vrdMaterial]) -> None: ...
    def setName(self, name: str) -> None: ...
    def setPreviewScene(self, name: str) -> None: ...

class vrdEnvironmentTransformation:
    __doc__: NoneType
    __module__: str
    environmentSizeProperty: str
    centerProperty: str
    centerFromObjectProperty: str
    rotateProperty: str
    scaleProperty: str
    manipulateProperty: str
    def __copy__(self) -> None: ...
    def __delattr__(self) -> None: ...
    def __dir__(self, /): ...
    def __eq__(self) -> None: ...
    def __format__(self, format_spec, /): ...
    def __ge__(self) -> None: ...
    def __getattribute__(self) -> None: ...
    def __getstate__(self, /): ...
    def __gt__(self) -> None: ...
    def __hash__(self) -> None: ...
    def __init__(self) -> None: ...
    def __init_subclass__(cls) -> None: ...
    def __le__(self) -> None: ...
    def __lshift__(self) -> None: ...
    def __lt__(self) -> None: ...
    def __ne__(self) -> None: ...
    def __new__(cls) -> None: ...
    def __reduce__(self, /): ...
    def __reduce_ex__(self, protocol, /): ...
    def __repr__(self) -> None: ...
    def __rlshift__(self) -> None: ...
    def __rrshift__(self) -> None: ...
    def __rshift__(self) -> None: ...
    def __setattr__(self) -> None: ...
    def __sizeof__(self, /): ...
    def __str__(self) -> None: ...
    def __subclasshook__(self) -> None: ...
    def asType(self, arg__1: object) -> object: ...
    def getCenter(self) -> QVector3D: ...
    def getEnvironmentSize(self) -> float: ...
    def getManipulate(self) -> bool: ...
    def getObjectId(self) -> int: ...
    def getRotate(self) -> QVector3D: ...
    def getScale(self) -> QVector3D: ...
    def isNull(self) -> bool: ...
    def isType(self, arg__1: object) -> bool: ...
    def isValid(self) -> bool: ...
    def setCenter(self, value: QVector3D) -> None: ...
    def setCenterFromObject(self) -> None: ...
    def setEnvironmentSize(self, value: float) -> None: ...
    def setManipulate(self, s: bool) -> None: ...
    def setRotate(self, value: QVector3D) -> None: ...
    def setScale(self, value: QVector3D) -> None: ...

class vrdEyeGaze:
    __doc__: NoneType
    __module__: str
    def __copy__(self) -> None: ...
    def __delattr__(self) -> None: ...
    def __dir__(self, /): ...
    def __eq__(self) -> None: ...
    def __format__(self, format_spec, /): ...
    def __ge__(self) -> None: ...
    def __getattribute__(self) -> None: ...
    def __getstate__(self, /): ...
    def __gt__(self) -> None: ...
    def __hash__(self) -> None: ...
    def __init__(self) -> None: ...
    def __init_subclass__(cls) -> None: ...
    def __le__(self) -> None: ...
    def __lt__(self) -> None: ...
    def __ne__(self) -> None: ...
    def __new__(cls) -> None: ...
    def __reduce__(self, /): ...
    def __reduce_ex__(self, protocol, /): ...
    def __repr__(self) -> None: ...
    def __setattr__(self) -> None: ...
    def __sizeof__(self, /): ...
    def __str__(self) -> None: ...
    def __subclasshook__(self) -> None: ...
    def getDirection(self) -> QVector3D: ...
    def getOrigin(self) -> QVector3D: ...
    def isTracked(self) -> bool: ...
    def setDirection(self, direction: QVector3D) -> None: ...
    def setOrigin(self, origin: QVector3D) -> None: ...
    def setTracked(self, tracked: bool) -> None: ...

class vrdFileExportSettings:
    __doc__: NoneType
    __module__: str
    Surface: SurfaceExportMode
    Mesh: SurfaceExportMode
    Both: SurfaceExportMode
    None_: SurfaceExportMode
    exportLightsProperty: str
    exportCamerasProperty: str
    exportEnvironmentGeometriesProperty: str
    exportSceneplatesProperty: str
    exportAnimationCurvesProperty: str
    exportAnimationClipsProperty: str
    removeBSidesProperty: str
    exportAnnotationsProperty: str
    exportMetadataProperty: str
    exportTransformVariantsProperty: str
    exportScriptsProperty: str
    exportTouchSensorsProperty: str
    exportGeometrySwitchesProperty: str
    exportMaterialSwitchesProperty: str
    exportVariantSetsProperty: str
    exportVariantsProperty: str
    exportLightmapsProperty: str
    keepUnusedMaterialsProperty: str
    keepEmptyMaterialGroupNodesProperty: str
    keepEmptyGeometryNodesProperty: str
    keepEmptyGroupNodesProperty: str
    keepEmptyShellNodesProperty: str
    fbxVersionIdProperty: str
    fbxFormatProperty: str
    exportVertexColorsProperty: str
    exportInvisibleDataProperty: str
    stlFormatProperty: str
    inlineTexturesProperty: str
    exportColorsProperty: str
    exportMeshesProperty: str
    exportSurfacesProperty: str
    def SurfaceExportMode(self) -> None: ...
    def __copy__(self) -> None: ...
    def __delattr__(self) -> None: ...
    def __dir__(self, /): ...
    def __eq__(self) -> None: ...
    def __format__(self, format_spec, /): ...
    def __ge__(self) -> None: ...
    def __getattribute__(self) -> None: ...
    def __getstate__(self, /): ...
    def __gt__(self) -> None: ...
    def __hash__(self) -> None: ...
    def __init__(self) -> None: ...
    def __init_subclass__(cls) -> None: ...
    def __le__(self) -> None: ...
    def __lt__(self) -> None: ...
    def __ne__(self) -> None: ...
    def __new__(cls) -> None: ...
    def __reduce__(self, /): ...
    def __reduce_ex__(self, protocol, /): ...
    def __repr__(self) -> None: ...
    def __setattr__(self) -> None: ...
    def __sizeof__(self, /): ...
    def __str__(self) -> None: ...
    def __subclasshook__(self) -> None: ...
    def getExportAnimationClips(self) -> bool: ...
    def getExportAnimationCurves(self) -> bool: ...
    def getExportAnnotations(self) -> bool: ...
    def getExportCameras(self) -> bool: ...
    def getExportColors(self) -> bool: ...
    def getExportEnvironmentGeometries(self) -> bool: ...
    def getExportGeometrySwitches(self) -> bool: ...
    def getExportInvisibleData(self) -> bool: ...
    def getExportLightmaps(self) -> bool: ...
    def getExportLights(self) -> bool: ...
    def getExportMaterialSwitches(self) -> bool: ...
    def getExportMeshes(self) -> bool: ...
    def getExportMetadata(self) -> bool: ...
    def getExportSceneplates(self) -> bool: ...
    def getExportScripts(self) -> bool: ...
    def getExportSurfaces(self) -> vrdFileExportSettings.SurfaceExportMode: ...
    def getExportTouchSensors(self) -> bool: ...
    def getExportTransformVariants(self) -> bool: ...
    def getExportVariantSets(self) -> bool: ...
    def getExportVariants(self) -> bool: ...
    def getExportVertexColors(self) -> bool: ...
    def getFbxFormat(self) -> int: ...
    def getFbxVersionId(self) -> int: ...
    def getInlineTextures(self) -> bool: ...
    def getKeepEmptyGeometryNodes(self) -> bool: ...
    def getKeepEmptyGroupNodes(self) -> bool: ...
    def getKeepEmptyMaterialGroupNodes(self) -> bool: ...
    def getKeepEmptyShellNodes(self) -> bool: ...
    def getKeepUnusedMaterials(self) -> bool: ...
    def getRemoveBSides(self) -> bool: ...
    def getStlFormat(self) -> int: ...
    def setExportAnimationClips(self, enable: bool) -> None: ...
    def setExportAnimationCurves(self, enable: bool) -> None: ...
    def setExportAnnotations(self, enable: bool) -> None: ...
    def setExportCameras(self, enable: bool) -> None: ...
    def setExportColors(self, enable: bool) -> None: ...
    def setExportEnvironmentGeometries(self, enable: bool) -> None: ...
    def setExportGeometrySwitches(self, enable: bool) -> None: ...
    def setExportInvisibleData(self, enable: bool) -> None: ...
    def setExportLightmaps(self, enable: bool) -> None: ...
    def setExportLights(self, enable: bool) -> None: ...
    def setExportMaterialSwitches(self, enable: bool) -> None: ...
    def setExportMeshes(self, enable: bool) -> None: ...
    def setExportMetadata(self, enable: bool) -> None: ...
    def setExportSceneplates(self, enable: bool) -> None: ...
    def setExportScripts(self, enable: bool) -> None: ...
    def setExportSurfaces(self, mode: vrdFileExportSettings.SurfaceExportMode) -> None: ...
    def setExportTouchSensors(self, enable: bool) -> None: ...
    def setExportTransformVariants(self, enable: bool) -> None: ...
    def setExportVariantSets(self, enable: bool) -> None: ...
    def setExportVariants(self, enable: bool) -> None: ...
    def setExportVertexColors(self, enable: bool) -> None: ...
    def setFbxFormat(self, format: int) -> None: ...
    def setFbxVersionId(self, id: int) -> None: ...
    def setInlineTextures(self, enable: bool) -> None: ...
    def setKeepEmptyGeometryNodes(self, keep: bool) -> None: ...
    def setKeepEmptyGroupNodes(self, keep: bool) -> None: ...
    def setKeepEmptyMaterialGroupNodes(self, keep: bool) -> None: ...
    def setKeepEmptyShellNodes(self, keep: bool) -> None: ...
    def setKeepUnusedMaterials(self, keep: bool) -> None: ...
    def setRemoveBSides(self, enable: bool) -> None: ...
    def setStlFormat(self, format: int) -> None: ...

class vrdFindOptions:
    __doc__: NoneType
    __module__: str
    def __copy__(self) -> None: ...
    def __delattr__(self) -> None: ...
    def __dir__(self, /): ...
    def __eq__(self) -> None: ...
    def __format__(self, format_spec, /): ...
    def __ge__(self) -> None: ...
    def __getattribute__(self) -> None: ...
    def __getstate__(self, /): ...
    def __gt__(self) -> None: ...
    def __hash__(self) -> None: ...
    def __init__(self) -> None: ...
    def __init_subclass__(cls) -> None: ...
    def __le__(self) -> None: ...
    def __lt__(self) -> None: ...
    def __ne__(self) -> None: ...
    def __new__(cls) -> None: ...
    def __reduce__(self, /): ...
    def __reduce_ex__(self, protocol, /): ...
    def __repr__(self) -> None: ...
    def __setattr__(self) -> None: ...
    def __sizeof__(self, /): ...
    def __str__(self) -> None: ...
    def __subclasshook__(self) -> None: ...
    def getIncludeComponents(self) -> bool: ...
    def setIncludeComponents(self, value: bool) -> None: ...

class vrdFlakeLayer:
    __doc__: NoneType
    __module__: str
    pigmentColorProperty: str
    pigmentColorSpectrumProperty: str
    pigmentConcentrationProperty: str
    flakeColorProperty: str
    flakeColorSpectrumProperty: str
    useFlipFlopProperty: str
    flipFlopFlakeColorProperty: str
    flipFlopFlakeColorSpectrumProperty: str
    flipFlopBlendingProperty: str
    flakeRoughnessProperty: str
    flakeReflectivityProperty: str
    flakeSizeProperty: str
    flakePerturbationProperty: str
    flakeDensityProperty: str
    def __copy__(self) -> None: ...
    def __delattr__(self) -> None: ...
    def __dir__(self, /): ...
    def __eq__(self) -> None: ...
    def __format__(self, format_spec, /): ...
    def __ge__(self) -> None: ...
    def __getattribute__(self) -> None: ...
    def __getstate__(self, /): ...
    def __gt__(self) -> None: ...
    def __hash__(self) -> None: ...
    def __init__(self) -> None: ...
    def __init_subclass__(cls) -> None: ...
    def __le__(self) -> None: ...
    def __lshift__(self) -> None: ...
    def __lt__(self) -> None: ...
    def __ne__(self) -> None: ...
    def __new__(cls) -> None: ...
    def __reduce__(self, /): ...
    def __reduce_ex__(self, protocol, /): ...
    def __repr__(self) -> None: ...
    def __rlshift__(self) -> None: ...
    def __rrshift__(self) -> None: ...
    def __rshift__(self) -> None: ...
    def __setattr__(self) -> None: ...
    def __sizeof__(self, /): ...
    def __str__(self) -> None: ...
    def __subclasshook__(self) -> None: ...
    def asType(self, arg__1: object) -> object: ...
    def getFlakeColor(self) -> QVector3D: ...
    def getFlakeColorSpectrum(self) -> vrSpectrum: ...
    def getFlakeDensity(self) -> float: ...
    def getFlakePerturbation(self) -> float: ...
    def getFlakeReflectivity(self) -> float: ...
    def getFlakeRoughness(self) -> float: ...
    def getFlakeSize(self) -> float: ...
    def getFlipFlopBlending(self) -> float: ...
    def getFlipFlopFlakeColor(self) -> QVector3D: ...
    def getFlipFlopFlakeColorSpectrum(self) -> vrSpectrum: ...
    def getObjectId(self) -> int: ...
    def getPigmentColor(self) -> QVector3D: ...
    def getPigmentColorSpectrum(self) -> vrSpectrum: ...
    def getPigmentConcentration(self) -> float: ...
    def getUseFlipFlop(self) -> bool: ...
    def isNull(self) -> bool: ...
    def isType(self, arg__1: object) -> bool: ...
    def isValid(self) -> bool: ...
    def setFlakeColor(self, value: QVector3D) -> None: ...
    def setFlakeColorSpectrum(self, value: Union[vrSpectrum, QVector3D]) -> None: ...
    def setFlakeDensity(self, value: float) -> None: ...
    def setFlakePerturbation(self, value: float) -> None: ...
    def setFlakeReflectivity(self, value: float) -> None: ...
    def setFlakeRoughness(self, value: float) -> None: ...
    def setFlakeSize(self, value: float) -> None: ...
    def setFlipFlopBlending(self, value: float) -> None: ...
    def setFlipFlopFlakeColor(self, value: QVector3D) -> None: ...
    def setFlipFlopFlakeColorSpectrum(self, value: Union[vrSpectrum, QVector3D]) -> None: ...
    def setPigmentColor(self, value: QVector3D) -> None: ...
    def setPigmentColorSpectrum(self, value: Union[vrSpectrum, QVector3D]) -> None: ...
    def setPigmentConcentration(self, value: float) -> None: ...
    def setUseFlipFlop(self, value: bool) -> None: ...

class vrdFlipflopCarpaintMaterial:
    __doc__: NoneType
    __module__: str
    baseColorProperty: str
    baseColorSpectrumProperty: str
    flakeLayerProperty: str
    clearcoatProperty: str
    incandescenceProperty: str
    displacementTextureProperty: str
    def __copy__(self) -> None: ...
    def __delattr__(self) -> None: ...
    def __dir__(self, /): ...
    def __eq__(self) -> None: ...
    def __format__(self, format_spec, /): ...
    def __ge__(self) -> None: ...
    def __getattribute__(self) -> None: ...
    def __getstate__(self, /): ...
    def __gt__(self) -> None: ...
    def __hash__(self) -> None: ...
    def __init__(self) -> None: ...
    def __init_subclass__(cls) -> None: ...
    def __le__(self) -> None: ...
    def __lshift__(self) -> None: ...
    def __lt__(self) -> None: ...
    def __ne__(self) -> None: ...
    def __new__(cls) -> None: ...
    def __reduce__(self, /): ...
    def __reduce_ex__(self, protocol, /): ...
    def __repr__(self) -> None: ...
    def __rlshift__(self) -> None: ...
    def __rrshift__(self) -> None: ...
    def __rshift__(self) -> None: ...
    def __setattr__(self) -> None: ...
    def __sizeof__(self, /): ...
    def __str__(self) -> None: ...
    def __subclasshook__(self) -> None: ...
    def asType(self, arg__1: object) -> object: ...
    def duplicate(self, name: str = '') -> vrdMaterial: ...
    def getAnalytic(self) -> vrdAnalyticSettings: ...
    def getBaseColor(self) -> QVector3D: ...
    def getBaseColorSpectrum(self) -> vrSpectrum: ...
    def getClearcoat(self) -> vrdClearcoat: ...
    def getCommon(self) -> vrdBRDFCommonSettings: ...
    def getDisplacementTexture(self) -> vrdDisplacementTexture: ...
    def getFlakeLayer(self) -> vrdFlipflopFlakeLayer: ...
    def getIcon(self) -> QIcon: ...
    def getIncandescence(self) -> vrdIncandescence: ...
    def getLocked(self) -> bool: ...
    def getNPR(self) -> vrdNPRSettings: ...
    def getName(self) -> str: ...
    def getObjectId(self) -> int: ...
    def getPreview(self) -> QImage: ...
    def getPreviewScene(self) -> str: ...
    def getRaytracing(self) -> vrdMaterialRaytracingSettings: ...
    def getRoundedEdges(self) -> vrdRoundedEdges: ...
    def getTextures(self) -> List[vrdTexture]: ...
    def getTransparency(self) -> vrdTransparency: ...
    def isAsset(self) -> bool: ...
    def isComponent(self) -> bool: ...
    def isDisplacementActive(self) -> bool: ...
    def isEditable(self) -> bool: ...
    def isEditedAsset(self) -> bool: ...
    def isNull(self) -> bool: ...
    def isType(self, arg__1: object) -> bool: ...
    def isValid(self) -> bool: ...
    def setBaseColor(self, color: QVector3D) -> None: ...
    def setBaseColorSpectrum(self, value: Union[vrSpectrum, QVector3D]) -> None: ...
    def setInlineAllImageSequences(self, value: bool) -> List[vrdImage]: ...
    def setLocked(self, locked: bool) -> None: ...
    def setName(self, name: str) -> None: ...
    def setPreviewScene(self, name: str) -> None: ...

class vrdFlipflopFlakeLayer:
    __doc__: NoneType
    __module__: str
    color1Property: str
    color1SpectrumProperty: str
    color2Property: str
    color2SpectrumProperty: str
    blendingProperty: str
    roughnessProperty: str
    sizeProperty: str
    intensityProperty: str
    def __copy__(self) -> None: ...
    def __delattr__(self) -> None: ...
    def __dir__(self, /): ...
    def __eq__(self) -> None: ...
    def __format__(self, format_spec, /): ...
    def __ge__(self) -> None: ...
    def __getattribute__(self) -> None: ...
    def __getstate__(self, /): ...
    def __gt__(self) -> None: ...
    def __hash__(self) -> None: ...
    def __init__(self) -> None: ...
    def __init_subclass__(cls) -> None: ...
    def __le__(self) -> None: ...
    def __lshift__(self) -> None: ...
    def __lt__(self) -> None: ...
    def __ne__(self) -> None: ...
    def __new__(cls) -> None: ...
    def __reduce__(self, /): ...
    def __reduce_ex__(self, protocol, /): ...
    def __repr__(self) -> None: ...
    def __rlshift__(self) -> None: ...
    def __rrshift__(self) -> None: ...
    def __rshift__(self) -> None: ...
    def __setattr__(self) -> None: ...
    def __sizeof__(self, /): ...
    def __str__(self) -> None: ...
    def __subclasshook__(self) -> None: ...
    def asType(self, arg__1: object) -> object: ...
    def getBlending(self) -> float: ...
    def getColor1(self) -> QVector3D: ...
    def getColor1Spectrum(self) -> vrSpectrum: ...
    def getColor2(self) -> QVector3D: ...
    def getColor2Spectrum(self) -> vrSpectrum: ...
    def getIntensity(self) -> float: ...
    def getObjectId(self) -> int: ...
    def getRoughness(self) -> float: ...
    def getSize(self) -> float: ...
    def isNull(self) -> bool: ...
    def isType(self, arg__1: object) -> bool: ...
    def isValid(self) -> bool: ...
    def setBlending(self, value: float) -> None: ...
    def setColor1(self, value: QVector3D) -> None: ...
    def setColor1Spectrum(self, value: Union[vrSpectrum, QVector3D]) -> None: ...
    def setColor2(self, value: QVector3D) -> None: ...
    def setColor2Spectrum(self, value: Union[vrSpectrum, QVector3D]) -> None: ...
    def setIntensity(self, value: float) -> None: ...
    def setRoughness(self, roughness: float) -> None: ...
    def setSize(self, value: float) -> None: ...

class vrdFoveatedQuality:
    __doc__: NoneType
    __module__: str
    def __copy__(self) -> None: ...
    def __delattr__(self) -> None: ...
    def __dir__(self, /): ...
    def __eq__(self) -> None: ...
    def __format__(self, format_spec, /): ...
    def __ge__(self) -> None: ...
    def __getattribute__(self) -> None: ...
    def __getstate__(self, /): ...
    def __gt__(self) -> None: ...
    def __hash__(self) -> None: ...
    def __init__(self) -> None: ...
    def __init_subclass__(cls) -> None: ...
    def __le__(self) -> None: ...
    def __lt__(self) -> None: ...
    def __ne__(self) -> None: ...
    def __new__(cls) -> None: ...
    def __reduce__(self, /): ...
    def __reduce_ex__(self, protocol, /): ...
    def __repr__(self) -> None: ...
    def __setattr__(self) -> None: ...
    def __sizeof__(self, /): ...
    def __str__(self) -> None: ...
    def __subclasshook__(self) -> None: ...
    def getInner(self) -> vrRenderTypes.ShadingQuality: ...
    def getMiddle(self) -> vrRenderTypes.ShadingQuality: ...
    def getMinimumMultisamplingSamples(self) -> int: ...
    def getPeriphery(self) -> vrRenderTypes.ShadingQuality: ...
    def setInner(self, inner: vrRenderTypes.ShadingQuality) -> None: ...
    def setMiddle(self, middle: vrRenderTypes.ShadingQuality) -> None: ...
    def setPeriphery(self, periphery: vrRenderTypes.ShadingQuality) -> None: ...

class vrdGLSLShaderChunk:
    parameters: getset_descriptor
    __doc__: NoneType
    __module__: str
    vertexProgramProperty: str
    fragmentProgramProperty: str
    geometryProgramProperty: str
    parameterRefProperty: str
    def __copy__(self) -> None: ...
    def __delattr__(self) -> None: ...
    def __dir__(self, /): ...
    def __eq__(self) -> None: ...
    def __format__(self, format_spec, /): ...
    def __ge__(self) -> None: ...
    def __getattribute__(self) -> None: ...
    def __getstate__(self, /): ...
    def __gt__(self) -> None: ...
    def __hash__(self) -> None: ...
    def __init__(self) -> None: ...
    def __init_subclass__(cls) -> None: ...
    def __le__(self) -> None: ...
    def __lshift__(self) -> None: ...
    def __lt__(self) -> None: ...
    def __ne__(self) -> None: ...
    def __new__(cls) -> None: ...
    def __reduce__(self, /): ...
    def __reduce_ex__(self, protocol, /): ...
    def __repr__(self) -> None: ...
    def __rlshift__(self) -> None: ...
    def __rrshift__(self) -> None: ...
    def __rshift__(self) -> None: ...
    def __setattr__(self) -> None: ...
    def __sizeof__(self, /): ...
    def __str__(self) -> None: ...
    def __subclasshook__(self) -> None: ...
    def asType(self, arg__1: object) -> object: ...
    def getFragmentProgram(self) -> str: ...
    def getGeometryProgram(self) -> str: ...
    def getObjectId(self) -> int: ...
    def getParameterRef(self) -> vrdGLSLShaderParameterList: ...
    def getVertexProgram(self) -> str: ...
    def isNull(self) -> bool: ...
    def isType(self, arg__1: object) -> bool: ...
    def isValid(self) -> bool: ...
    def setFragmentProgram(self, program: str) -> None: ...
    def setGeometryProgram(self, program: str) -> None: ...
    def setVertexProgram(self, program: str) -> None: ...

class vrdGLSLShaderParameter:
    __doc__: NoneType
    __module__: str
    nameProperty: str
    def __copy__(self) -> None: ...
    def __delattr__(self) -> None: ...
    def __dir__(self, /): ...
    def __eq__(self) -> None: ...
    def __format__(self, format_spec, /): ...
    def __ge__(self) -> None: ...
    def __getattribute__(self) -> None: ...
    def __getstate__(self, /): ...
    def __gt__(self) -> None: ...
    def __hash__(self) -> None: ...
    def __init__(self) -> None: ...
    def __init_subclass__(cls) -> None: ...
    def __le__(self) -> None: ...
    def __lshift__(self) -> None: ...
    def __lt__(self) -> None: ...
    def __ne__(self) -> None: ...
    def __new__(cls) -> None: ...
    def __reduce__(self, /): ...
    def __reduce_ex__(self, protocol, /): ...
    def __repr__(self) -> None: ...
    def __rlshift__(self) -> None: ...
    def __rrshift__(self) -> None: ...
    def __rshift__(self) -> None: ...
    def __setattr__(self) -> None: ...
    def __sizeof__(self, /): ...
    def __str__(self) -> None: ...
    def __subclasshook__(self) -> None: ...
    def asType(self, arg__1: object) -> object: ...
    def getName(self) -> str: ...
    def getObjectId(self) -> int: ...
    def isNull(self) -> bool: ...
    def isType(self, arg__1: object) -> bool: ...
    def isValid(self) -> bool: ...

class vrdGLSLShaderParameterInt:
    __doc__: NoneType
    __module__: str
    valueProperty: str
    def __copy__(self) -> None: ...
    def __delattr__(self) -> None: ...
    def __dir__(self, /): ...
    def __eq__(self) -> None: ...
    def __format__(self, format_spec, /): ...
    def __ge__(self) -> None: ...
    def __getattribute__(self) -> None: ...
    def __getstate__(self, /): ...
    def __gt__(self) -> None: ...
    def __hash__(self) -> None: ...
    def __init__(self) -> None: ...
    def __init_subclass__(cls) -> None: ...
    def __le__(self) -> None: ...
    def __lshift__(self) -> None: ...
    def __lt__(self) -> None: ...
    def __ne__(self) -> None: ...
    def __new__(cls) -> None: ...
    def __reduce__(self, /): ...
    def __reduce_ex__(self, protocol, /): ...
    def __repr__(self) -> None: ...
    def __rlshift__(self) -> None: ...
    def __rrshift__(self) -> None: ...
    def __rshift__(self) -> None: ...
    def __setattr__(self) -> None: ...
    def __sizeof__(self, /): ...
    def __str__(self) -> None: ...
    def __subclasshook__(self) -> None: ...
    def asType(self, arg__1: object) -> object: ...
    def getName(self) -> str: ...
    def getObjectId(self) -> int: ...
    def getValue(self) -> int: ...
    def isNull(self) -> bool: ...
    def isType(self, arg__1: object) -> bool: ...
    def isValid(self) -> bool: ...
    def setValue(self, value: int) -> None: ...

class vrdGLSLShaderParameterList:
    __doc__: NoneType
    __module__: str
    def ParameterType(self) -> None: ...
    def __contains__(self) -> None: ...
    def __copy__(self) -> None: ...
    def __delattr__(self) -> None: ...
    def __dir__(self, /): ...
    def __eq__(self) -> None: ...
    def __format__(self, format_spec, /): ...
    def __ge__(self) -> None: ...
    def __getattribute__(self) -> None: ...
    def __getitem__(self) -> None: ...
    def __getstate__(self, /): ...
    def __gt__(self) -> None: ...
    def __hash__(self) -> None: ...
    def __init__(self) -> None: ...
    def __init_subclass__(cls) -> None: ...
    def __iter__(self) -> None: ...
    def __le__(self) -> None: ...
    def __len__(self) -> None: ...
    def __lshift__(self) -> None: ...
    def __lt__(self) -> None: ...
    def __ne__(self) -> None: ...
    def __new__(cls) -> None: ...
    def __reduce__(self, /): ...
    def __reduce_ex__(self, protocol, /): ...
    def __repr__(self) -> None: ...
    def __rlshift__(self) -> None: ...
    def __rrshift__(self) -> None: ...
    def __rshift__(self) -> None: ...
    def __setattr__(self) -> None: ...
    def __sizeof__(self, /): ...
    def __str__(self) -> None: ...
    def __subclasshook__(self) -> None: ...
    def asType(self, arg__1: object) -> object: ...
    def at(self, i: int) -> vrdGLSLShaderParameter: ...
    def autoCreate(self) -> None: ...
    def canInsert(self, value: vrdGLSLShaderParameter) -> bool: ...
    def clear(self) -> None: ...
    def contains(self, value: vrdGLSLShaderParameter) -> bool: ...
    def count(self, value: vrdGLSLShaderParameter) -> int: ...
    def create(self, name: str, type: vrdGLSLShaderParameterList.ParameterType) -> vrdGLSLShaderParameter: ...
    def data(self) -> List[vrdGLSLShaderParameter]: ...
    def find(self, name: str) -> vrdGLSLShaderParameter: ...
    def getObjectId(self) -> int: ...
    def index(self, value: vrdGLSLShaderParameter, from_: int = 0, to: int = -1) -> int: ...
    def isNull(self) -> bool: ...
    def isType(self, arg__1: object) -> bool: ...
    def move(self, from_: int, to: int) -> bool: ...
    def remove(self, value: vrdGLSLShaderParameter) -> bool: ...
    def removeAll(self, value: vrdGLSLShaderParameter) -> int: ...
    def removeAt(self, i: int) -> bool: ...
    def size(self) -> int: ...

class vrdGLSLShaderParameterMatrix:
    __doc__: NoneType
    __module__: str
    valueProperty: str
    def __copy__(self) -> None: ...
    def __delattr__(self) -> None: ...
    def __dir__(self, /): ...
    def __eq__(self) -> None: ...
    def __format__(self, format_spec, /): ...
    def __ge__(self) -> None: ...
    def __getattribute__(self) -> None: ...
    def __getstate__(self, /): ...
    def __gt__(self) -> None: ...
    def __hash__(self) -> None: ...
    def __init__(self) -> None: ...
    def __init_subclass__(cls) -> None: ...
    def __le__(self) -> None: ...
    def __lshift__(self) -> None: ...
    def __lt__(self) -> None: ...
    def __ne__(self) -> None: ...
    def __new__(cls) -> None: ...
    def __reduce__(self, /): ...
    def __reduce_ex__(self, protocol, /): ...
    def __repr__(self) -> None: ...
    def __rlshift__(self) -> None: ...
    def __rrshift__(self) -> None: ...
    def __rshift__(self) -> None: ...
    def __setattr__(self) -> None: ...
    def __sizeof__(self, /): ...
    def __str__(self) -> None: ...
    def __subclasshook__(self) -> None: ...
    def asType(self, arg__1: object) -> object: ...
    def getName(self) -> str: ...
    def getObjectId(self) -> int: ...
    def getValue(self) -> QMatrix4x4: ...
    def isNull(self) -> bool: ...
    def isType(self, arg__1: object) -> bool: ...
    def isValid(self) -> bool: ...
    def setValue(self, value: Union[QMatrix4x4, QTransform]) -> None: ...

class vrdGLSLShaderParameterReal:
    __doc__: NoneType
    __module__: str
    valueProperty: str
    def __copy__(self) -> None: ...
    def __delattr__(self) -> None: ...
    def __dir__(self, /): ...
    def __eq__(self) -> None: ...
    def __format__(self, format_spec, /): ...
    def __ge__(self) -> None: ...
    def __getattribute__(self) -> None: ...
    def __getstate__(self, /): ...
    def __gt__(self) -> None: ...
    def __hash__(self) -> None: ...
    def __init__(self) -> None: ...
    def __init_subclass__(cls) -> None: ...
    def __le__(self) -> None: ...
    def __lshift__(self) -> None: ...
    def __lt__(self) -> None: ...
    def __ne__(self) -> None: ...
    def __new__(cls) -> None: ...
    def __reduce__(self, /): ...
    def __reduce_ex__(self, protocol, /): ...
    def __repr__(self) -> None: ...
    def __rlshift__(self) -> None: ...
    def __rrshift__(self) -> None: ...
    def __rshift__(self) -> None: ...
    def __setattr__(self) -> None: ...
    def __sizeof__(self, /): ...
    def __str__(self) -> None: ...
    def __subclasshook__(self) -> None: ...
    def asType(self, arg__1: object) -> object: ...
    def getName(self) -> str: ...
    def getObjectId(self) -> int: ...
    def getValue(self) -> float: ...
    def isNull(self) -> bool: ...
    def isType(self, arg__1: object) -> bool: ...
    def isValid(self) -> bool: ...
    def setValue(self, value: float) -> None: ...

class vrdGLSLShaderParameterVec2f:
    __doc__: NoneType
    __module__: str
    valueProperty: str
    def __copy__(self) -> None: ...
    def __delattr__(self) -> None: ...
    def __dir__(self, /): ...
    def __eq__(self) -> None: ...
    def __format__(self, format_spec, /): ...
    def __ge__(self) -> None: ...
    def __getattribute__(self) -> None: ...
    def __getstate__(self, /): ...
    def __gt__(self) -> None: ...
    def __hash__(self) -> None: ...
    def __init__(self) -> None: ...
    def __init_subclass__(cls) -> None: ...
    def __le__(self) -> None: ...
    def __lshift__(self) -> None: ...
    def __lt__(self) -> None: ...
    def __ne__(self) -> None: ...
    def __new__(cls) -> None: ...
    def __reduce__(self, /): ...
    def __reduce_ex__(self, protocol, /): ...
    def __repr__(self) -> None: ...
    def __rlshift__(self) -> None: ...
    def __rrshift__(self) -> None: ...
    def __rshift__(self) -> None: ...
    def __setattr__(self) -> None: ...
    def __sizeof__(self, /): ...
    def __str__(self) -> None: ...
    def __subclasshook__(self) -> None: ...
    def asType(self, arg__1: object) -> object: ...
    def getName(self) -> str: ...
    def getObjectId(self) -> int: ...
    def getValue(self) -> QVector2D: ...
    def isNull(self) -> bool: ...
    def isType(self, arg__1: object) -> bool: ...
    def isValid(self) -> bool: ...
    def setValue(self, value: QVector2D) -> None: ...

class vrdGLSLShaderParameterVec3f:
    __doc__: NoneType
    __module__: str
    valueProperty: str
    def __copy__(self) -> None: ...
    def __delattr__(self) -> None: ...
    def __dir__(self, /): ...
    def __eq__(self) -> None: ...
    def __format__(self, format_spec, /): ...
    def __ge__(self) -> None: ...
    def __getattribute__(self) -> None: ...
    def __getstate__(self, /): ...
    def __gt__(self) -> None: ...
    def __hash__(self) -> None: ...
    def __init__(self) -> None: ...
    def __init_subclass__(cls) -> None: ...
    def __le__(self) -> None: ...
    def __lshift__(self) -> None: ...
    def __lt__(self) -> None: ...
    def __ne__(self) -> None: ...
    def __new__(cls) -> None: ...
    def __reduce__(self, /): ...
    def __reduce_ex__(self, protocol, /): ...
    def __repr__(self) -> None: ...
    def __rlshift__(self) -> None: ...
    def __rrshift__(self) -> None: ...
    def __rshift__(self) -> None: ...
    def __setattr__(self) -> None: ...
    def __sizeof__(self, /): ...
    def __str__(self) -> None: ...
    def __subclasshook__(self) -> None: ...
    def asType(self, arg__1: object) -> object: ...
    def getName(self) -> str: ...
    def getObjectId(self) -> int: ...
    def getValue(self) -> QVector3D: ...
    def isNull(self) -> bool: ...
    def isType(self, arg__1: object) -> bool: ...
    def isValid(self) -> bool: ...
    def setValue(self, value: QVector3D) -> None: ...

class vrdGLSLShaderParameterVec4f:
    __doc__: NoneType
    __module__: str
    valueProperty: str
    def __copy__(self) -> None: ...
    def __delattr__(self) -> None: ...
    def __dir__(self, /): ...
    def __eq__(self) -> None: ...
    def __format__(self, format_spec, /): ...
    def __ge__(self) -> None: ...
    def __getattribute__(self) -> None: ...
    def __getstate__(self, /): ...
    def __gt__(self) -> None: ...
    def __hash__(self) -> None: ...
    def __init__(self) -> None: ...
    def __init_subclass__(cls) -> None: ...
    def __le__(self) -> None: ...
    def __lshift__(self) -> None: ...
    def __lt__(self) -> None: ...
    def __ne__(self) -> None: ...
    def __new__(cls) -> None: ...
    def __reduce__(self, /): ...
    def __reduce_ex__(self, protocol, /): ...
    def __repr__(self) -> None: ...
    def __rlshift__(self) -> None: ...
    def __rrshift__(self) -> None: ...
    def __rshift__(self) -> None: ...
    def __setattr__(self) -> None: ...
    def __sizeof__(self, /): ...
    def __str__(self) -> None: ...
    def __subclasshook__(self) -> None: ...
    def asType(self, arg__1: object) -> object: ...
    def getName(self) -> str: ...
    def getObjectId(self) -> int: ...
    def getValue(self) -> QVector4D: ...
    def isNull(self) -> bool: ...
    def isType(self, arg__1: object) -> bool: ...
    def isValid(self) -> bool: ...
    def setValue(self, value: QVector4D) -> None: ...

class vrdGeometryNode(vrdTransformNode):
    __doc__: NoneType
    __module__: str
    activeBakeTypeProperty: str
    vertexBakeProperty: str
    textureBakeProperty: str
    vertexBakeStateProperty: str
    textureBakeStateProperty: str
    primitiveTypeProperty: str
    bSideProperty: str
    positionsProperty: str
    indicesProperty: str
    normalsProperty: str
    texCoordsProperty: str
    def __copy__(self) -> None: ...
    def __delattr__(self) -> None: ...
    def __dir__(self, /): ...
    def __eq__(self) -> None: ...
    def __format__(self, format_spec, /): ...
    def __ge__(self) -> None: ...
    def __getattribute__(self) -> None: ...
    def __getstate__(self, /): ...
    def __gt__(self) -> None: ...
    def __hash__(self) -> None: ...
    def __init__(self) -> None: ...
    def __init_subclass__(cls) -> None: ...
    def __le__(self) -> None: ...
    def __lshift__(self) -> None: ...
    def __lt__(self) -> None: ...
    def __ne__(self) -> None: ...
    def __new__(cls) -> None: ...
    def __reduce__(self, /): ...
    def __reduce_ex__(self, protocol, /): ...
    def __repr__(self) -> None: ...
    def __rlshift__(self) -> None: ...
    def __rrshift__(self) -> None: ...
    def __rshift__(self) -> None: ...
    def __setattr__(self) -> None: ...
    def __sizeof__(self, /): ...
    def __str__(self) -> None: ...
    def __subclasshook__(self) -> None: ...
    def applyMaterial(self, material: vrdMaterial) -> None: ...
    def asType(self, arg__1: object) -> object: ...
    def captureTransformVariant(self, name: str) -> None: ...
    def createTextureBake(self) -> vrdTextureBake: ...
    def deleteTransformVariant(self, variant: vrdTransformNodeVariant) -> None: ...
    def findTransformVariant(self, name: str) -> vrdTransformNodeVariant: ...
    def getActiveBakeType(self) -> vrBakeTypes.BakeType: ...
    def getBoundingBox(self) -> vrdBoundingBox: ...
    def getChild(self, index: int) -> vrdNode: ...
    def getChildCount(self) -> int: ...
    def getChildIndex(self, child: vrdNode) -> int: ...
    def getChildren(self) -> List[vrdNode]: ...
    def getChildrenRecursive(self) -> List[vrdNode]: ...
    def getChildrenRef(self) -> vrdNodeList: ...
    def getEulerRotationOrder(self) -> vrTransformTypes.EulerRotationOrder: ...
    def getIndices(self) -> List[int]: ...
    def getLocked(self) -> bool: ...
    def getMaterial(self) -> vrdMaterial: ...
    def getName(self) -> str: ...
    def getNormals(self) -> List[float]: ...
    def getObjectId(self) -> int: ...
    def getOrCreateTransformNode(self) -> vrdNode: ...
    def getParent(self) -> vrdNode: ...
    def getPath(self) -> str: ...
    def getPositions(self) -> List[float]: ...
    def getPrimitiveCount(self) -> int: ...
    def getPrimitiveType(self) -> vrGeometryTypes.PrimitiveType: ...
    def getRotatePivot(self) -> QVector3D: ...
    def getRotatePivotTranslation(self) -> QVector3D: ...
    def getRotationAsEuler(self) -> QVector3D: ...
    def getRotationAsQuaternion(self) -> QQuaternion: ...
    def getRotationOrientationAsEuler(self) -> QVector3D: ...
    def getRotationOrientationAsQuaternion(self) -> QQuaternion: ...
    def getScale(self) -> QVector3D: ...
    def getScalePivot(self) -> QVector3D: ...
    def getScalePivotTranslation(self) -> QVector3D: ...
    def getSelectableFlag(self) -> bool: ...
    def getSharedNodes(self) -> List[vrdNode]: ...
    def getShear(self) -> QVector3D: ...
    def getSynchronizedNodes(self) -> List[vrdNode]: ...
    def getTexCoords(self, texSlot: int = 0) -> List[float]: ...
    def getTexCoordsDimension(self, texSlot: int = 0) -> int: ...
    def getTextureBake(self) -> vrdTextureBake: ...
    def getTextureBakeState(self) -> vrBakeTypes.BakeState: ...
    def getTransform(self) -> QMatrix4x4: ...
    def getTransformVariants(self) -> List[vrdTransformNodeVariant]: ...
    def getTranslation(self) -> QVector3D: ...
    def getUniquePath(self) -> str: ...
    def getVertexBake(self) -> vrdVertexBake: ...
    def getVertexBakeState(self) -> vrBakeTypes.BakeState: ...
    def getVertexCount(self) -> int: ...
    def getVisibilityFlag(self) -> bool: ...
    def getWorldBoundingBox(self) -> vrdBoundingBox: ...
    def getWorldRotatePivot(self) -> QVector3D: ...
    def getWorldScalePivot(self) -> QVector3D: ...
    def getWorldTransform(self) -> QMatrix4x4: ...
    def getWorldTranslation(self) -> QVector3D: ...
    def hasParent(self, parent: vrdNode) -> bool: ...
    def hasUVSet(self, set: vrUVTypes.UVSet) -> bool: ...
    def isBSide(self) -> bool: ...
    def isComponent(self) -> bool: ...
    def isEditable(self) -> bool: ...
    def isEditedAsset(self) -> bool: ...
    def isGroup(self) -> bool: ...
    def isImplicitShared(self) -> bool: ...
    def isMesh(self) -> bool: ...
    def isNull(self) -> bool: ...
    def isShared(self) -> bool: ...
    def isSharedWith(self, node: vrdNode) -> bool: ...
    def isShell(self) -> bool: ...
    def isSurface(self) -> bool: ...
    def isSynchronized(self) -> bool: ...
    def isType(self, arg__1: object) -> bool: ...
    def isValid(self) -> bool: ...
    def isVisible(self) -> bool: ...
    def resetTransformation(self) -> None: ...
    def setActiveBakeType(self, type: vrBakeTypes.BakeType) -> None: ...
    def setBSide(self, isBSide: bool) -> None: ...
    def setEulerRotationOrder(self, rotationOrder: vrTransformTypes.EulerRotationOrder) -> None: ...
    def setIndices(self, indices: Sequence[int]) -> None: ...
    def setLocked(self, locked: bool) -> None: ...
    def setName(self, name: str) -> None: ...
    def setNormals(self, normals: Sequence[float]) -> None: ...
    def setPositions(self, positions: Sequence[float]) -> None: ...
    def setPrimitiveType(self, primitiveType: vrGeometryTypes.PrimitiveType) -> None: ...
    def setRotatePivot(self, rotatePivot: QVector3D) -> None: ...
    def setRotatePivotTranslation(self, rotatePivotTranslation: QVector3D) -> None: ...
    def setRotationAsEuler(self, rotation: QVector3D) -> None: ...
    def setRotationAsQuaternion(self, rotation: QQuaternion) -> None: ...
    def setRotationOrientationAsEuler(self, rotationOrientation: QVector3D) -> None: ...
    def setRotationOrientationAsQuaternion(self, orientation: QQuaternion) -> None: ...
    def setScale(self, scale: QVector3D) -> None: ...
    def setScalePivot(self, scalePivot: QVector3D) -> None: ...
    def setScalePivotTranslation(self, scalePivotTranslation: QVector3D) -> None: ...
    def setSelectableFlag(self, selectable: bool) -> None: ...
    def setShear(self, shear: QVector3D) -> None: ...
    def setTexCoords(self, coordinates: Sequence[float], texSlot: int = 0, dimension: int = 2) -> None: ...
    def setToBSide(self, isBSide: bool) -> None: ...
    def setTransform(self, matrix: Union[QMatrix4x4, QTransform]) -> None: ...
    def setTranslation(self, translation: QVector3D) -> None: ...
    def setVisibilityFlag(self, visible: bool) -> None: ...
    def setWorldRotatePivot(self, rotatePivot: QVector3D) -> None: ...
    def setWorldScalePivot(self, scalePivot: QVector3D) -> None: ...
    def setWorldTransform(self, matrix: Union[QMatrix4x4, QTransform]) -> None: ...
    def setWorldTranslation(self, translation: QVector3D) -> None: ...

class vrdGlassMaterial:
    __doc__: NoneType
    __module__: str
    Custom: MediumType
    Diamond: MediumType
    Polysilicon: MediumType
    AcrylicGlass: MediumType
    PlasticPolystyrene: MediumType
    PlasticPolycarbonates: MediumType
    Ethanol: MediumType
    Methanol: MediumType
    Water19degrees: MediumType
    Water24degrees: MediumType
    CrownGlassBorosilicateGlass: MediumType
    GlassLanthanumDenseFlint: MediumType
    GlassBariumFlint: MediumType
    GlassDenseFlint: MediumType
    QuartzFusedSilica: MediumType
    FusedGermania: MediumType
    Fast: FresnelQuality
    Accurate: FresnelQuality
    AbbeD: DispersionInputType
    AbbeE: DispersionInputType
    Spectral: DispersionInputType
    exteriorColorProperty: str
    exteriorColorSpectrumProperty: str
    interiorColorProperty: str
    interiorColorSpectrumProperty: str
    reflectionColorProperty: str
    reflectionColorSpectrumProperty: str
    mediumTypeProperty: str
    refractionIndexProperty: str
    simulatedThicknessProperty: str
    useDispersionProperty: str
    dispersionInputTypeProperty: str
    abbeNumberProperty: str
    useCustomReflectivityProperty: str
    reflectivityProperty: str
    fresnelQualityProperty: str
    useSolidShadowsProperty: str
    useRoughnessProperty: str
    roughnessProperty: str
    useDensityProperty: str
    densityProperty: str
    textureSettingsProperty: str
    exteriorTransparencyTextureProperty: str
    roughnessTextureProperty: str
    bumpTextureProperty: str
    incandescenceProperty: str
    displacementTextureProperty: str
    def DispersionInputType(self) -> None: ...
    def FresnelQuality(self) -> None: ...
    def MediumType(self) -> None: ...
    def __copy__(self) -> None: ...
    def __delattr__(self) -> None: ...
    def __dir__(self, /): ...
    def __eq__(self) -> None: ...
    def __format__(self, format_spec, /): ...
    def __ge__(self) -> None: ...
    def __getattribute__(self) -> None: ...
    def __getstate__(self, /): ...
    def __gt__(self) -> None: ...
    def __hash__(self) -> None: ...
    def __init__(self) -> None: ...
    def __init_subclass__(cls) -> None: ...
    def __le__(self) -> None: ...
    def __lshift__(self) -> None: ...
    def __lt__(self) -> None: ...
    def __ne__(self) -> None: ...
    def __new__(cls) -> None: ...
    def __reduce__(self, /): ...
    def __reduce_ex__(self, protocol, /): ...
    def __repr__(self) -> None: ...
    def __rlshift__(self) -> None: ...
    def __rrshift__(self) -> None: ...
    def __rshift__(self) -> None: ...
    def __setattr__(self) -> None: ...
    def __sizeof__(self, /): ...
    def __str__(self) -> None: ...
    def __subclasshook__(self) -> None: ...
    def asType(self, arg__1: object) -> object: ...
    def duplicate(self, name: str = '') -> vrdMaterial: ...
    def getAbbeNumber(self) -> float: ...
    def getAnalytic(self) -> vrdAnalyticSettings: ...
    def getBumpTexture(self) -> vrdBumpTexture: ...
    def getCommon(self) -> vrdBRDFCommonSettings: ...
    def getDensity(self) -> float: ...
    def getDispersionInputType(self) -> vrdGlassMaterial.DispersionInputType: ...
    def getDisplacementTexture(self) -> vrdDisplacementTexture: ...
    def getExteriorColor(self) -> QVector3D: ...
    def getExteriorColorSpectrum(self) -> vrSpectrum: ...
    def getExteriorTransparencyTexture(self) -> vrdTexture: ...
    def getFresnelQuality(self) -> vrdGlassMaterial.FresnelQuality: ...
    def getIcon(self) -> QIcon: ...
    def getIncandescence(self) -> vrdIncandescence: ...
    def getInteriorColor(self) -> QVector3D: ...
    def getInteriorColorSpectrum(self) -> vrSpectrum: ...
    def getLocked(self) -> bool: ...
    def getMediumType(self) -> vrdGlassMaterial.MediumType: ...
    def getNPR(self) -> vrdNPRSettings: ...
    def getName(self) -> str: ...
    def getObjectId(self) -> int: ...
    def getPreview(self) -> QImage: ...
    def getPreviewScene(self) -> str: ...
    def getRaytracing(self) -> vrdMaterialRaytracingSettings: ...
    def getReflectionColor(self) -> QVector3D: ...
    def getReflectionColorSpectrum(self) -> vrSpectrum: ...
    def getReflectivity(self) -> float: ...
    def getRefractionIndex(self) -> float: ...
    def getRoughness(self) -> float: ...
    def getRoughnessTexture(self) -> vrdRoughnessTexture: ...
    def getRoundedEdges(self) -> vrdRoundedEdges: ...
    def getSimulatedThickness(self) -> float: ...
    def getTextureSettings(self) -> vrdTextureSettings: ...
    def getTextures(self) -> List[vrdTexture]: ...
    def getTransparency(self) -> vrdTransparency: ...
    def getUseCustomReflectivity(self) -> bool: ...
    def getUseDensity(self) -> bool: ...
    def getUseDispersion(self) -> bool: ...
    def getUseRoughness(self) -> bool: ...
    def getUseSolidShadows(self) -> bool: ...
    def isAsset(self) -> bool: ...
    def isComponent(self) -> bool: ...
    def isDisplacementActive(self) -> bool: ...
    def isEditable(self) -> bool: ...
    def isEditedAsset(self) -> bool: ...
    def isNull(self) -> bool: ...
    def isType(self, arg__1: object) -> bool: ...
    def isValid(self) -> bool: ...
    def setAbbeNumber(self, value: float) -> None: ...
    def setDensity(self, value: float) -> None: ...
    def setDispersionInputType(self, type: vrdGlassMaterial.DispersionInputType) -> None: ...
    def setExteriorColor(self, value: QVector3D) -> None: ...
    def setExteriorColorSpectrum(self, value: Union[vrSpectrum, QVector3D]) -> None: ...
    def setFresnelQuality(self, type: vrdGlassMaterial.FresnelQuality) -> None: ...
    def setInlineAllImageSequences(self, value: bool) -> List[vrdImage]: ...
    def setInteriorColor(self, value: QVector3D) -> None: ...
    def setInteriorColorSpectrum(self, value: Union[vrSpectrum, QVector3D]) -> None: ...
    def setLocked(self, locked: bool) -> None: ...
    def setMediumType(self, type: vrdGlassMaterial.MediumType) -> None: ...
    def setName(self, name: str) -> None: ...
    def setPreviewScene(self, name: str) -> None: ...
    def setReflectionColor(self, value: QVector3D) -> None: ...
    def setReflectionColorSpectrum(self, value: Union[vrSpectrum, QVector3D]) -> None: ...
    def setReflectivity(self, v: float) -> None: ...
    def setRefractionIndex(self, value: float) -> None: ...
    def setRoughness(self, roughness: float) -> None: ...
    def setSimulatedThickness(self, value: float) -> None: ...
    def setUseCustomReflectivity(self, value: bool) -> None: ...
    def setUseDensity(self, value: bool) -> None: ...
    def setUseDispersion(self, value: bool) -> None: ...
    def setUseRoughness(self, value: bool) -> None: ...
    def setUseSolidShadows(self, value: bool) -> None: ...

class vrdGpuStateInfo:
    __doc__: NoneType
    __module__: str
    def __copy__(self) -> None: ...
    def __delattr__(self) -> None: ...
    def __dir__(self, /): ...
    def __eq__(self) -> None: ...
    def __format__(self, format_spec, /): ...
    def __ge__(self) -> None: ...
    def __getattribute__(self) -> None: ...
    def __getstate__(self, /): ...
    def __gt__(self) -> None: ...
    def __hash__(self) -> None: ...
    def __init__(self) -> None: ...
    def __init_subclass__(cls) -> None: ...
    def __le__(self) -> None: ...
    def __lshift__(self) -> None: ...
    def __lt__(self) -> None: ...
    def __ne__(self) -> None: ...
    def __new__(cls) -> None: ...
    def __reduce__(self, /): ...
    def __reduce_ex__(self, protocol, /): ...
    def __repr__(self) -> None: ...
    def __rlshift__(self) -> None: ...
    def __rrshift__(self) -> None: ...
    def __rshift__(self) -> None: ...
    def __setattr__(self) -> None: ...
    def __sizeof__(self, /): ...
    def __str__(self) -> None: ...
    def __subclasshook__(self) -> None: ...
    def asType(self, arg__1: object) -> object: ...
    def getFreeMemory(self) -> float: ...
    def getGpuUsage(self) -> int: ...
    def getMemoryUsage(self) -> int: ...
    def getObjectId(self) -> int: ...
    def getTemperature(self) -> int: ...
    def getTotalMemory(self) -> float: ...
    def getUsedMemory(self) -> float: ...
    def isNull(self) -> bool: ...
    def isType(self, arg__1: object) -> bool: ...

class vrdHDRLightStudio:
    __doc__: NoneType
    __module__: str
    ReflectionPainting: LightPaintMode
    IlluminationPainting: LightPaintMode
    RimPainting: LightPaintMode
    lightPaintProperty: str
    lightPaintModeProperty: str
    connectedProperty: str
    def LightPaintMode(self) -> None: ...
    def __copy__(self) -> None: ...
    def __delattr__(self) -> None: ...
    def __dir__(self, /): ...
    def __eq__(self) -> None: ...
    def __format__(self, format_spec, /): ...
    def __ge__(self) -> None: ...
    def __getattribute__(self) -> None: ...
    def __getstate__(self, /): ...
    def __gt__(self) -> None: ...
    def __hash__(self) -> None: ...
    def __init__(self) -> None: ...
    def __init_subclass__(cls) -> None: ...
    def __le__(self) -> None: ...
    def __lshift__(self) -> None: ...
    def __lt__(self) -> None: ...
    def __ne__(self) -> None: ...
    def __new__(cls) -> None: ...
    def __reduce__(self, /): ...
    def __reduce_ex__(self, protocol, /): ...
    def __repr__(self) -> None: ...
    def __rlshift__(self) -> None: ...
    def __rrshift__(self) -> None: ...
    def __rshift__(self) -> None: ...
    def __setattr__(self) -> None: ...
    def __sizeof__(self, /): ...
    def __str__(self) -> None: ...
    def __subclasshook__(self) -> None: ...
    def asType(self, arg__1: object) -> object: ...
    def editAndLoadSettings(self) -> bool: ...
    def getLightPaint(self) -> bool: ...
    def getLightPaintMode(self) -> vrdHDRLightStudio.LightPaintMode: ...
    def getObjectId(self) -> int: ...
    def isConnected(self) -> bool: ...
    def isNull(self) -> bool: ...
    def isType(self, arg__1: object) -> bool: ...
    def isValid(self) -> bool: ...
    def quit(self) -> None: ...
    def saveSettings(self) -> bool: ...
    def setLightPaint(self, value: bool) -> None: ...
    def setLightPaintMode(self, mode: vrdHDRLightStudio.LightPaintMode) -> None: ...
    def show(self) -> None: ...

class vrdHostSwitchNode:
    __doc__: NoneType
    __module__: str
    hostNameProperty: str
    def __copy__(self) -> None: ...
    def __delattr__(self) -> None: ...
    def __dir__(self, /): ...
    def __eq__(self) -> None: ...
    def __format__(self, format_spec, /): ...
    def __ge__(self) -> None: ...
    def __getattribute__(self) -> None: ...
    def __getstate__(self, /): ...
    def __gt__(self) -> None: ...
    def __hash__(self) -> None: ...
    def __init__(self) -> None: ...
    def __init_subclass__(cls) -> None: ...
    def __le__(self) -> None: ...
    def __lshift__(self) -> None: ...
    def __lt__(self) -> None: ...
    def __ne__(self) -> None: ...
    def __new__(cls) -> None: ...
    def __reduce__(self, /): ...
    def __reduce_ex__(self, protocol, /): ...
    def __repr__(self) -> None: ...
    def __rlshift__(self) -> None: ...
    def __rrshift__(self) -> None: ...
    def __rshift__(self) -> None: ...
    def __setattr__(self) -> None: ...
    def __sizeof__(self, /): ...
    def __str__(self) -> None: ...
    def __subclasshook__(self) -> None: ...
    def applyMaterial(self, material: vrdMaterial) -> None: ...
    def asType(self, arg__1: object) -> object: ...
    def getBoundingBox(self) -> vrdBoundingBox: ...
    def getChild(self, index: int) -> vrdNode: ...
    def getChildCount(self) -> int: ...
    def getChildIndex(self, child: vrdNode) -> int: ...
    def getChildren(self) -> List[vrdNode]: ...
    def getChildrenRecursive(self) -> List[vrdNode]: ...
    def getChildrenRef(self) -> vrdNodeList: ...
    def getHostName(self) -> str: ...
    def getLocked(self) -> bool: ...
    def getMaterial(self) -> vrdMaterial: ...
    def getName(self) -> str: ...
    def getObjectId(self) -> int: ...
    def getOrCreateTransformNode(self) -> vrdNode: ...
    def getParent(self) -> vrdNode: ...
    def getPath(self) -> str: ...
    def getSelectableFlag(self) -> bool: ...
    def getSharedNodes(self) -> List[vrdNode]: ...
    def getSynchronizedNodes(self) -> List[vrdNode]: ...
    def getUniquePath(self) -> str: ...
    def getVisibilityFlag(self) -> bool: ...
    def getWorldBoundingBox(self) -> vrdBoundingBox: ...
    def getWorldTransform(self) -> QMatrix4x4: ...
    def hasParent(self, parent: vrdNode) -> bool: ...
    def isEditable(self) -> bool: ...
    def isEditedAsset(self) -> bool: ...
    def isGroup(self) -> bool: ...
    def isImplicitShared(self) -> bool: ...
    def isNull(self) -> bool: ...
    def isShared(self) -> bool: ...
    def isSharedWith(self, node: vrdNode) -> bool: ...
    def isSynchronized(self) -> bool: ...
    def isType(self, arg__1: object) -> bool: ...
    def isValid(self) -> bool: ...
    def isVisible(self) -> bool: ...
    def setHostName(self, value: str) -> None: ...
    def setLocked(self, locked: bool) -> None: ...
    def setName(self, name: str) -> None: ...
    def setSelectableFlag(self, selectable: bool) -> None: ...
    def setVisibilityFlag(self, visible: bool) -> None: ...

class vrdIlluminationBakeSettings:
    __doc__: NoneType
    __module__: str
    directIlluminationModeProperty: str
    ambientOcclusionWeightProperty: str
    indirectIlluminationProperty: str
    indirectionsProperty: str
    colorBleedingProperty: str
    materialOverrideProperty: str
    def __copy__(self) -> None: ...
    def __delattr__(self) -> None: ...
    def __dir__(self, /): ...
    def __eq__(self) -> None: ...
    def __format__(self, format_spec, /): ...
    def __ge__(self) -> None: ...
    def __getattribute__(self) -> None: ...
    def __getstate__(self, /): ...
    def __gt__(self) -> None: ...
    def __hash__(self) -> None: ...
    def __init__(self) -> None: ...
    def __init_subclass__(cls) -> None: ...
    def __le__(self) -> None: ...
    def __lt__(self) -> None: ...
    def __ne__(self) -> None: ...
    def __new__(cls) -> None: ...
    def __reduce__(self, /): ...
    def __reduce_ex__(self, protocol, /): ...
    def __repr__(self) -> None: ...
    def __setattr__(self) -> None: ...
    def __sizeof__(self, /): ...
    def __str__(self) -> None: ...
    def __subclasshook__(self) -> None: ...
    def getAmbientOcclusionMaximumDistance(self) -> float: ...
    def getAmbientOcclusionMinimumDistance(self) -> float: ...
    def getAmbientOcclusionWeight(self) -> vrBakeTypes.AmbientOcclusionWeight: ...
    def getColorBleeding(self) -> bool: ...
    def getDirectIlluminationMode(self) -> vrBakeTypes.DirectIlluminationMode: ...
    def getIndirectIllumination(self) -> bool: ...
    def getIndirections(self) -> int: ...
    def getLightsLayer(self) -> int: ...
    def getMaterialOverride(self) -> bool: ...
    def getMaterialOverrideColor(self) -> QColor: ...
    def setAmbientOcclusionMaximumDistance(self, value: float) -> None: ...
    def setAmbientOcclusionMinimumDistance(self, value: float) -> None: ...
    def setAmbientOcclusionWeight(self, value: vrBakeTypes.AmbientOcclusionWeight) -> None: ...
    def setColorBleeding(self, value: bool) -> None: ...
    def setDirectIlluminationMode(self, value: vrBakeTypes.DirectIlluminationMode) -> None: ...
    def setIndirectIllumination(self, value: bool) -> None: ...
    def setIndirections(self, value: int) -> None: ...
    def setLightsLayer(self, value: int) -> None: ...
    def setMaterialOverride(self, value: bool) -> None: ...
    def setMaterialOverrideColor(self, value: Union[QColor, QRgba64, Any, Qt.GlobalColor, str, int]) -> None: ...

class vrdImage:
    __doc__: NoneType
    __module__: str
    def __copy__(self) -> None: ...
    def __delattr__(self) -> None: ...
    def __dir__(self, /): ...
    def __eq__(self) -> None: ...
    def __format__(self, format_spec, /): ...
    def __ge__(self) -> None: ...
    def __getattribute__(self) -> None: ...
    def __getstate__(self, /): ...
    def __gt__(self) -> None: ...
    def __hash__(self) -> None: ...
    def __init__(self) -> None: ...
    def __init_subclass__(cls) -> None: ...
    def __le__(self) -> None: ...
    def __lshift__(self) -> None: ...
    def __lt__(self) -> None: ...
    def __ne__(self) -> None: ...
    def __new__(cls) -> None: ...
    def __reduce__(self, /): ...
    def __reduce_ex__(self, protocol, /): ...
    def __repr__(self) -> None: ...
    def __rlshift__(self) -> None: ...
    def __rrshift__(self) -> None: ...
    def __rshift__(self) -> None: ...
    def __setattr__(self) -> None: ...
    def __sizeof__(self, /): ...
    def __str__(self) -> None: ...
    def __subclasshook__(self) -> None: ...
    def asType(self, arg__1: object) -> object: ...
    def getAbsolutePath(self) -> str: ...
    def getDimension(self) -> QSize: ...
    def getHeight(self) -> int: ...
    def getInline(self) -> bool: ...
    def getInternal(self) -> bool: ...
    def getObjectId(self) -> int: ...
    def getPreview(self, size: int = 96) -> QImage: ...
    def getWidth(self) -> int: ...
    def hasAlphaChannel(self) -> bool: ...
    def hasEnvironmentMapLayout(self) -> bool: ...
    def isNull(self) -> bool: ...
    def isType(self, arg__1: object) -> bool: ...
    def isValid(self) -> bool: ...
    def setInline(self, value: bool) -> None: ...
    def toQIcon(self) -> QIcon: ...
    def toQImage(self) -> QImage: ...

class vrdImmersiveMenu:
    __doc__: NoneType
    __module__: str
    ORIGIN_LOCAL: MenuOrigin
    ORIGIN_WORLD: MenuOrigin
    ORIGIN_CAMERA: MenuOrigin
    ORIGIN_HEAD: MenuOrigin
    ORIGIN_LEFTHAND: MenuOrigin
    ORIGIN_RIGHTHAND: MenuOrigin
    CONSTRAINT_NONE: MenuConstraint
    CONSTRAINT_NO_ROTATION: MenuConstraint
    CONSTRAINT_YAW_ONLY: MenuConstraint
    visibleProperty: str
    translationProperty: str
    rotationProperty: str
    widthProperty: str
    heightProperty: str
    depthProperty: str
    originProperty: str
    constraintProperty: str
    nameProperty: str
    def MenuConstraint(self) -> None: ...
    def MenuOrigin(self) -> None: ...
    def __copy__(self) -> None: ...
    def __delattr__(self) -> None: ...
    def __dir__(self, /): ...
    def __eq__(self) -> None: ...
    def __format__(self, format_spec, /): ...
    def __ge__(self) -> None: ...
    def __getattribute__(self) -> None: ...
    def __getstate__(self, /): ...
    def __gt__(self) -> None: ...
    def __hash__(self) -> None: ...
    def __init__(self) -> None: ...
    def __init_subclass__(cls) -> None: ...
    def __le__(self) -> None: ...
    def __lshift__(self) -> None: ...
    def __lt__(self) -> None: ...
    def __ne__(self) -> None: ...
    def __new__(cls) -> None: ...
    def __reduce__(self, /): ...
    def __reduce_ex__(self, protocol, /): ...
    def __repr__(self) -> None: ...
    def __rlshift__(self) -> None: ...
    def __rrshift__(self) -> None: ...
    def __rshift__(self) -> None: ...
    def __setattr__(self) -> None: ...
    def __sizeof__(self, /): ...
    def __str__(self) -> None: ...
    def __subclasshook__(self) -> None: ...
    def asType(self, arg__1: object) -> object: ...
    def attachTo(self, origin: int, constraint: int) -> None: ...
    def getConstraint(self) -> vrdImmersiveMenu.MenuConstraint: ...
    def getDepth(self) -> float: ...
    def getHeight(self) -> float: ...
    def getName(self) -> str: ...
    def getObjectId(self) -> int: ...
    def getOrigin(self) -> vrdImmersiveMenu.MenuOrigin: ...
    def getRotation(self) -> QVector3D: ...
    def getTranslation(self) -> QVector3D: ...
    def getWidth(self) -> float: ...
    def isNull(self) -> bool: ...
    def isType(self, arg__1: object) -> bool: ...
    def isVisible(self) -> bool: ...
    def setConstraint(self, value: vrdImmersiveMenu.MenuConstraint) -> None: ...
    def setContent(self, content: str) -> None: ...
    def setDepth(self, value: float) -> None: ...
    def setHeight(self, value: float) -> None: ...
    def setModule(self, moduleTitle: str) -> None: ...
    def setName(self, value: str) -> None: ...
    def setOrigin(self, value: vrdImmersiveMenu.MenuOrigin) -> None: ...
    def setUrl(self, url: str, pixelWidth: int = 800, pixelHeight: int = 600) -> None: ...
    def setVisible(self, value: bool) -> None: ...
    def setWidget(self, widget: QObject) -> None: ...
    def setWidth(self, value: float) -> None: ...

class vrdImmersiveTool:
    __doc__: NoneType
    __module__: str
    iconProperty: str
    textProperty: str
    checkableProperty: str
    checkedProperty: str
    clickedCommandProperty: str
    checkedCommandProperty: str
    uncheckedCommandProperty: str
    viewContentProperty: str
    groupProperty: str
    internalProperty: str
    def __copy__(self) -> None: ...
    def __delattr__(self) -> None: ...
    def __dir__(self, /): ...
    def __eq__(self) -> None: ...
    def __format__(self, format_spec, /): ...
    def __ge__(self) -> None: ...
    def __getattribute__(self) -> None: ...
    def __getstate__(self, /): ...
    def __gt__(self) -> None: ...
    def __hash__(self) -> None: ...
    def __init__(self) -> None: ...
    def __init_subclass__(cls) -> None: ...
    def __le__(self) -> None: ...
    def __lshift__(self) -> None: ...
    def __lt__(self) -> None: ...
    def __ne__(self) -> None: ...
    def __new__(cls) -> None: ...
    def __reduce__(self, /): ...
    def __reduce_ex__(self, protocol, /): ...
    def __repr__(self) -> None: ...
    def __rlshift__(self) -> None: ...
    def __rrshift__(self) -> None: ...
    def __rshift__(self) -> None: ...
    def __setattr__(self) -> None: ...
    def __sizeof__(self, /): ...
    def __str__(self) -> None: ...
    def __subclasshook__(self) -> None: ...
    def asType(self, arg__1: object) -> object: ...
    def getCheckable(self) -> bool: ...
    def getChecked(self) -> bool: ...
    def getCheckedCommand(self) -> str: ...
    def getClickedCommand(self) -> str: ...
    def getGroup(self) -> str: ...
    def getHideAway(self) -> bool: ...
    def getIcon(self) -> QIcon: ...
    def getIsInternal(self) -> bool: ...
    def getName(self) -> str: ...
    def getObjectId(self) -> int: ...
    def getText(self) -> str: ...
    def getUncheckedCommand(self) -> str: ...
    def getViewContent(self) -> str: ...
    def getViewWidget(self) -> PySide6.QtWidgets.QWidget: ...
    def hideAway(self, value: bool) -> None: ...
    def isNull(self) -> bool: ...
    def isType(self, arg__1: object) -> bool: ...
    def setCheckable(self, value: bool) -> None: ...
    def setChecked(self, value: bool) -> None: ...
    def setCheckedCommand(self, value: str) -> None: ...
    def setClickedCommand(self, value: str) -> None: ...
    def setGroup(self, value: str) -> None: ...
    def setIcon(self, icon: Union[QIcon, QPixmap]) -> None: ...
    def setIconData(self, data: str, format: str = 'png') -> None: ...
    def setIconPath(self, iconPath: str) -> None: ...
    def setOnOffIconData(self, onData: str, offData: str, format: str = 'png') -> None: ...
    def setText(self, text: str) -> None: ...
    def setUncheckedCommand(self, value: str) -> None: ...
    def setViewContent(self, value: str) -> None: ...
    def setViewWidget(self, widget: PySide6.QtWidgets.QWidget) -> None: ...
    def signal(self) -> vrdImmersiveToolSignal: ...

class vrdImmersiveToolSignal:
    __doc__: NoneType
    __module__: str
    staticMetaObject: QMetaObject
    def __delattr__(self) -> None: ...
    def __dir__(self, /): ...
    def __eq__(self) -> None: ...
    def __format__(self, format_spec, /): ...
    def __ge__(self) -> None: ...
    def __getattribute__(self) -> None: ...
    def __getstate__(self, /): ...
    def __gt__(self) -> None: ...
    def __hash__(self) -> None: ...
    def __init__(self) -> None: ...
    def __init_subclass__(cls) -> None: ...
    def __le__(self) -> None: ...
    def __lt__(self) -> None: ...
    def __ne__(self) -> None: ...
    def __new__(cls) -> None: ...
    def __reduce__(self, /): ...
    def __reduce_ex__(self, protocol, /): ...
    def __repr__(self) -> None: ...
    def __setattr__(self) -> None: ...
    def __sizeof__(self, /): ...
    def __str__(self) -> None: ...
    def __subclasshook__(self) -> None: ...
    def blockSignals(self, b: bool) -> bool: ...
    def checked(self) -> None: ...
    def childEvent(self, event: QChildEvent) -> None: ...
    def children(self) -> List[QObject]: ...
    def clicked(self) -> None: ...
    def connect(self) -> None: ...
    def connectNotify(self, signal: QMetaMethod) -> None: ...
    def customEvent(self, event: QEvent) -> None: ...
    def deleteLater(self) -> None: ...
    def destroyed(self) -> None: ...
    def disconnect(self) -> None: ...
    def disconnectNotify(self, signal: QMetaMethod) -> None: ...
    def dumpObjectInfo(self) -> None: ...
    def dumpObjectTree(self) -> None: ...
    def dynamicPropertyNames(self) -> List[QByteArray]: ...
    def emit(self, arg__1: bytes, *args: None) -> bool: ...
    def event(self, event: QEvent) -> bool: ...
    def eventFilter(self, watched: QObject, event: QEvent) -> bool: ...
    def findChild(self, type: type, name: str = {}, options: Qt.FindChildOptions = Qt.FindChildOption.FindChildrenRecursively) -> object: ...
    def inherits(self, classname: bytes) -> bool: ...
    def installEventFilter(self, filterObj: QObject) -> None: ...
    def isSignalConnected(self, signal: QMetaMethod) -> bool: ...
    def isWidgetType(self) -> bool: ...
    def isWindowType(self) -> bool: ...
    def killTimer(self, id: int) -> None: ...
    def metaObject(self) -> QMetaObject: ...
    def moveToThread(self, thread: QThread) -> None: ...
    def objectName(self) -> str: ...
    def objectNameChanged(self) -> None: ...
    def parent(self) -> QObject: ...
    def property(self, name: str) -> Any: ...
    def receivers(self, signal: bytes) -> int: ...
    def removeEventFilter(self, obj: QObject) -> None: ...
    def sender(self) -> QObject: ...
    def senderSignalIndex(self) -> int: ...
    def setObjectName(self, name: str) -> None: ...
    def setParent(self, parent: QObject) -> None: ...
    def setProperty(self, name: str, value: Any) -> bool: ...
    def signalsBlocked(self) -> bool: ...
    def startTimer(self, interval: int, timerType: Qt.TimerType = Qt.TimerType.CoarseTimer) -> int: ...
    def thread(self) -> QThread: ...
    def timerEvent(self, event: QTimerEvent) -> None: ...
    def tr(self) -> None: ...
    def unchecked(self) -> None: ...
    def viewClosed(self) -> None: ...
    def viewOpened(self) -> None: ...

class vrdIncandescence:
    __doc__: NoneType
    __module__: str
    intensityProperty: str
    colorProperty: str
    colorSpectrumProperty: str
    directRaylightEvaluationProperty: str
    useAsLightSourceProperty: str
    illuminateShadowMaterialProperty: str
    castShadowOnShadowMaterialProperty: str
    shadowIntensityProperty: str
    groundShadowIntensityProperty: str
    importanceMultiplierProperty: str
    interactiveAreaLightQualityProperty: str
    areaLightQualityProperty: str
    bakeLayerProperty: str
    lightUnitProperty: str
    textureProperty: str
    def __copy__(self) -> None: ...
    def __delattr__(self) -> None: ...
    def __dir__(self, /): ...
    def __eq__(self) -> None: ...
    def __format__(self, format_spec, /): ...
    def __ge__(self) -> None: ...
    def __getattribute__(self) -> None: ...
    def __getstate__(self, /): ...
    def __gt__(self) -> None: ...
    def __hash__(self) -> None: ...
    def __init__(self) -> None: ...
    def __init_subclass__(cls) -> None: ...
    def __le__(self) -> None: ...
    def __lshift__(self) -> None: ...
    def __lt__(self) -> None: ...
    def __ne__(self) -> None: ...
    def __new__(cls) -> None: ...
    def __reduce__(self, /): ...
    def __reduce_ex__(self, protocol, /): ...
    def __repr__(self) -> None: ...
    def __rlshift__(self) -> None: ...
    def __rrshift__(self) -> None: ...
    def __rshift__(self) -> None: ...
    def __setattr__(self) -> None: ...
    def __sizeof__(self, /): ...
    def __str__(self) -> None: ...
    def __subclasshook__(self) -> None: ...
    def asType(self, arg__1: object) -> object: ...
    def getAreaLightQuality(self) -> int: ...
    def getBakeLayer(self) -> int: ...
    def getCastShadowOnShadowMaterial(self) -> bool: ...
    def getColor(self) -> QVector3D: ...
    def getColorSpectrum(self) -> vrSpectrum: ...
    def getDirectRaylightEvaluation(self) -> bool: ...
    def getGroundShadowIntensity(self) -> float: ...
    def getIlluminateShadowMaterial(self) -> bool: ...
    def getImportanceMultiplier(self) -> float: ...
    def getIntensity(self) -> float: ...
    def getInteractiveAreaLightQuality(self) -> int: ...
    def getLightUnit(self) -> vrLightTypes.Unit: ...
    def getObjectId(self) -> int: ...
    def getShadowIntensity(self) -> float: ...
    def getTexture(self) -> vrdTexture: ...
    def getUseAsLightSource(self) -> bool: ...
    def isNull(self) -> bool: ...
    def isType(self, arg__1: object) -> bool: ...
    def isValid(self) -> bool: ...
    def setAreaLightQuality(self, quality: int) -> None: ...
    def setBakeLayer(self, layer: int) -> None: ...
    def setCastShadowOnShadowMaterial(self, s: bool) -> None: ...
    def setColor(self, color: QVector3D) -> None: ...
    def setColorSpectrum(self, value: Union[vrSpectrum, QVector3D]) -> None: ...
    def setDirectRaylightEvaluation(self, s: bool) -> None: ...
    def setGroundShadowIntensity(self, intensity: float) -> None: ...
    def setIlluminateShadowMaterial(self, s: bool) -> None: ...
    def setImportanceMultiplier(self, multiplier: float) -> None: ...
    def setIntensity(self, intensity: float) -> None: ...
    def setInteractiveAreaLightQuality(self, quality: int) -> None: ...
    def setLightUnit(self, unit: vrLightTypes.Unit) -> None: ...
    def setShadowIntensity(self, intensity: float) -> None: ...
    def setUseAsLightSource(self, s: bool) -> None: ...

class vrdLayeredMaterial:
    __doc__: NoneType
    __module__: str
    def __copy__(self) -> None: ...
    def __delattr__(self) -> None: ...
    def __dir__(self, /): ...
    def __eq__(self) -> None: ...
    def __format__(self, format_spec, /): ...
    def __ge__(self) -> None: ...
    def __getattribute__(self) -> None: ...
    def __getstate__(self, /): ...
    def __gt__(self) -> None: ...
    def __hash__(self) -> None: ...
    def __init__(self) -> None: ...
    def __init_subclass__(cls) -> None: ...
    def __le__(self) -> None: ...
    def __lshift__(self) -> None: ...
    def __lt__(self) -> None: ...
    def __ne__(self) -> None: ...
    def __new__(cls) -> None: ...
    def __reduce__(self, /): ...
    def __reduce_ex__(self, protocol, /): ...
    def __repr__(self) -> None: ...
    def __rlshift__(self) -> None: ...
    def __rrshift__(self) -> None: ...
    def __rshift__(self) -> None: ...
    def __setattr__(self) -> None: ...
    def __sizeof__(self, /): ...
    def __str__(self) -> None: ...
    def __subclasshook__(self) -> None: ...
    def asType(self, arg__1: object) -> object: ...
    def duplicate(self, name: str = '') -> vrdMaterial: ...
    def getIcon(self) -> QIcon: ...
    def getLocked(self) -> bool: ...
    def getMaterials(self) -> List[vrdMaterial]: ...
    def getMaterialsRef(self) -> vrdMaterialList: ...
    def getName(self) -> str: ...
    def getObjectId(self) -> int: ...
    def getPreview(self) -> QImage: ...
    def getPreviewScene(self) -> str: ...
    def getTextures(self) -> List[vrdTexture]: ...
    def isAsset(self) -> bool: ...
    def isComponent(self) -> bool: ...
    def isEditable(self) -> bool: ...
    def isEditedAsset(self) -> bool: ...
    def isNull(self) -> bool: ...
    def isType(self, arg__1: object) -> bool: ...
    def isValid(self) -> bool: ...
    def setInlineAllImageSequences(self, value: bool) -> List[vrdImage]: ...
    def setLocked(self, locked: bool) -> None: ...
    def setMaterials(self, materials: Sequence[vrdMaterial]) -> None: ...
    def setName(self, name: str) -> None: ...
    def setPreviewScene(self, name: str) -> None: ...

class vrdLensFlareEffect:
    __doc__: NoneType
    __module__: str
    colorProperty: str
    intensityProperty: str
    sizeProperty: str
    radiusProperty: str
    angularIntensityProperty: str
    useLightPropertiesProperty: str
    isActiveProperty: str
    presetTypeProperty: str
    lensFlareElementsProperty: str
    def __copy__(self) -> None: ...
    def __delattr__(self) -> None: ...
    def __dir__(self, /): ...
    def __eq__(self) -> None: ...
    def __format__(self, format_spec, /): ...
    def __ge__(self) -> None: ...
    def __getattribute__(self) -> None: ...
    def __getstate__(self, /): ...
    def __gt__(self) -> None: ...
    def __hash__(self) -> None: ...
    def __init__(self) -> None: ...
    def __init_subclass__(cls) -> None: ...
    def __le__(self) -> None: ...
    def __lshift__(self) -> None: ...
    def __lt__(self) -> None: ...
    def __ne__(self) -> None: ...
    def __new__(cls) -> None: ...
    def __reduce__(self, /): ...
    def __reduce_ex__(self, protocol, /): ...
    def __repr__(self) -> None: ...
    def __rlshift__(self) -> None: ...
    def __rrshift__(self) -> None: ...
    def __rshift__(self) -> None: ...
    def __setattr__(self) -> None: ...
    def __sizeof__(self, /): ...
    def __str__(self) -> None: ...
    def __subclasshook__(self) -> None: ...
    def asType(self, arg__1: object) -> object: ...
    def createLensFlareElement(self, name: str, type: vrLensFlareTypes.ElementType) -> vrdLensFlareElement: ...
    def getAngularIntensity(self) -> float: ...
    def getColor(self) -> QVector3D: ...
    def getIntensity(self) -> float: ...
    def getIsActive(self) -> bool: ...
    def getLensFlareElements(self) -> List[vrdLensFlareElement]: ...
    def getObjectId(self) -> int: ...
    def getPresetType(self) -> vrLensFlareTypes.PresetType: ...
    def getRadius(self) -> float: ...
    def getSize(self) -> float: ...
    def getUseLightProperties(self) -> bool: ...
    def isNull(self) -> bool: ...
    def isType(self, arg__1: object) -> bool: ...
    def isValid(self) -> bool: ...
    def removeElements(self, elements: Sequence[vrdLensFlareElement]) -> None: ...
    def setAngularIntensity(self, angularIntensity: float) -> None: ...
    def setColor(self, color: QVector3D) -> None: ...
    def setIntensity(self, intensity: float) -> None: ...
    def setIsActive(self, active: bool) -> None: ...
    def setPresetType(self, type: vrLensFlareTypes.PresetType) -> None: ...
    def setRadius(self, radius: float) -> None: ...
    def setSize(self, size: float) -> None: ...
    def setUseLightProperties(self, use: bool) -> None: ...

class vrdLensFlareElement:
    __doc__: NoneType
    __module__: str
    isActiveProperty: str
    nameProperty: str
    def __copy__(self) -> None: ...
    def __delattr__(self) -> None: ...
    def __dir__(self, /): ...
    def __eq__(self) -> None: ...
    def __format__(self, format_spec, /): ...
    def __ge__(self) -> None: ...
    def __getattribute__(self) -> None: ...
    def __getstate__(self, /): ...
    def __gt__(self) -> None: ...
    def __hash__(self) -> None: ...
    def __init__(self) -> None: ...
    def __init_subclass__(cls) -> None: ...
    def __le__(self) -> None: ...
    def __lshift__(self) -> None: ...
    def __lt__(self) -> None: ...
    def __ne__(self) -> None: ...
    def __new__(cls) -> None: ...
    def __reduce__(self, /): ...
    def __reduce_ex__(self, protocol, /): ...
    def __repr__(self) -> None: ...
    def __rlshift__(self) -> None: ...
    def __rrshift__(self) -> None: ...
    def __rshift__(self) -> None: ...
    def __setattr__(self) -> None: ...
    def __sizeof__(self, /): ...
    def __str__(self) -> None: ...
    def __subclasshook__(self) -> None: ...
    def asType(self, arg__1: object) -> object: ...
    def getIsActive(self) -> bool: ...
    def getName(self) -> str: ...
    def getObjectId(self) -> int: ...
    def isNull(self) -> bool: ...
    def isType(self, arg__1: object) -> bool: ...
    def isValid(self) -> bool: ...
    def setIsActive(self, active: bool) -> None: ...
    def setName(self, name: str) -> None: ...

class vrdLensFlareFxElement:
    __doc__: NoneType
    __module__: str
    colorProperty: str
    intensityProperty: str
    sizeProperty: str
    featherProperty: str
    rotationProperty: str
    def __copy__(self) -> None: ...
    def __delattr__(self) -> None: ...
    def __dir__(self, /): ...
    def __eq__(self) -> None: ...
    def __format__(self, format_spec, /): ...
    def __ge__(self) -> None: ...
    def __getattribute__(self) -> None: ...
    def __getstate__(self, /): ...
    def __gt__(self) -> None: ...
    def __hash__(self) -> None: ...
    def __init__(self) -> None: ...
    def __init_subclass__(cls) -> None: ...
    def __le__(self) -> None: ...
    def __lshift__(self) -> None: ...
    def __lt__(self) -> None: ...
    def __ne__(self) -> None: ...
    def __new__(cls) -> None: ...
    def __reduce__(self, /): ...
    def __reduce_ex__(self, protocol, /): ...
    def __repr__(self) -> None: ...
    def __rlshift__(self) -> None: ...
    def __rrshift__(self) -> None: ...
    def __rshift__(self) -> None: ...
    def __setattr__(self) -> None: ...
    def __sizeof__(self, /): ...
    def __str__(self) -> None: ...
    def __subclasshook__(self) -> None: ...
    def asType(self, arg__1: object) -> object: ...
    def getColor(self) -> QVector3D: ...
    def getFeather(self) -> float: ...
    def getIntensity(self) -> float: ...
    def getIsActive(self) -> bool: ...
    def getName(self) -> str: ...
    def getObjectId(self) -> int: ...
    def getRotation(self) -> float: ...
    def getSize(self) -> float: ...
    def isNull(self) -> bool: ...
    def isType(self, arg__1: object) -> bool: ...
    def isValid(self) -> bool: ...
    def setColor(self, tint: QVector3D) -> None: ...
    def setFeather(self, blurring: float) -> None: ...
    def setIntensity(self, intensity: float) -> None: ...
    def setIsActive(self, active: bool) -> None: ...
    def setName(self, name: str) -> None: ...
    def setRotation(self, rotation: float) -> None: ...
    def setSize(self, size: float) -> None: ...

class vrdLensFlareGhost:
    __doc__: NoneType
    __module__: str
    shapeProperty: str
    imageProperty: str
    distanceProperty: str
    edgeThicknessProperty: str
    edgeIntensityProperty: str
    isChromaticAberrationActiveProperty: str
    chromaticAberrationProperty: str
    def __copy__(self) -> None: ...
    def __delattr__(self) -> None: ...
    def __dir__(self, /): ...
    def __eq__(self) -> None: ...
    def __format__(self, format_spec, /): ...
    def __ge__(self) -> None: ...
    def __getattribute__(self) -> None: ...
    def __getstate__(self, /): ...
    def __gt__(self) -> None: ...
    def __hash__(self) -> None: ...
    def __init__(self) -> None: ...
    def __init_subclass__(cls) -> None: ...
    def __le__(self) -> None: ...
    def __lshift__(self) -> None: ...
    def __lt__(self) -> None: ...
    def __ne__(self) -> None: ...
    def __new__(cls) -> None: ...
    def __reduce__(self, /): ...
    def __reduce_ex__(self, protocol, /): ...
    def __repr__(self) -> None: ...
    def __rlshift__(self) -> None: ...
    def __rrshift__(self) -> None: ...
    def __rshift__(self) -> None: ...
    def __setattr__(self) -> None: ...
    def __sizeof__(self, /): ...
    def __str__(self) -> None: ...
    def __subclasshook__(self) -> None: ...
    def asType(self, arg__1: object) -> object: ...
    def getChromaticAberration(self) -> QVector3D: ...
    def getColor(self) -> QVector3D: ...
    def getDistance(self) -> float: ...
    def getEdgeIntensity(self) -> float: ...
    def getEdgeThickness(self) -> float: ...
    def getFeather(self) -> float: ...
    def getImage(self) -> vrdImage: ...
    def getIntensity(self) -> float: ...
    def getIsActive(self) -> bool: ...
    def getIsChromaticAberrationActive(self) -> bool: ...
    def getName(self) -> str: ...
    def getObjectId(self) -> int: ...
    def getRotation(self) -> float: ...
    def getShape(self) -> vrLensFlareTypes.ElementShape: ...
    def getSize(self) -> float: ...
    def isNull(self) -> bool: ...
    def isType(self, arg__1: object) -> bool: ...
    def isValid(self) -> bool: ...
    def setChromaticAberration(self, chromaticAberration: QVector3D) -> None: ...
    def setColor(self, tint: QVector3D) -> None: ...
    def setDistance(self, distance: float) -> None: ...
    def setEdgeIntensity(self, edgeIntensity: float) -> None: ...
    def setEdgeThickness(self, thickness: float) -> None: ...
    def setFeather(self, blurring: float) -> None: ...
    def setImage(self, image: vrdImage) -> None: ...
    def setIntensity(self, intensity: float) -> None: ...
    def setIsActive(self, active: bool) -> None: ...
    def setIsChromaticAberrationActive(self, isActive: bool) -> None: ...
    def setName(self, name: str) -> None: ...
    def setRotation(self, rotation: float) -> None: ...
    def setShape(self, shape: vrLensFlareTypes.ElementShape) -> None: ...
    def setSize(self, size: float) -> None: ...

class vrdLensFlareGhostLine:
    __doc__: NoneType
    __module__: str
    ghostsProperty: str
    def __copy__(self) -> None: ...
    def __delattr__(self) -> None: ...
    def __dir__(self, /): ...
    def __eq__(self) -> None: ...
    def __format__(self, format_spec, /): ...
    def __ge__(self) -> None: ...
    def __getattribute__(self) -> None: ...
    def __getstate__(self, /): ...
    def __gt__(self) -> None: ...
    def __hash__(self) -> None: ...
    def __init__(self) -> None: ...
    def __init_subclass__(cls) -> None: ...
    def __le__(self) -> None: ...
    def __lshift__(self) -> None: ...
    def __lt__(self) -> None: ...
    def __ne__(self) -> None: ...
    def __new__(cls) -> None: ...
    def __reduce__(self, /): ...
    def __reduce_ex__(self, protocol, /): ...
    def __repr__(self) -> None: ...
    def __rlshift__(self) -> None: ...
    def __rrshift__(self) -> None: ...
    def __rshift__(self) -> None: ...
    def __setattr__(self) -> None: ...
    def __sizeof__(self, /): ...
    def __str__(self) -> None: ...
    def __subclasshook__(self) -> None: ...
    def asType(self, arg__1: object) -> object: ...
    def createGhost(self, distance: float = 0.0) -> vrdLensFlareGhost: ...
    def getGhosts(self) -> List[vrdLensFlareGhost]: ...
    def getIsActive(self) -> bool: ...
    def getName(self) -> str: ...
    def getObjectId(self) -> int: ...
    def isNull(self) -> bool: ...
    def isType(self, arg__1: object) -> bool: ...
    def isValid(self) -> bool: ...
    def removeGhosts(self, ghosts: Sequence[vrdLensFlareGhost]) -> None: ...
    def setIsActive(self, active: bool) -> None: ...
    def setName(self, name: str) -> None: ...

class vrdLensFlareGlow:
    __doc__: NoneType
    __module__: str
    shapeProperty: str
    imageProperty: str
    def __copy__(self) -> None: ...
    def __delattr__(self) -> None: ...
    def __dir__(self, /): ...
    def __eq__(self) -> None: ...
    def __format__(self, format_spec, /): ...
    def __ge__(self) -> None: ...
    def __getattribute__(self) -> None: ...
    def __getstate__(self, /): ...
    def __gt__(self) -> None: ...
    def __hash__(self) -> None: ...
    def __init__(self) -> None: ...
    def __init_subclass__(cls) -> None: ...
    def __le__(self) -> None: ...
    def __lshift__(self) -> None: ...
    def __lt__(self) -> None: ...
    def __ne__(self) -> None: ...
    def __new__(cls) -> None: ...
    def __reduce__(self, /): ...
    def __reduce_ex__(self, protocol, /): ...
    def __repr__(self) -> None: ...
    def __rlshift__(self) -> None: ...
    def __rrshift__(self) -> None: ...
    def __rshift__(self) -> None: ...
    def __setattr__(self) -> None: ...
    def __sizeof__(self, /): ...
    def __str__(self) -> None: ...
    def __subclasshook__(self) -> None: ...
    def asType(self, arg__1: object) -> object: ...
    def getColor(self) -> QVector3D: ...
    def getFeather(self) -> float: ...
    def getImage(self) -> vrdImage: ...
    def getIntensity(self) -> float: ...
    def getIsActive(self) -> bool: ...
    def getName(self) -> str: ...
    def getObjectId(self) -> int: ...
    def getRotation(self) -> float: ...
    def getShape(self) -> vrLensFlareTypes.ElementShape: ...
    def getSize(self) -> float: ...
    def isNull(self) -> bool: ...
    def isType(self, arg__1: object) -> bool: ...
    def isValid(self) -> bool: ...
    def setColor(self, tint: QVector3D) -> None: ...
    def setFeather(self, blurring: float) -> None: ...
    def setImage(self, image: vrdImage) -> None: ...
    def setIntensity(self, intensity: float) -> None: ...
    def setIsActive(self, active: bool) -> None: ...
    def setName(self, name: str) -> None: ...
    def setRotation(self, rotation: float) -> None: ...
    def setShape(self, shape: vrLensFlareTypes.ElementShape) -> None: ...
    def setSize(self, size: float) -> None: ...

class vrdLensFlareRing:
    __doc__: NoneType
    __module__: str
    thicknessProperty: str
    isChromaticAberrationActiveProperty: str
    chromaticAberrationProperty: str
    numberOfStreaksProperty: str
    streakThicknessProperty: str
    def __copy__(self) -> None: ...
    def __delattr__(self) -> None: ...
    def __dir__(self, /): ...
    def __eq__(self) -> None: ...
    def __format__(self, format_spec, /): ...
    def __ge__(self) -> None: ...
    def __getattribute__(self) -> None: ...
    def __getstate__(self, /): ...
    def __gt__(self) -> None: ...
    def __hash__(self) -> None: ...
    def __init__(self) -> None: ...
    def __init_subclass__(cls) -> None: ...
    def __le__(self) -> None: ...
    def __lshift__(self) -> None: ...
    def __lt__(self) -> None: ...
    def __ne__(self) -> None: ...
    def __new__(cls) -> None: ...
    def __reduce__(self, /): ...
    def __reduce_ex__(self, protocol, /): ...
    def __repr__(self) -> None: ...
    def __rlshift__(self) -> None: ...
    def __rrshift__(self) -> None: ...
    def __rshift__(self) -> None: ...
    def __setattr__(self) -> None: ...
    def __sizeof__(self, /): ...
    def __str__(self) -> None: ...
    def __subclasshook__(self) -> None: ...
    def asType(self, arg__1: object) -> object: ...
    def getChromaticAberration(self) -> QVector3D: ...
    def getColor(self) -> QVector3D: ...
    def getFeather(self) -> float: ...
    def getIntensity(self) -> float: ...
    def getIsActive(self) -> bool: ...
    def getIsChromaticAberrationActive(self) -> bool: ...
    def getName(self) -> str: ...
    def getNumberOfStreaks(self) -> int: ...
    def getObjectId(self) -> int: ...
    def getRotation(self) -> float: ...
    def getSize(self) -> float: ...
    def getStreakThickness(self) -> float: ...
    def getThickness(self) -> float: ...
    def isNull(self) -> bool: ...
    def isType(self, arg__1: object) -> bool: ...
    def isValid(self) -> bool: ...
    def setChromaticAberration(self, chromaticAberration: QVector3D) -> None: ...
    def setColor(self, tint: QVector3D) -> None: ...
    def setFeather(self, blurring: float) -> None: ...
    def setIntensity(self, intensity: float) -> None: ...
    def setIsActive(self, active: bool) -> None: ...
    def setIsChromaticAberrationActive(self, isActive: bool) -> None: ...
    def setName(self, name: str) -> None: ...
    def setNumberOfStreaks(self, numberOfStreaks: int) -> None: ...
    def setRotation(self, rotation: float) -> None: ...
    def setSize(self, size: float) -> None: ...
    def setStreakThickness(self, streakThickness: float) -> None: ...
    def setThickness(self, thickness: float) -> None: ...

class vrdLensFlareStar:
    __doc__: NoneType
    __module__: str
    shapeProperty: str
    thicknessProperty: str
    numberOfBurstsProperty: str
    imageProperty: str
    def __copy__(self) -> None: ...
    def __delattr__(self) -> None: ...
    def __dir__(self, /): ...
    def __eq__(self) -> None: ...
    def __format__(self, format_spec, /): ...
    def __ge__(self) -> None: ...
    def __getattribute__(self) -> None: ...
    def __getstate__(self, /): ...
    def __gt__(self) -> None: ...
    def __hash__(self) -> None: ...
    def __init__(self) -> None: ...
    def __init_subclass__(cls) -> None: ...
    def __le__(self) -> None: ...
    def __lshift__(self) -> None: ...
    def __lt__(self) -> None: ...
    def __ne__(self) -> None: ...
    def __new__(cls) -> None: ...
    def __reduce__(self, /): ...
    def __reduce_ex__(self, protocol, /): ...
    def __repr__(self) -> None: ...
    def __rlshift__(self) -> None: ...
    def __rrshift__(self) -> None: ...
    def __rshift__(self) -> None: ...
    def __setattr__(self) -> None: ...
    def __sizeof__(self, /): ...
    def __str__(self) -> None: ...
    def __subclasshook__(self) -> None: ...
    def asType(self, arg__1: object) -> object: ...
    def getColor(self) -> QVector3D: ...
    def getFeather(self) -> float: ...
    def getImage(self) -> vrdImage: ...
    def getIntensity(self) -> float: ...
    def getIsActive(self) -> bool: ...
    def getName(self) -> str: ...
    def getNumberOfBursts(self) -> int: ...
    def getObjectId(self) -> int: ...
    def getRotation(self) -> float: ...
    def getShape(self) -> vrLensFlareTypes.StarShape: ...
    def getSize(self) -> float: ...
    def getThickness(self) -> float: ...
    def isNull(self) -> bool: ...
    def isType(self, arg__1: object) -> bool: ...
    def isValid(self) -> bool: ...
    def setColor(self, tint: QVector3D) -> None: ...
    def setFeather(self, blurring: float) -> None: ...
    def setImage(self, image: vrdImage) -> None: ...
    def setIntensity(self, intensity: float) -> None: ...
    def setIsActive(self, active: bool) -> None: ...
    def setName(self, name: str) -> None: ...
    def setNumberOfBursts(self, numberOfBursts: int) -> None: ...
    def setRotation(self, rotation: float) -> None: ...
    def setShape(self, shape: vrLensFlareTypes.StarShape) -> None: ...
    def setSize(self, size: float) -> None: ...
    def setThickness(self, thickness: float) -> None: ...

class vrdLensFlareStreak:
    __doc__: NoneType
    __module__: str
    thicknessProperty: str
    offsetProperty: str
    def __copy__(self) -> None: ...
    def __delattr__(self) -> None: ...
    def __dir__(self, /): ...
    def __eq__(self) -> None: ...
    def __format__(self, format_spec, /): ...
    def __ge__(self) -> None: ...
    def __getattribute__(self) -> None: ...
    def __getstate__(self, /): ...
    def __gt__(self) -> None: ...
    def __hash__(self) -> None: ...
    def __init__(self) -> None: ...
    def __init_subclass__(cls) -> None: ...
    def __le__(self) -> None: ...
    def __lshift__(self) -> None: ...
    def __lt__(self) -> None: ...
    def __ne__(self) -> None: ...
    def __new__(cls) -> None: ...
    def __reduce__(self, /): ...
    def __reduce_ex__(self, protocol, /): ...
    def __repr__(self) -> None: ...
    def __rlshift__(self) -> None: ...
    def __rrshift__(self) -> None: ...
    def __rshift__(self) -> None: ...
    def __setattr__(self) -> None: ...
    def __sizeof__(self, /): ...
    def __str__(self) -> None: ...
    def __subclasshook__(self) -> None: ...
    def asType(self, arg__1: object) -> object: ...
    def getColor(self) -> QVector3D: ...
    def getFeather(self) -> float: ...
    def getIntensity(self) -> float: ...
    def getIsActive(self) -> bool: ...
    def getName(self) -> str: ...
    def getObjectId(self) -> int: ...
    def getOffset(self) -> QVector2D: ...
    def getRotation(self) -> float: ...
    def getSize(self) -> float: ...
    def getThickness(self) -> float: ...
    def isNull(self) -> bool: ...
    def isType(self, arg__1: object) -> bool: ...
    def isValid(self) -> bool: ...
    def setColor(self, tint: QVector3D) -> None: ...
    def setFeather(self, blurring: float) -> None: ...
    def setIntensity(self, intensity: float) -> None: ...
    def setIsActive(self, active: bool) -> None: ...
    def setName(self, name: str) -> None: ...
    def setOffset(self, offset: QVector2D) -> None: ...
    def setRotation(self, rotation: float) -> None: ...
    def setSize(self, size: float) -> None: ...
    def setThickness(self, thickness: float) -> None: ...

class vrdLightLinkSetNode:
    __doc__: NoneType
    __module__: str
    sceneNodesProperty: str
    lightNodesProperty: str
    def __copy__(self) -> None: ...
    def __delattr__(self) -> None: ...
    def __dir__(self, /): ...
    def __eq__(self) -> None: ...
    def __format__(self, format_spec, /): ...
    def __ge__(self) -> None: ...
    def __getattribute__(self) -> None: ...
    def __getstate__(self, /): ...
    def __gt__(self) -> None: ...
    def __hash__(self) -> None: ...
    def __init__(self) -> None: ...
    def __init_subclass__(cls) -> None: ...
    def __le__(self) -> None: ...
    def __lshift__(self) -> None: ...
    def __lt__(self) -> None: ...
    def __ne__(self) -> None: ...
    def __new__(cls) -> None: ...
    def __reduce__(self, /): ...
    def __reduce_ex__(self, protocol, /): ...
    def __repr__(self) -> None: ...
    def __rlshift__(self) -> None: ...
    def __rrshift__(self) -> None: ...
    def __rshift__(self) -> None: ...
    def __setattr__(self) -> None: ...
    def __sizeof__(self, /): ...
    def __str__(self) -> None: ...
    def __subclasshook__(self) -> None: ...
    def addNode(self, node: vrdNode) -> None: ...
    def addNodes(self, nodes: Sequence[vrdNode]) -> None: ...
    def applyMaterial(self, material: vrdMaterial) -> None: ...
    def asType(self, arg__1: object) -> object: ...
    def clearLightNodes(self) -> None: ...
    def clearSceneNodes(self) -> None: ...
    def getBoundingBox(self) -> vrdBoundingBox: ...
    def getChild(self, index: int) -> vrdNode: ...
    def getChildCount(self) -> int: ...
    def getChildIndex(self, child: vrdNode) -> int: ...
    def getChildren(self) -> List[vrdNode]: ...
    def getChildrenRecursive(self) -> List[vrdNode]: ...
    def getChildrenRef(self) -> vrdNodeList: ...
    def getLightNodes(self) -> List[vrdNode]: ...
    def getLocked(self) -> bool: ...
    def getMaterial(self) -> vrdMaterial: ...
    def getName(self) -> str: ...
    def getObjectId(self) -> int: ...
    def getOrCreateTransformNode(self) -> vrdNode: ...
    def getParent(self) -> vrdNode: ...
    def getPath(self) -> str: ...
    def getSceneNodes(self) -> List[vrdNode]: ...
    def getSelectableFlag(self) -> bool: ...
    def getSharedNodes(self) -> List[vrdNode]: ...
    def getSynchronizedNodes(self) -> List[vrdNode]: ...
    def getUniquePath(self) -> str: ...
    def getVisibilityFlag(self) -> bool: ...
    def getWorldBoundingBox(self) -> vrdBoundingBox: ...
    def getWorldTransform(self) -> QMatrix4x4: ...
    def hasParent(self, parent: vrdNode) -> bool: ...
    def isEditable(self) -> bool: ...
    def isEditedAsset(self) -> bool: ...
    def isGroup(self) -> bool: ...
    def isImplicitShared(self) -> bool: ...
    def isNull(self) -> bool: ...
    def isShared(self) -> bool: ...
    def isSharedWith(self, node: vrdNode) -> bool: ...
    def isSynchronized(self) -> bool: ...
    def isType(self, arg__1: object) -> bool: ...
    def isValid(self) -> bool: ...
    def isVisible(self) -> bool: ...
    def removeNode(self, node: vrdNode) -> None: ...
    def removeNodes(self, nodes: Sequence[vrdNode]) -> None: ...
    def setLocked(self, locked: bool) -> None: ...
    def setName(self, name: str) -> None: ...
    def setSelectableFlag(self, selectable: bool) -> None: ...
    def setVisibilityFlag(self, visible: bool) -> None: ...

class vrdLightPortalMaterial:
    __doc__: NoneType
    __module__: str
    visibilityProperty: str
    def __copy__(self) -> None: ...
    def __delattr__(self) -> None: ...
    def __dir__(self, /): ...
    def __eq__(self) -> None: ...
    def __format__(self, format_spec, /): ...
    def __ge__(self) -> None: ...
    def __getattribute__(self) -> None: ...
    def __getstate__(self, /): ...
    def __gt__(self) -> None: ...
    def __hash__(self) -> None: ...
    def __init__(self) -> None: ...
    def __init_subclass__(cls) -> None: ...
    def __le__(self) -> None: ...
    def __lshift__(self) -> None: ...
    def __lt__(self) -> None: ...
    def __ne__(self) -> None: ...
    def __new__(cls) -> None: ...
    def __reduce__(self, /): ...
    def __reduce_ex__(self, protocol, /): ...
    def __repr__(self) -> None: ...
    def __rlshift__(self) -> None: ...
    def __rrshift__(self) -> None: ...
    def __rshift__(self) -> None: ...
    def __setattr__(self) -> None: ...
    def __sizeof__(self, /): ...
    def __str__(self) -> None: ...
    def __subclasshook__(self) -> None: ...
    def asType(self, arg__1: object) -> object: ...
    def duplicate(self, name: str = '') -> vrdMaterial: ...
    def getIcon(self) -> QIcon: ...
    def getLocked(self) -> bool: ...
    def getName(self) -> str: ...
    def getObjectId(self) -> int: ...
    def getPreview(self) -> QImage: ...
    def getPreviewScene(self) -> str: ...
    def getTextures(self) -> List[vrdTexture]: ...
    def getVisibility(self) -> float: ...
    def isAsset(self) -> bool: ...
    def isComponent(self) -> bool: ...
    def isEditable(self) -> bool: ...
    def isEditedAsset(self) -> bool: ...
    def isNull(self) -> bool: ...
    def isType(self, arg__1: object) -> bool: ...
    def isValid(self) -> bool: ...
    def setInlineAllImageSequences(self, value: bool) -> List[vrdImage]: ...
    def setLocked(self, locked: bool) -> None: ...
    def setName(self, name: str) -> None: ...
    def setPreviewScene(self, name: str) -> None: ...
    def setVisibility(self, v: float) -> None: ...

class vrdLightProfile:
    __doc__: NoneType
    __module__: str
    useLightProfileProperty: str
    absolutePathProperty: str
    numLuminairesProperty: str
    lumensPerLampProperty: str
    candelaMultiplierProperty: str
    numVerticalAnglesProperty: str
    numHorizontalAnglesProperty: str
    photometricTypeProperty: str
    unitsTypeProperty: str
    sizeProperty: str
    ballastFactorProperty: str
    ballastLampPhotometricFactorProperty: str
    inputWattsProperty: str
    def __copy__(self) -> None: ...
    def __delattr__(self) -> None: ...
    def __dir__(self, /): ...
    def __eq__(self) -> None: ...
    def __format__(self, format_spec, /): ...
    def __ge__(self) -> None: ...
    def __getattribute__(self) -> None: ...
    def __getstate__(self, /): ...
    def __gt__(self) -> None: ...
    def __hash__(self) -> None: ...
    def __init__(self) -> None: ...
    def __init_subclass__(cls) -> None: ...
    def __le__(self) -> None: ...
    def __lshift__(self) -> None: ...
    def __lt__(self) -> None: ...
    def __ne__(self) -> None: ...
    def __new__(cls) -> None: ...
    def __reduce__(self, /): ...
    def __reduce_ex__(self, protocol, /): ...
    def __repr__(self) -> None: ...
    def __rlshift__(self) -> None: ...
    def __rrshift__(self) -> None: ...
    def __rshift__(self) -> None: ...
    def __setattr__(self) -> None: ...
    def __sizeof__(self, /): ...
    def __str__(self) -> None: ...
    def __subclasshook__(self) -> None: ...
    def asType(self, arg__1: object) -> object: ...
    def getAbsolutePath(self) -> str: ...
    def getBallastFactor(self) -> float: ...
    def getBallastLampPhotometricFactor(self) -> float: ...
    def getCandelaMultiplier(self) -> float: ...
    def getInputWatts(self) -> float: ...
    def getLumensPerLamp(self) -> float: ...
    def getNumHorizontalAngles(self) -> int: ...
    def getNumLuminaires(self) -> int: ...
    def getNumVerticalAngles(self) -> int: ...
    def getObjectId(self) -> int: ...
    def getPhotometricType(self) -> int: ...
    def getSize(self) -> QVector3D: ...
    def getUnitsType(self) -> int: ...
    def getUseLightProfile(self) -> bool: ...
    def isNull(self) -> bool: ...
    def isType(self, arg__1: object) -> bool: ...
    def isValid(self) -> bool: ...
    def load(self, filename: str) -> None: ...
    def setLightProfileShape(self) -> None: ...
    def setUseLightProfile(self, use: bool) -> None: ...

class vrdLightTexture:
    __doc__: NoneType
    __module__: str
    useTextureProperty: str
    imageProperty: str
    useImageSequenceProperty: str
    frameOffsetProperty: str
    inlineImageSequenceProperty: str
    repeatModeUProperty: str
    repeatModeVProperty: str
    connectRepeatModesProperty: str
    repeatProperty: str
    offsetProperty: str
    rotateProperty: str
    anisotropyProperty: str
    def __copy__(self) -> None: ...
    def __delattr__(self) -> None: ...
    def __dir__(self, /): ...
    def __eq__(self) -> None: ...
    def __format__(self, format_spec, /): ...
    def __ge__(self) -> None: ...
    def __getattribute__(self) -> None: ...
    def __getstate__(self, /): ...
    def __gt__(self) -> None: ...
    def __hash__(self) -> None: ...
    def __init__(self) -> None: ...
    def __init_subclass__(cls) -> None: ...
    def __le__(self) -> None: ...
    def __lshift__(self) -> None: ...
    def __lt__(self) -> None: ...
    def __ne__(self) -> None: ...
    def __new__(cls) -> None: ...
    def __reduce__(self, /): ...
    def __reduce_ex__(self, protocol, /): ...
    def __repr__(self) -> None: ...
    def __rlshift__(self) -> None: ...
    def __rrshift__(self) -> None: ...
    def __rshift__(self) -> None: ...
    def __setattr__(self) -> None: ...
    def __sizeof__(self, /): ...
    def __str__(self) -> None: ...
    def __subclasshook__(self) -> None: ...
    def asType(self, arg__1: object) -> object: ...
    def getAnisotropy(self) -> float: ...
    def getConnectRepeatModes(self) -> bool: ...
    def getFrameOffset(self) -> int: ...
    def getImage(self) -> vrdImage: ...
    def getInlineImageSequence(self) -> bool: ...
    def getObjectId(self) -> int: ...
    def getOffset(self) -> QVector2D: ...
    def getRepeat(self) -> QVector2D: ...
    def getRepeatModeU(self) -> vrTextureTypes.RepeatMode: ...
    def getRepeatModeV(self) -> vrTextureTypes.RepeatMode: ...
    def getRotate(self) -> float: ...
    def getUseImageSequence(self) -> bool: ...
    def getUseTexture(self) -> bool: ...
    def isNull(self) -> bool: ...
    def isType(self, arg__1: object) -> bool: ...
    def isValid(self) -> bool: ...
    def setAnisotropy(self, anisotropy: float) -> None: ...
    def setConnectRepeatModes(self, connected: bool) -> None: ...
    def setFrameOffset(self, offset: int) -> None: ...
    def setImage(self, img: vrdImage) -> None: ...
    def setInlineImageSequence(self, use: bool) -> None: ...
    def setOffset(self, offset: QVector2D) -> None: ...
    def setRepeat(self, repeat: QVector2D) -> None: ...
    def setRepeatModeU(self, mode: vrTextureTypes.RepeatMode) -> None: ...
    def setRepeatModeV(self, mode: vrTextureTypes.RepeatMode) -> None: ...
    def setRotate(self, rotate: float) -> None: ...
    def setUseImageSequence(self, use: bool) -> None: ...
    def setUseTexture(self, s: bool) -> None: ...

class vrdLightTransform:
    __doc__: NoneType
    __module__: str
    def __copy__(self) -> None: ...
    def __delattr__(self) -> None: ...
    def __dir__(self, /): ...
    def __eq__(self) -> None: ...
    def __format__(self, format_spec, /): ...
    def __ge__(self) -> None: ...
    def __getattribute__(self) -> None: ...
    def __getstate__(self, /): ...
    def __gt__(self) -> None: ...
    def __hash__(self) -> None: ...
    def __init__(self) -> None: ...
    def __init_subclass__(cls) -> None: ...
    def __le__(self) -> None: ...
    def __lshift__(self) -> None: ...
    def __lt__(self) -> None: ...
    def __ne__(self) -> None: ...
    def __new__(cls) -> None: ...
    def __reduce__(self, /): ...
    def __reduce_ex__(self, protocol, /): ...
    def __repr__(self) -> None: ...
    def __rlshift__(self) -> None: ...
    def __rrshift__(self) -> None: ...
    def __rshift__(self) -> None: ...
    def __setattr__(self) -> None: ...
    def __sizeof__(self, /): ...
    def __str__(self) -> None: ...
    def __subclasshook__(self) -> None: ...
    def applyToCamera(self, cameraNode: vrdCameraNode) -> None: ...
    def asType(self, arg__1: object) -> object: ...
    def getObjectId(self) -> int: ...
    def isNull(self) -> bool: ...
    def isType(self, arg__1: object) -> bool: ...
    def isValid(self) -> bool: ...
    def setFromCamera(self, cameraNode: vrdCameraNode) -> None: ...
    def setFromNodes(self, nodes: Sequence[vrdNode]) -> None: ...

class vrdLightmap:
    __doc__: NoneType
    __module__: str
    nameProperty: str
    textureProperty: str
    useExternalReferenceProperty: str
    sizeProperty: str
    shadowPreviewProperty: str
    illuminationPreviewProperty: str
    textureBakeSettingsProperty: str
    illuminationBakeSettingsProperty: str
    def __copy__(self) -> None: ...
    def __delattr__(self) -> None: ...
    def __dir__(self, /): ...
    def __eq__(self) -> None: ...
    def __format__(self, format_spec, /): ...
    def __ge__(self) -> None: ...
    def __getattribute__(self) -> None: ...
    def __getstate__(self, /): ...
    def __gt__(self) -> None: ...
    def __hash__(self) -> None: ...
    def __init__(self) -> None: ...
    def __init_subclass__(cls) -> None: ...
    def __le__(self) -> None: ...
    def __lshift__(self) -> None: ...
    def __lt__(self) -> None: ...
    def __ne__(self) -> None: ...
    def __new__(cls) -> None: ...
    def __reduce__(self, /): ...
    def __reduce_ex__(self, protocol, /): ...
    def __repr__(self) -> None: ...
    def __rlshift__(self) -> None: ...
    def __rrshift__(self) -> None: ...
    def __rshift__(self) -> None: ...
    def __setattr__(self) -> None: ...
    def __sizeof__(self, /): ...
    def __str__(self) -> None: ...
    def __subclasshook__(self) -> None: ...
    def asType(self, arg__1: object) -> object: ...
    def deleteTexture(self) -> None: ...
    def getIlluminationBakeSettings(self) -> vrdIlluminationBakeSettings: ...
    def getIlluminationPreview(self) -> QImage: ...
    def getName(self) -> str: ...
    def getObjectId(self) -> int: ...
    def getShadowPreview(self) -> QImage: ...
    def getSize(self) -> QSize: ...
    def getTexture(self) -> vrdImage: ...
    def getTextureBakeSettings(self) -> vrdTextureBakeSettings: ...
    def getUseExternalReference(self) -> bool: ...
    def isNull(self) -> bool: ...
    def isType(self, arg__1: object) -> bool: ...
    def isValid(self) -> bool: ...
    def setName(self, name: str) -> None: ...
    def setTexture(self, image: vrdImage) -> None: ...
    def setUseExternalReference(self, value: bool) -> None: ...

class vrdLineChromeMaterial:
    __doc__: NoneType
    __module__: str
    reflectionColorProperty: str
    useRoughnessProperty: str
    roughnessProperty: str
    lineWidthProperty: str
    displacementTextureProperty: str
    def __copy__(self) -> None: ...
    def __delattr__(self) -> None: ...
    def __dir__(self, /): ...
    def __eq__(self) -> None: ...
    def __format__(self, format_spec, /): ...
    def __ge__(self) -> None: ...
    def __getattribute__(self) -> None: ...
    def __getstate__(self, /): ...
    def __gt__(self) -> None: ...
    def __hash__(self) -> None: ...
    def __init__(self) -> None: ...
    def __init_subclass__(cls) -> None: ...
    def __le__(self) -> None: ...
    def __lshift__(self) -> None: ...
    def __lt__(self) -> None: ...
    def __ne__(self) -> None: ...
    def __new__(cls) -> None: ...
    def __reduce__(self, /): ...
    def __reduce_ex__(self, protocol, /): ...
    def __repr__(self) -> None: ...
    def __rlshift__(self) -> None: ...
    def __rrshift__(self) -> None: ...
    def __rshift__(self) -> None: ...
    def __setattr__(self) -> None: ...
    def __sizeof__(self, /): ...
    def __str__(self) -> None: ...
    def __subclasshook__(self) -> None: ...
    def asType(self, arg__1: object) -> object: ...
    def duplicate(self, name: str = '') -> vrdMaterial: ...
    def getAnalytic(self) -> vrdAnalyticSettings: ...
    def getCommon(self) -> vrdBRDFCommonSettings: ...
    def getDisplacementTexture(self) -> vrdDisplacementTexture: ...
    def getIcon(self) -> QIcon: ...
    def getLineWidth(self) -> float: ...
    def getLocked(self) -> bool: ...
    def getNPR(self) -> vrdNPRSettings: ...
    def getName(self) -> str: ...
    def getObjectId(self) -> int: ...
    def getPreview(self) -> QImage: ...
    def getPreviewScene(self) -> str: ...
    def getRaytracing(self) -> vrdMaterialRaytracingSettings: ...
    def getReflectionColor(self) -> QVector3D: ...
    def getRoughness(self) -> float: ...
    def getRoundedEdges(self) -> vrdRoundedEdges: ...
    def getTextures(self) -> List[vrdTexture]: ...
    def getTransparency(self) -> vrdTransparency: ...
    def getUseRoughness(self) -> bool: ...
    def isAsset(self) -> bool: ...
    def isComponent(self) -> bool: ...
    def isDisplacementActive(self) -> bool: ...
    def isEditable(self) -> bool: ...
    def isEditedAsset(self) -> bool: ...
    def isNull(self) -> bool: ...
    def isType(self, arg__1: object) -> bool: ...
    def isValid(self) -> bool: ...
    def setInlineAllImageSequences(self, value: bool) -> List[vrdImage]: ...
    def setLineWidth(self, width: float) -> None: ...
    def setLocked(self, locked: bool) -> None: ...
    def setName(self, name: str) -> None: ...
    def setPreviewScene(self, name: str) -> None: ...
    def setReflectionColor(self, color: QVector3D) -> None: ...
    def setRoughness(self, roughness: float) -> None: ...
    def setUseRoughness(self, use: bool) -> None: ...

class vrdLineChunk:
    __doc__: NoneType
    __module__: str
    widthProperty: str
    smoothProperty: str
    def __copy__(self) -> None: ...
    def __delattr__(self) -> None: ...
    def __dir__(self, /): ...
    def __eq__(self) -> None: ...
    def __format__(self, format_spec, /): ...
    def __ge__(self) -> None: ...
    def __getattribute__(self) -> None: ...
    def __getstate__(self, /): ...
    def __gt__(self) -> None: ...
    def __hash__(self) -> None: ...
    def __init__(self) -> None: ...
    def __init_subclass__(cls) -> None: ...
    def __le__(self) -> None: ...
    def __lshift__(self) -> None: ...
    def __lt__(self) -> None: ...
    def __ne__(self) -> None: ...
    def __new__(cls) -> None: ...
    def __reduce__(self, /): ...
    def __reduce_ex__(self, protocol, /): ...
    def __repr__(self) -> None: ...
    def __rlshift__(self) -> None: ...
    def __rrshift__(self) -> None: ...
    def __rshift__(self) -> None: ...
    def __setattr__(self) -> None: ...
    def __sizeof__(self, /): ...
    def __str__(self) -> None: ...
    def __subclasshook__(self) -> None: ...
    def asType(self, arg__1: object) -> object: ...
    def getObjectId(self) -> int: ...
    def getSmooth(self) -> bool: ...
    def getWidth(self) -> int: ...
    def isNull(self) -> bool: ...
    def isType(self, arg__1: object) -> bool: ...
    def isValid(self) -> bool: ...
    def setSmooth(self, smooth: bool) -> None: ...
    def setWidth(self, width: int) -> None: ...

class vrdMDLMaterial:
    __doc__: NoneType
    __module__: str
    activeMaterialIndexProperty: str
    propertiesProperty: str
    def __copy__(self) -> None: ...
    def __delattr__(self) -> None: ...
    def __dir__(self, /): ...
    def __eq__(self) -> None: ...
    def __format__(self, format_spec, /): ...
    def __ge__(self) -> None: ...
    def __getattribute__(self) -> None: ...
    def __getstate__(self, /): ...
    def __gt__(self) -> None: ...
    def __hash__(self) -> None: ...
    def __init__(self) -> None: ...
    def __init_subclass__(cls) -> None: ...
    def __le__(self) -> None: ...
    def __lshift__(self) -> None: ...
    def __lt__(self) -> None: ...
    def __ne__(self) -> None: ...
    def __new__(cls) -> None: ...
    def __reduce__(self, /): ...
    def __reduce_ex__(self, protocol, /): ...
    def __repr__(self) -> None: ...
    def __rlshift__(self) -> None: ...
    def __rrshift__(self) -> None: ...
    def __rshift__(self) -> None: ...
    def __setattr__(self) -> None: ...
    def __sizeof__(self, /): ...
    def __str__(self) -> None: ...
    def __subclasshook__(self) -> None: ...
    def asType(self, arg__1: object) -> object: ...
    def duplicate(self, name: str = '') -> vrdMaterial: ...
    def getActiveMaterialIndex(self) -> int: ...
    def getActiveMaterialName(self) -> str: ...
    def getActiveMaterialProperty(self, parameterId: str) -> Any: ...
    def getAnalytic(self) -> vrdAnalyticSettings: ...
    def getCommon(self) -> vrdBRDFCommonSettings: ...
    def getIcon(self) -> QIcon: ...
    def getLocked(self) -> bool: ...
    def getMaterialCount(self) -> int: ...
    def getMaterialName(self, index: int) -> str: ...
    def getModulePath(self) -> str: ...
    def getNPR(self) -> vrdNPRSettings: ...
    def getName(self) -> str: ...
    def getObjectId(self) -> int: ...
    def getPreview(self) -> QImage: ...
    def getPreviewScene(self) -> str: ...
    def getProperties(self) -> vrdMDLProperties: ...
    def getProperty(self, materialName: str, parameterId: str) -> Any: ...
    def getRaytracing(self) -> vrdMaterialRaytracingSettings: ...
    def getRoundedEdges(self) -> vrdRoundedEdges: ...
    def getTextures(self) -> List[vrdTexture]: ...
    def getTransparency(self) -> vrdTransparency: ...
    def hasModuleData(self) -> bool: ...
    def isAsset(self) -> bool: ...
    def isComponent(self) -> bool: ...
    def isDisplacementActive(self) -> bool: ...
    def isEditable(self) -> bool: ...
    def isEditedAsset(self) -> bool: ...
    def isModuleValid(self) -> bool: ...
    def isNull(self) -> bool: ...
    def isType(self, arg__1: object) -> bool: ...
    def isValid(self) -> bool: ...
    def loadModule(self, path: str) -> bool: ...
    def resetMaterial(self) -> None: ...
    def setActiveMaterialIndex(self, index: int) -> None: ...
    def setActiveMaterialProperty(self, parameterId: str, value: Any) -> None: ...
    def setInlineAllImageSequences(self, value: bool) -> List[vrdImage]: ...
    def setLocked(self, locked: bool) -> None: ...
    def setName(self, name: str) -> None: ...
    def setPreviewScene(self, name: str) -> None: ...
    def setProperty(self, materialName: str, parameterId: str, value: Any) -> None: ...

class vrdMDLProperties:
    __doc__: NoneType
    __module__: str
    def __copy__(self) -> None: ...
    def __delattr__(self) -> None: ...
    def __dir__(self, /): ...
    def __eq__(self) -> None: ...
    def __format__(self, format_spec, /): ...
    def __ge__(self) -> None: ...
    def __getattribute__(self) -> None: ...
    def __getstate__(self, /): ...
    def __gt__(self) -> None: ...
    def __hash__(self) -> None: ...
    def __init__(self) -> None: ...
    def __init_subclass__(cls) -> None: ...
    def __le__(self) -> None: ...
    def __lshift__(self) -> None: ...
    def __lt__(self) -> None: ...
    def __ne__(self) -> None: ...
    def __new__(cls) -> None: ...
    def __reduce__(self, /): ...
    def __reduce_ex__(self, protocol, /): ...
    def __repr__(self) -> None: ...
    def __rlshift__(self) -> None: ...
    def __rrshift__(self) -> None: ...
    def __rshift__(self) -> None: ...
    def __setattr__(self) -> None: ...
    def __sizeof__(self, /): ...
    def __str__(self) -> None: ...
    def __subclasshook__(self) -> None: ...
    def asType(self, arg__1: object) -> object: ...
    def getObjectId(self) -> int: ...
    def isNull(self) -> bool: ...
    def isType(self, arg__1: object) -> bool: ...
    def isValid(self) -> bool: ...
    def update(self, obj: QObject) -> None: ...

class vrdMarker:
    __doc__: NoneType
    __module__: str
    def __copy__(self) -> None: ...
    def __delattr__(self) -> None: ...
    def __dir__(self, /): ...
    def __eq__(self) -> None: ...
    def __format__(self, format_spec, /): ...
    def __ge__(self) -> None: ...
    def __getattribute__(self) -> None: ...
    def __getstate__(self, /): ...
    def __gt__(self) -> None: ...
    def __hash__(self) -> None: ...
    def __init__(self) -> None: ...
    def __init_subclass__(cls) -> None: ...
    def __le__(self) -> None: ...
    def __lshift__(self) -> None: ...
    def __lt__(self) -> None: ...
    def __ne__(self) -> None: ...
    def __new__(cls) -> None: ...
    def __reduce__(self, /): ...
    def __reduce_ex__(self, protocol, /): ...
    def __repr__(self) -> None: ...
    def __rlshift__(self) -> None: ...
    def __rrshift__(self) -> None: ...
    def __rshift__(self) -> None: ...
    def __setattr__(self) -> None: ...
    def __sizeof__(self, /): ...
    def __str__(self) -> None: ...
    def __subclasshook__(self) -> None: ...
    def asType(self, arg__1: object) -> object: ...
    def getConfidence(self) -> float: ...
    def getName(self) -> str: ...
    def getNode(self) -> vrdNode: ...
    def getObjectId(self) -> int: ...
    def getSize(self) -> QVector3D: ...
    def getTimestamp(self) -> QDateTime: ...
    def getType(self) -> vrXRealityTypes.MarkerTypes: ...
    def isNull(self) -> bool: ...
    def isTracked(self) -> bool: ...
    def isType(self, arg__1: object) -> bool: ...

class vrdMaterial:
    __doc__: NoneType
    __module__: str
    nameProperty: str
    tagsProperty: str
    previewSceneProperty: str
    def __copy__(self) -> None: ...
    def __delattr__(self) -> None: ...
    def __dir__(self, /): ...
    def __eq__(self) -> None: ...
    def __format__(self, format_spec, /): ...
    def __ge__(self) -> None: ...
    def __getattribute__(self) -> None: ...
    def __getstate__(self, /): ...
    def __gt__(self) -> None: ...
    def __hash__(self) -> None: ...
    def __init__(self) -> None: ...
    def __init_subclass__(cls) -> None: ...
    def __le__(self) -> None: ...
    def __lshift__(self) -> None: ...
    def __lt__(self) -> None: ...
    def __ne__(self) -> None: ...
    def __new__(cls) -> None: ...
    def __reduce__(self, /): ...
    def __reduce_ex__(self, protocol, /): ...
    def __repr__(self) -> None: ...
    def __rlshift__(self) -> None: ...
    def __rrshift__(self) -> None: ...
    def __rshift__(self) -> None: ...
    def __setattr__(self) -> None: ...
    def __sizeof__(self, /): ...
    def __str__(self) -> None: ...
    def __subclasshook__(self) -> None: ...
    def asType(self, arg__1: object) -> object: ...
    def duplicate(self, name: str = '') -> vrdMaterial: ...
    def getIcon(self) -> QIcon: ...
    def getLocked(self) -> bool: ...
    def getName(self) -> str: ...
    def getObjectId(self) -> int: ...
    def getPreview(self) -> QImage: ...
    def getPreviewScene(self) -> str: ...
    def getTextures(self) -> List[vrdTexture]: ...
    def isAsset(self) -> bool: ...
    def isComponent(self) -> bool: ...
    def isEditable(self) -> bool: ...
    def isEditedAsset(self) -> bool: ...
    def isNull(self) -> bool: ...
    def isType(self, arg__1: object) -> bool: ...
    def isValid(self) -> bool: ...
    def setInlineAllImageSequences(self, value: bool) -> List[vrdImage]: ...
    def setLocked(self, locked: bool) -> None: ...
    def setName(self, name: str) -> None: ...
    def setPreviewScene(self, name: str) -> None: ...

class vrdMaterialChunk:
    __doc__: NoneType
    __module__: str
    def __copy__(self) -> None: ...
    def __delattr__(self) -> None: ...
    def __dir__(self, /): ...
    def __eq__(self) -> None: ...
    def __format__(self, format_spec, /): ...
    def __ge__(self) -> None: ...
    def __getattribute__(self) -> None: ...
    def __getstate__(self, /): ...
    def __gt__(self) -> None: ...
    def __hash__(self) -> None: ...
    def __init__(self) -> None: ...
    def __init_subclass__(cls) -> None: ...
    def __le__(self) -> None: ...
    def __lshift__(self) -> None: ...
    def __lt__(self) -> None: ...
    def __ne__(self) -> None: ...
    def __new__(cls) -> None: ...
    def __reduce__(self, /): ...
    def __reduce_ex__(self, protocol, /): ...
    def __repr__(self) -> None: ...
    def __rlshift__(self) -> None: ...
    def __rrshift__(self) -> None: ...
    def __rshift__(self) -> None: ...
    def __setattr__(self) -> None: ...
    def __sizeof__(self, /): ...
    def __str__(self) -> None: ...
    def __subclasshook__(self) -> None: ...
    def asType(self, arg__1: object) -> object: ...
    def getObjectId(self) -> int: ...
    def isNull(self) -> bool: ...
    def isType(self, arg__1: object) -> bool: ...
    def isValid(self) -> bool: ...

class vrdMaterialChunkList:
    __doc__: NoneType
    __module__: str
    def ChunkType(self) -> None: ...
    def __contains__(self) -> None: ...
    def __copy__(self) -> None: ...
    def __delattr__(self) -> None: ...
    def __dir__(self, /): ...
    def __eq__(self) -> None: ...
    def __format__(self, format_spec, /): ...
    def __ge__(self) -> None: ...
    def __getattribute__(self) -> None: ...
    def __getitem__(self) -> None: ...
    def __getstate__(self, /): ...
    def __gt__(self) -> None: ...
    def __hash__(self) -> None: ...
    def __init__(self) -> None: ...
    def __init_subclass__(cls) -> None: ...
    def __iter__(self) -> None: ...
    def __le__(self) -> None: ...
    def __len__(self) -> None: ...
    def __lshift__(self) -> None: ...
    def __lt__(self) -> None: ...
    def __ne__(self) -> None: ...
    def __new__(cls) -> None: ...
    def __reduce__(self, /): ...
    def __reduce_ex__(self, protocol, /): ...
    def __repr__(self) -> None: ...
    def __rlshift__(self) -> None: ...
    def __rrshift__(self) -> None: ...
    def __rshift__(self) -> None: ...
    def __setattr__(self) -> None: ...
    def __sizeof__(self, /): ...
    def __str__(self) -> None: ...
    def __subclasshook__(self) -> None: ...
    def asType(self, arg__1: object) -> object: ...
    def at(self, i: int) -> vrdMaterialChunk: ...
    def canInsert(self, value: vrdMaterialChunk) -> bool: ...
    def clear(self) -> None: ...
    def contains(self, value: vrdMaterialChunk) -> bool: ...
    def count(self, value: vrdMaterialChunk) -> int: ...
    def create(self, type: vrdMaterialChunkList.ChunkType) -> vrdMaterialChunk: ...
    def data(self) -> List[vrdMaterialChunk]: ...
    def getObjectId(self) -> int: ...
    def index(self, value: vrdMaterialChunk, from_: int = 0, to: int = -1) -> int: ...
    def isNull(self) -> bool: ...
    def isType(self, arg__1: object) -> bool: ...
    def move(self, from_: int, to: int) -> bool: ...
    def remove(self, value: vrdMaterialChunk) -> bool: ...
    def removeAll(self, value: vrdMaterialChunk) -> int: ...
    def removeAt(self, i: int) -> bool: ...
    def size(self) -> int: ...

class vrdMaterialList:
    __doc__: NoneType
    __module__: str
    def __contains__(self) -> None: ...
    def __copy__(self) -> None: ...
    def __delattr__(self) -> None: ...
    def __dir__(self, /): ...
    def __eq__(self) -> None: ...
    def __format__(self, format_spec, /): ...
    def __ge__(self) -> None: ...
    def __getattribute__(self) -> None: ...
    def __getitem__(self) -> None: ...
    def __getstate__(self, /): ...
    def __gt__(self) -> None: ...
    def __hash__(self) -> None: ...
    def __init__(self) -> None: ...
    def __init_subclass__(cls) -> None: ...
    def __iter__(self) -> None: ...
    def __le__(self) -> None: ...
    def __len__(self) -> None: ...
    def __lshift__(self) -> None: ...
    def __lt__(self) -> None: ...
    def __ne__(self) -> None: ...
    def __new__(cls) -> None: ...
    def __reduce__(self, /): ...
    def __reduce_ex__(self, protocol, /): ...
    def __repr__(self) -> None: ...
    def __rlshift__(self) -> None: ...
    def __rrshift__(self) -> None: ...
    def __rshift__(self) -> None: ...
    def __setattr__(self) -> None: ...
    def __sizeof__(self, /): ...
    def __str__(self) -> None: ...
    def __subclasshook__(self) -> None: ...
    def asType(self, arg__1: object) -> object: ...
    def at(self, i: int) -> vrdMaterial: ...
    def canInsert(self, value: vrdMaterial) -> bool: ...
    def clear(self) -> None: ...
    def contains(self, value: vrdMaterial) -> bool: ...
    def count(self, value: vrdMaterial) -> int: ...
    def data(self) -> List[vrdMaterial]: ...
    def find(self, name: str) -> vrdMaterial: ...
    def getObjectId(self) -> int: ...
    def index(self, value: vrdMaterial, from_: int = 0, to: int = -1) -> int: ...
    def isNull(self) -> bool: ...
    def isType(self, arg__1: object) -> bool: ...
    def move(self, from_: int, to: int) -> bool: ...
    def remove(self, value: vrdMaterial) -> bool: ...
    def removeAll(self, value: vrdMaterial) -> int: ...
    def removeAt(self, i: int) -> bool: ...
    def size(self) -> int: ...

class vrdMaterialNode:
    __doc__: NoneType
    __module__: str
    materialProperty: str
    enabledProperty: str
    def __copy__(self) -> None: ...
    def __delattr__(self) -> None: ...
    def __dir__(self, /): ...
    def __eq__(self) -> None: ...
    def __format__(self, format_spec, /): ...
    def __ge__(self) -> None: ...
    def __getattribute__(self) -> None: ...
    def __getstate__(self, /): ...
    def __gt__(self) -> None: ...
    def __hash__(self) -> None: ...
    def __init__(self) -> None: ...
    def __init_subclass__(cls) -> None: ...
    def __le__(self) -> None: ...
    def __lshift__(self) -> None: ...
    def __lt__(self) -> None: ...
    def __ne__(self) -> None: ...
    def __new__(cls) -> None: ...
    def __reduce__(self, /): ...
    def __reduce_ex__(self, protocol, /): ...
    def __repr__(self) -> None: ...
    def __rlshift__(self) -> None: ...
    def __rrshift__(self) -> None: ...
    def __rshift__(self) -> None: ...
    def __setattr__(self) -> None: ...
    def __sizeof__(self, /): ...
    def __str__(self) -> None: ...
    def __subclasshook__(self) -> None: ...
    def applyMaterial(self, material: vrdMaterial) -> None: ...
    def asType(self, arg__1: object) -> object: ...
    def getBoundingBox(self) -> vrdBoundingBox: ...
    def getChild(self, index: int) -> vrdNode: ...
    def getChildCount(self) -> int: ...
    def getChildIndex(self, child: vrdNode) -> int: ...
    def getChildren(self) -> List[vrdNode]: ...
    def getChildrenRecursive(self) -> List[vrdNode]: ...
    def getChildrenRef(self) -> vrdNodeList: ...
    def getEnabled(self) -> bool: ...
    def getLocked(self) -> bool: ...
    def getMaterial(self) -> vrdMaterial: ...
    def getName(self) -> str: ...
    def getObjectId(self) -> int: ...
    def getOrCreateTransformNode(self) -> vrdNode: ...
    def getParent(self) -> vrdNode: ...
    def getPath(self) -> str: ...
    def getSelectableFlag(self) -> bool: ...
    def getSharedNodes(self) -> List[vrdNode]: ...
    def getSynchronizedNodes(self) -> List[vrdNode]: ...
    def getUniquePath(self) -> str: ...
    def getVisibilityFlag(self) -> bool: ...
    def getWorldBoundingBox(self) -> vrdBoundingBox: ...
    def getWorldTransform(self) -> QMatrix4x4: ...
    def hasParent(self, parent: vrdNode) -> bool: ...
    def isEditable(self) -> bool: ...
    def isEditedAsset(self) -> bool: ...
    def isGroup(self) -> bool: ...
    def isImplicitShared(self) -> bool: ...
    def isNull(self) -> bool: ...
    def isShared(self) -> bool: ...
    def isSharedWith(self, node: vrdNode) -> bool: ...
    def isSynchronized(self) -> bool: ...
    def isType(self, arg__1: object) -> bool: ...
    def isValid(self) -> bool: ...
    def isVisible(self) -> bool: ...
    def setEnabled(self, value: bool) -> None: ...
    def setLocked(self, locked: bool) -> None: ...
    def setMaterial(self, material: vrdMaterial) -> None: ...
    def setName(self, name: str) -> None: ...
    def setSelectableFlag(self, selectable: bool) -> None: ...
    def setVisibilityFlag(self, visible: bool) -> None: ...

class vrdMaterialPoolNode:
    __doc__: NoneType
    __module__: str
    def __copy__(self) -> None: ...
    def __delattr__(self) -> None: ...
    def __dir__(self, /): ...
    def __eq__(self) -> None: ...
    def __format__(self, format_spec, /): ...
    def __ge__(self) -> None: ...
    def __getattribute__(self) -> None: ...
    def __getstate__(self, /): ...
    def __gt__(self) -> None: ...
    def __hash__(self) -> None: ...
    def __init__(self) -> None: ...
    def __init_subclass__(cls) -> None: ...
    def __le__(self) -> None: ...
    def __lshift__(self) -> None: ...
    def __lt__(self) -> None: ...
    def __ne__(self) -> None: ...
    def __new__(cls) -> None: ...
    def __reduce__(self, /): ...
    def __reduce_ex__(self, protocol, /): ...
    def __repr__(self) -> None: ...
    def __rlshift__(self) -> None: ...
    def __rrshift__(self) -> None: ...
    def __rshift__(self) -> None: ...
    def __setattr__(self) -> None: ...
    def __sizeof__(self, /): ...
    def __str__(self) -> None: ...
    def __subclasshook__(self) -> None: ...
    def applyMaterial(self, material: vrdMaterial) -> None: ...
    def asType(self, arg__1: object) -> object: ...
    def getBoundingBox(self) -> vrdBoundingBox: ...
    def getChild(self, index: int) -> vrdNode: ...
    def getChildCount(self) -> int: ...
    def getChildIndex(self, child: vrdNode) -> int: ...
    def getChildren(self) -> List[vrdNode]: ...
    def getChildrenRecursive(self) -> List[vrdNode]: ...
    def getChildrenRef(self) -> vrdNodeList: ...
    def getLocked(self) -> bool: ...
    def getMaterial(self) -> vrdMaterial: ...
    def getName(self) -> str: ...
    def getObjectId(self) -> int: ...
    def getOrCreateTransformNode(self) -> vrdNode: ...
    def getParent(self) -> vrdNode: ...
    def getPath(self) -> str: ...
    def getSelectableFlag(self) -> bool: ...
    def getSharedNodes(self) -> List[vrdNode]: ...
    def getSynchronizedNodes(self) -> List[vrdNode]: ...
    def getUniquePath(self) -> str: ...
    def getVisibilityFlag(self) -> bool: ...
    def getWorldBoundingBox(self) -> vrdBoundingBox: ...
    def getWorldTransform(self) -> QMatrix4x4: ...
    def hasParent(self, parent: vrdNode) -> bool: ...
    def isEditable(self) -> bool: ...
    def isEditedAsset(self) -> bool: ...
    def isGroup(self) -> bool: ...
    def isImplicitShared(self) -> bool: ...
    def isNull(self) -> bool: ...
    def isShared(self) -> bool: ...
    def isSharedWith(self, node: vrdNode) -> bool: ...
    def isSynchronized(self) -> bool: ...
    def isType(self, arg__1: object) -> bool: ...
    def isValid(self) -> bool: ...
    def isVisible(self) -> bool: ...
    def setLocked(self, locked: bool) -> None: ...
    def setName(self, name: str) -> None: ...
    def setSelectableFlag(self, selectable: bool) -> None: ...
    def setVisibilityFlag(self, visible: bool) -> None: ...

class vrdMaterialRaytracingSettings:
    __doc__: NoneType
    __module__: str
    Precomputed: IlluminationMode
    PrecomputedAndReflections: IlluminationMode
    PrecomputedAndShadows: IlluminationMode
    PrecomputedAndIBL: IlluminationMode
    FullGI: IlluminationMode
    materialIdProperty: str
    lineTubeRadiusProperty: str
    useLocalEnvironmentProperty: str
    ignorePhotonMapProperty: str
    overrideIlluminationProperty: str
    interactiveIlluminationModeProperty: str
    stillFrameIlluminationModeProperty: str
    overrideIblSamplingProperty: str
    interactiveIblSamplingQualityProperty: str
    stillFrameIblSamplingQualityProperty: str
    overrideReflectionSamplingProperty: str
    interactiveReflectionSamplingQualityProperty: str
    stillFrameReflectionSamplingQualityProperty: str
    overrideTraceDepthProperty: str
    interactiveTraceDepthProperty: str
    stillFrameTraceDepthProperty: str
    def IlluminationMode(self) -> None: ...
    def __copy__(self) -> None: ...
    def __delattr__(self) -> None: ...
    def __dir__(self, /): ...
    def __eq__(self) -> None: ...
    def __format__(self, format_spec, /): ...
    def __ge__(self) -> None: ...
    def __getattribute__(self) -> None: ...
    def __getstate__(self, /): ...
    def __gt__(self) -> None: ...
    def __hash__(self) -> None: ...
    def __init__(self) -> None: ...
    def __init_subclass__(cls) -> None: ...
    def __le__(self) -> None: ...
    def __lshift__(self) -> None: ...
    def __lt__(self) -> None: ...
    def __ne__(self) -> None: ...
    def __new__(cls) -> None: ...
    def __reduce__(self, /): ...
    def __reduce_ex__(self, protocol, /): ...
    def __repr__(self) -> None: ...
    def __rlshift__(self) -> None: ...
    def __rrshift__(self) -> None: ...
    def __rshift__(self) -> None: ...
    def __setattr__(self) -> None: ...
    def __sizeof__(self, /): ...
    def __str__(self) -> None: ...
    def __subclasshook__(self) -> None: ...
    def asType(self, arg__1: object) -> object: ...
    def getIgnorePhotonMap(self) -> bool: ...
    def getInteractiveIblSamplingQuality(self) -> int: ...
    def getInteractiveIlluminationMode(self) -> vrdMaterialRaytracingSettings.IlluminationMode: ...
    def getInteractiveReflectionSamplingQuality(self) -> int: ...
    def getInteractiveTraceDepth(self) -> int: ...
    def getLineTubeRadius(self) -> float: ...
    def getMaterialId(self) -> int: ...
    def getObjectId(self) -> int: ...
    def getOverrideIblSampling(self) -> bool: ...
    def getOverrideIllumination(self) -> bool: ...
    def getOverrideReflectionSampling(self) -> bool: ...
    def getOverrideTraceDepth(self) -> bool: ...
    def getStillFrameIblSamplingQuality(self) -> int: ...
    def getStillFrameIlluminationMode(self) -> vrdMaterialRaytracingSettings.IlluminationMode: ...
    def getStillFrameReflectionSamplingQuality(self) -> int: ...
    def getStillFrameTraceDepth(self) -> int: ...
    def getUseLocalEnvironment(self) -> bool: ...
    def isNull(self) -> bool: ...
    def isType(self, arg__1: object) -> bool: ...
    def isValid(self) -> bool: ...
    def setIgnorePhotonMap(self, value: bool) -> None: ...
    def setInteractiveIblSamplingQuality(self, value: int) -> None: ...
    def setInteractiveIlluminationMode(self, mode: vrdMaterialRaytracingSettings.IlluminationMode) -> None: ...
    def setInteractiveReflectionSamplingQuality(self, value: int) -> None: ...
    def setInteractiveTraceDepth(self, value: int) -> None: ...
    def setLineTubeRadius(self, value: float) -> None: ...
    def setMaterialId(self, value: int) -> None: ...
    def setOverrideIblSampling(self, value: bool) -> None: ...
    def setOverrideIllumination(self, value: bool) -> None: ...
    def setOverrideReflectionSampling(self, value: bool) -> None: ...
    def setOverrideTraceDepth(self, value: bool) -> None: ...
    def setStillFrameIblSamplingQuality(self, value: int) -> None: ...
    def setStillFrameIlluminationMode(self, mode: vrdMaterialRaytracingSettings.IlluminationMode) -> None: ...
    def setStillFrameReflectionSamplingQuality(self, value: int) -> None: ...
    def setStillFrameTraceDepth(self, value: int) -> None: ...
    def setUseLocalEnvironment(self, value: bool) -> None: ...

class vrdMaterialXMaterial:
    __doc__: NoneType
    __module__: str
    activeMaterialIndexProperty: str
    propertiesProperty: str
    def __copy__(self) -> None: ...
    def __delattr__(self) -> None: ...
    def __dir__(self, /): ...
    def __eq__(self) -> None: ...
    def __format__(self, format_spec, /): ...
    def __ge__(self) -> None: ...
    def __getattribute__(self) -> None: ...
    def __getstate__(self, /): ...
    def __gt__(self) -> None: ...
    def __hash__(self) -> None: ...
    def __init__(self) -> None: ...
    def __init_subclass__(cls) -> None: ...
    def __le__(self) -> None: ...
    def __lshift__(self) -> None: ...
    def __lt__(self) -> None: ...
    def __ne__(self) -> None: ...
    def __new__(cls) -> None: ...
    def __reduce__(self, /): ...
    def __reduce_ex__(self, protocol, /): ...
    def __repr__(self) -> None: ...
    def __rlshift__(self) -> None: ...
    def __rrshift__(self) -> None: ...
    def __rshift__(self) -> None: ...
    def __setattr__(self) -> None: ...
    def __sizeof__(self, /): ...
    def __str__(self) -> None: ...
    def __subclasshook__(self) -> None: ...
    def asType(self, arg__1: object) -> object: ...
    def duplicate(self, name: str = '') -> vrdMaterial: ...
    def getActiveMaterialName(self) -> str: ...
    def getActiveMaterialProperty(self, parameterId: str) -> Any: ...
    def getAnalytic(self) -> vrdAnalyticSettings: ...
    def getCommon(self) -> vrdBRDFCommonSettings: ...
    def getIcon(self) -> QIcon: ...
    def getLocked(self) -> bool: ...
    def getMaterialIndex(self) -> int: ...
    def getNPR(self) -> vrdNPRSettings: ...
    def getName(self) -> str: ...
    def getObjectId(self) -> int: ...
    def getPath(self) -> str: ...
    def getPreview(self) -> QImage: ...
    def getPreviewScene(self) -> str: ...
    def getProperties(self) -> vrdMaterialXProperties: ...
    def getRaytracing(self) -> vrdMaterialRaytracingSettings: ...
    def getRoundedEdges(self) -> vrdRoundedEdges: ...
    def getTextures(self) -> List[vrdTexture]: ...
    def getTransparency(self) -> vrdTransparency: ...
    def hasData(self) -> bool: ...
    def isAsset(self) -> bool: ...
    def isComponent(self) -> bool: ...
    def isDataValid(self) -> bool: ...
    def isDisplacementActive(self) -> bool: ...
    def isEditable(self) -> bool: ...
    def isEditedAsset(self) -> bool: ...
    def isNull(self) -> bool: ...
    def isType(self, arg__1: object) -> bool: ...
    def isValid(self) -> bool: ...
    def loadMaterial(self, path: str, index: int) -> bool: ...
    def resetMaterial(self) -> None: ...
    def setActiveMaterialProperty(self, parameterId: str, value: Any) -> None: ...
    def setInlineAllImageSequences(self, value: bool) -> List[vrdImage]: ...
    def setLocked(self, locked: bool) -> None: ...
    def setName(self, name: str) -> None: ...
    def setPreviewScene(self, name: str) -> None: ...

class vrdMaterialXProperties:
    __doc__: NoneType
    __module__: str
    def __copy__(self) -> None: ...
    def __delattr__(self) -> None: ...
    def __dir__(self, /): ...
    def __eq__(self) -> None: ...
    def __format__(self, format_spec, /): ...
    def __ge__(self) -> None: ...
    def __getattribute__(self) -> None: ...
    def __getstate__(self, /): ...
    def __gt__(self) -> None: ...
    def __hash__(self) -> None: ...
    def __init__(self) -> None: ...
    def __init_subclass__(cls) -> None: ...
    def __le__(self) -> None: ...
    def __lshift__(self) -> None: ...
    def __lt__(self) -> None: ...
    def __ne__(self) -> None: ...
    def __new__(cls) -> None: ...
    def __reduce__(self, /): ...
    def __reduce_ex__(self, protocol, /): ...
    def __repr__(self) -> None: ...
    def __rlshift__(self) -> None: ...
    def __rrshift__(self) -> None: ...
    def __rshift__(self) -> None: ...
    def __setattr__(self) -> None: ...
    def __sizeof__(self, /): ...
    def __str__(self) -> None: ...
    def __subclasshook__(self) -> None: ...
    def asType(self, arg__1: object) -> object: ...
    def getObjectId(self) -> int: ...
    def isNull(self) -> bool: ...
    def isType(self, arg__1: object) -> bool: ...
    def isValid(self) -> bool: ...
    def update(self, obj: QObject) -> None: ...

class vrdMatrixTransformNode:
    __doc__: NoneType
    __module__: str
    transformProperty: str
    def __copy__(self) -> None: ...
    def __delattr__(self) -> None: ...
    def __dir__(self, /): ...
    def __eq__(self) -> None: ...
    def __format__(self, format_spec, /): ...
    def __ge__(self) -> None: ...
    def __getattribute__(self) -> None: ...
    def __getstate__(self, /): ...
    def __gt__(self) -> None: ...
    def __hash__(self) -> None: ...
    def __init__(self) -> None: ...
    def __init_subclass__(cls) -> None: ...
    def __le__(self) -> None: ...
    def __lshift__(self) -> None: ...
    def __lt__(self) -> None: ...
    def __ne__(self) -> None: ...
    def __new__(cls) -> None: ...
    def __reduce__(self, /): ...
    def __reduce_ex__(self, protocol, /): ...
    def __repr__(self) -> None: ...
    def __rlshift__(self) -> None: ...
    def __rrshift__(self) -> None: ...
    def __rshift__(self) -> None: ...
    def __setattr__(self) -> None: ...
    def __sizeof__(self, /): ...
    def __str__(self) -> None: ...
    def __subclasshook__(self) -> None: ...
    def applyMaterial(self, material: vrdMaterial) -> None: ...
    def asType(self, arg__1: object) -> object: ...
    def getBoundingBox(self) -> vrdBoundingBox: ...
    def getChild(self, index: int) -> vrdNode: ...
    def getChildCount(self) -> int: ...
    def getChildIndex(self, child: vrdNode) -> int: ...
    def getChildren(self) -> List[vrdNode]: ...
    def getChildrenRecursive(self) -> List[vrdNode]: ...
    def getChildrenRef(self) -> vrdNodeList: ...
    def getLocked(self) -> bool: ...
    def getMaterial(self) -> vrdMaterial: ...
    def getName(self) -> str: ...
    def getObjectId(self) -> int: ...
    def getOrCreateTransformNode(self) -> vrdNode: ...
    def getParent(self) -> vrdNode: ...
    def getPath(self) -> str: ...
    def getSelectableFlag(self) -> bool: ...
    def getSharedNodes(self) -> List[vrdNode]: ...
    def getSynchronizedNodes(self) -> List[vrdNode]: ...
    def getTransform(self) -> QMatrix4x4: ...
    def getUniquePath(self) -> str: ...
    def getVisibilityFlag(self) -> bool: ...
    def getWorldBoundingBox(self) -> vrdBoundingBox: ...
    def getWorldTransform(self) -> QMatrix4x4: ...
    def hasParent(self, parent: vrdNode) -> bool: ...
    def isEditable(self) -> bool: ...
    def isEditedAsset(self) -> bool: ...
    def isGroup(self) -> bool: ...
    def isImplicitShared(self) -> bool: ...
    def isNull(self) -> bool: ...
    def isShared(self) -> bool: ...
    def isSharedWith(self, node: vrdNode) -> bool: ...
    def isSynchronized(self) -> bool: ...
    def isType(self, arg__1: object) -> bool: ...
    def isValid(self) -> bool: ...
    def isVisible(self) -> bool: ...
    def setLocked(self, locked: bool) -> None: ...
    def setName(self, name: str) -> None: ...
    def setSelectableFlag(self, selectable: bool) -> None: ...
    def setTransform(self, matrix: Union[QMatrix4x4, QTransform]) -> None: ...
    def setVisibilityFlag(self, visible: bool) -> None: ...

class vrdMeasuredCarpaintMaterial:
    __doc__: NoneType
    __module__: str
    exposureProperty: str
    refractionIndexProperty: str
    colorCorrectionProperty: str
    textureSettingsProperty: str
    incandescenceProperty: str
    def __copy__(self) -> None: ...
    def __delattr__(self) -> None: ...
    def __dir__(self, /): ...
    def __eq__(self) -> None: ...
    def __format__(self, format_spec, /): ...
    def __ge__(self) -> None: ...
    def __getattribute__(self) -> None: ...
    def __getstate__(self, /): ...
    def __gt__(self) -> None: ...
    def __hash__(self) -> None: ...
    def __init__(self) -> None: ...
    def __init_subclass__(cls) -> None: ...
    def __le__(self) -> None: ...
    def __lshift__(self) -> None: ...
    def __lt__(self) -> None: ...
    def __ne__(self) -> None: ...
    def __new__(cls) -> None: ...
    def __reduce__(self, /): ...
    def __reduce_ex__(self, protocol, /): ...
    def __repr__(self) -> None: ...
    def __rlshift__(self) -> None: ...
    def __rrshift__(self) -> None: ...
    def __rshift__(self) -> None: ...
    def __setattr__(self) -> None: ...
    def __sizeof__(self, /): ...
    def __str__(self) -> None: ...
    def __subclasshook__(self) -> None: ...
    def asType(self, arg__1: object) -> object: ...
    def duplicate(self, name: str = '') -> vrdMaterial: ...
    def getAnalytic(self) -> vrdAnalyticSettings: ...
    def getColorCorrection(self) -> vrdColorCorrection: ...
    def getCommon(self) -> vrdBRDFCommonSettings: ...
    def getExposure(self) -> float: ...
    def getIcon(self) -> QIcon: ...
    def getIncandescence(self) -> vrdIncandescence: ...
    def getLocked(self) -> bool: ...
    def getNPR(self) -> vrdNPRSettings: ...
    def getName(self) -> str: ...
    def getObjectId(self) -> int: ...
    def getPreview(self) -> QImage: ...
    def getPreviewScene(self) -> str: ...
    def getRaytracing(self) -> vrdMaterialRaytracingSettings: ...
    def getRefractionIndex(self) -> float: ...
    def getRoundedEdges(self) -> vrdRoundedEdges: ...
    def getTextureSettings(self) -> vrdTextureSettings: ...
    def getTextures(self) -> List[vrdTexture]: ...
    def getTransparency(self) -> vrdTransparency: ...
    def isAsset(self) -> bool: ...
    def isComponent(self) -> bool: ...
    def isDisplacementActive(self) -> bool: ...
    def isEditable(self) -> bool: ...
    def isEditedAsset(self) -> bool: ...
    def isNull(self) -> bool: ...
    def isType(self, arg__1: object) -> bool: ...
    def isValid(self) -> bool: ...
    def setExposure(self, exposure: float) -> None: ...
    def setInlineAllImageSequences(self, value: bool) -> List[vrdImage]: ...
    def setLocked(self, locked: bool) -> None: ...
    def setName(self, name: str) -> None: ...
    def setPreviewScene(self, name: str) -> None: ...
    def setRefractionIndex(self, value: float) -> None: ...

class vrdMeasuredMaterial:
    __doc__: NoneType
    __module__: str
    exposureProperty: str
    colorCorrectionProperty: str
    textureSettingsProperty: str
    incandescenceProperty: str
    def __copy__(self) -> None: ...
    def __delattr__(self) -> None: ...
    def __dir__(self, /): ...
    def __eq__(self) -> None: ...
    def __format__(self, format_spec, /): ...
    def __ge__(self) -> None: ...
    def __getattribute__(self) -> None: ...
    def __getstate__(self, /): ...
    def __gt__(self) -> None: ...
    def __hash__(self) -> None: ...
    def __init__(self) -> None: ...
    def __init_subclass__(cls) -> None: ...
    def __le__(self) -> None: ...
    def __lshift__(self) -> None: ...
    def __lt__(self) -> None: ...
    def __ne__(self) -> None: ...
    def __new__(cls) -> None: ...
    def __reduce__(self, /): ...
    def __reduce_ex__(self, protocol, /): ...
    def __repr__(self) -> None: ...
    def __rlshift__(self) -> None: ...
    def __rrshift__(self) -> None: ...
    def __rshift__(self) -> None: ...
    def __setattr__(self) -> None: ...
    def __sizeof__(self, /): ...
    def __str__(self) -> None: ...
    def __subclasshook__(self) -> None: ...
    def asType(self, arg__1: object) -> object: ...
    def duplicate(self, name: str = '') -> vrdMaterial: ...
    def getAnalytic(self) -> vrdAnalyticSettings: ...
    def getColorCorrection(self) -> vrdColorCorrection: ...
    def getCommon(self) -> vrdBRDFCommonSettings: ...
    def getExposure(self) -> float: ...
    def getIcon(self) -> QIcon: ...
    def getIncandescence(self) -> vrdIncandescence: ...
    def getLocked(self) -> bool: ...
    def getNPR(self) -> vrdNPRSettings: ...
    def getName(self) -> str: ...
    def getObjectId(self) -> int: ...
    def getPreview(self) -> QImage: ...
    def getPreviewScene(self) -> str: ...
    def getRaytracing(self) -> vrdMaterialRaytracingSettings: ...
    def getRoundedEdges(self) -> vrdRoundedEdges: ...
    def getTextureSettings(self) -> vrdTextureSettings: ...
    def getTextures(self) -> List[vrdTexture]: ...
    def getTransparency(self) -> vrdTransparency: ...
    def isAsset(self) -> bool: ...
    def isComponent(self) -> bool: ...
    def isDisplacementActive(self) -> bool: ...
    def isEditable(self) -> bool: ...
    def isEditedAsset(self) -> bool: ...
    def isNull(self) -> bool: ...
    def isType(self, arg__1: object) -> bool: ...
    def isValid(self) -> bool: ...
    def setExposure(self, exposure: float) -> None: ...
    def setInlineAllImageSequences(self, value: bool) -> List[vrdImage]: ...
    def setLocked(self, locked: bool) -> None: ...
    def setName(self, name: str) -> None: ...
    def setPreviewScene(self, name: str) -> None: ...

class vrdMetadata:
    key: getset_descriptor
    value: getset_descriptor
    set: getset_descriptor
    type: getset_descriptor
    __doc__: NoneType
    __module__: str
    def __copy__(self) -> None: ...
    def __delattr__(self) -> None: ...
    def __dir__(self, /): ...
    def __eq__(self) -> None: ...
    def __format__(self, format_spec, /): ...
    def __ge__(self) -> None: ...
    def __getattribute__(self) -> None: ...
    def __getitem__(self) -> None: ...
    def __getstate__(self, /): ...
    def __gt__(self) -> None: ...
    def __hash__(self) -> None: ...
    def __init__(self) -> None: ...
    def __init_subclass__(cls) -> None: ...
    def __le__(self) -> None: ...
    def __lshift__(self) -> None: ...
    def __lt__(self) -> None: ...
    def __ne__(self) -> None: ...
    def __new__(cls) -> None: ...
    def __reduce__(self, /): ...
    def __reduce_ex__(self, protocol, /): ...
    def __repr__(self) -> None: ...
    def __rlshift__(self) -> None: ...
    def __rrshift__(self) -> None: ...
    def __rshift__(self) -> None: ...
    def __setattr__(self) -> None: ...
    def __sizeof__(self, /): ...
    def __str__(self) -> None: ...
    def __subclasshook__(self) -> None: ...
    def asType(self, arg__1: object) -> object: ...
    def entryCount(self) -> int: ...
    def fromObject(self) -> None: ...
    def getKeyQuery(self) -> vrdMetadataQuery: ...
    def getKeyValueQuery(self, key: str) -> vrdMetadataQuery: ...
    def getObjectId(self) -> int: ...
    def getObjectSet(self) -> vrdMetadataSet: ...
    def getSetQuery(self) -> vrdMetadataQuery: ...
    def getSets(self) -> List[vrdMetadataSet]: ...
    def getTags(self) -> List[str]: ...
    def getValue(self, key: str) -> Any: ...
    def getValueQuery(self) -> vrdMetadataQuery: ...
    def getValueTypeQuery(self) -> vrdMetadataQuery: ...
    def hasKey(self, key: str) -> bool: ...
    def hasObjectEntries(self) -> bool: ...
    def hasSet(self, name: str) -> bool: ...
    def hasType(self, type: vrMetadataTypes.ValueType) -> bool: ...
    def hasValue(self, value: Any) -> bool: ...
    def isNull(self) -> bool: ...
    def isType(self, arg__1: object) -> bool: ...

class vrdMetadataEntry:
    __doc__: NoneType
    __module__: str
    keyProperty: str
    valueProperty: str
    valueTypeProperty: str
    def __copy__(self) -> None: ...
    def __delattr__(self) -> None: ...
    def __dir__(self, /): ...
    def __eq__(self) -> None: ...
    def __format__(self, format_spec, /): ...
    def __ge__(self) -> None: ...
    def __getattribute__(self) -> None: ...
    def __getstate__(self, /): ...
    def __gt__(self) -> None: ...
    def __hash__(self) -> None: ...
    def __init__(self) -> None: ...
    def __init_subclass__(cls) -> None: ...
    def __le__(self) -> None: ...
    def __lshift__(self) -> None: ...
    def __lt__(self) -> None: ...
    def __ne__(self) -> None: ...
    def __new__(cls) -> None: ...
    def __reduce__(self, /): ...
    def __reduce_ex__(self, protocol, /): ...
    def __repr__(self) -> None: ...
    def __rlshift__(self) -> None: ...
    def __rrshift__(self) -> None: ...
    def __rshift__(self) -> None: ...
    def __setattr__(self) -> None: ...
    def __sizeof__(self, /): ...
    def __str__(self) -> None: ...
    def __subclasshook__(self) -> None: ...
    def asType(self, arg__1: object) -> object: ...
    def getIcon(self) -> QIcon: ...
    def getKey(self) -> str: ...
    def getObjectId(self) -> int: ...
    def getSet(self) -> vrdMetadataSet: ...
    def getValue(self) -> Any: ...
    def getValueAsColor(self) -> QColor: ...
    def getValueAsMatrix(self, order: vrMetadataTypes.MatrixOrder = vrMetadataTypes.MatrixOrder.RowMajor) -> QMatrix4x4: ...
    def getValueAsVector3D(self) -> QVector3D: ...
    def getValueType(self) -> vrMetadataTypes.ValueType: ...
    def isNull(self) -> bool: ...
    def isTag(self) -> bool: ...
    def isType(self, arg__1: object) -> bool: ...
    def setKey(self, key: str) -> None: ...
    def setTag(self, tag: str) -> None: ...
    def setValue(self, value: Any) -> None: ...
    def setValueFromColor(self, color: Union[QColor, QRgba64, Any, Qt.GlobalColor, str, int]) -> None: ...
    def setValueFromMatrix(self, matrix: Union[QMatrix4x4, QTransform]) -> None: ...
    def setValueFromVector3D(self, vector: QVector3D) -> None: ...
    def setValueType(self, valueType: vrMetadataTypes.ValueType) -> None: ...

class vrdMetadataEntryList:
    __doc__: NoneType
    __module__: str
    def __contains__(self) -> None: ...
    def __copy__(self) -> None: ...
    def __delattr__(self) -> None: ...
    def __dir__(self, /): ...
    def __eq__(self) -> None: ...
    def __format__(self, format_spec, /): ...
    def __ge__(self) -> None: ...
    def __getattribute__(self) -> None: ...
    def __getitem__(self) -> None: ...
    def __getstate__(self, /): ...
    def __gt__(self) -> None: ...
    def __hash__(self) -> None: ...
    def __init__(self) -> None: ...
    def __init_subclass__(cls) -> None: ...
    def __iter__(self) -> None: ...
    def __le__(self) -> None: ...
    def __len__(self) -> None: ...
    def __lshift__(self) -> None: ...
    def __lt__(self) -> None: ...
    def __ne__(self) -> None: ...
    def __new__(cls) -> None: ...
    def __reduce__(self, /): ...
    def __reduce_ex__(self, protocol, /): ...
    def __repr__(self) -> None: ...
    def __rlshift__(self) -> None: ...
    def __rrshift__(self) -> None: ...
    def __rshift__(self) -> None: ...
    def __setattr__(self) -> None: ...
    def __sizeof__(self, /): ...
    def __str__(self) -> None: ...
    def __subclasshook__(self) -> None: ...
    def asType(self, arg__1: object) -> object: ...
    def canInsert(self, entry: vrdMetadataEntry) -> bool: ...
    def clear(self) -> None: ...
    def contains(self, entry: vrdMetadataEntry) -> bool: ...
    def count(self, entry: vrdMetadataEntry) -> int: ...
    def data(self) -> List[vrdMetadataEntry]: ...
    def find(self, key: str) -> vrdMetadataEntry: ...
    def getObjectId(self) -> int: ...
    def isNull(self) -> bool: ...
    def isType(self, arg__1: object) -> bool: ...
    def remove(self, entry: vrdMetadataEntry) -> bool: ...
    def removeKey(self, key: str) -> bool: ...
    def size(self) -> int: ...

class vrdMetadataSet:
    __doc__: NoneType
    __module__: str
    nameProperty: str
    colorProperty: str
    lockedProperty: str
    entriesProperty: str
    def __copy__(self) -> None: ...
    def __delattr__(self) -> None: ...
    def __dir__(self, /): ...
    def __eq__(self) -> None: ...
    def __format__(self, format_spec, /): ...
    def __ge__(self) -> None: ...
    def __getattribute__(self) -> None: ...
    def __getstate__(self, /): ...
    def __gt__(self) -> None: ...
    def __hash__(self) -> None: ...
    def __init__(self) -> None: ...
    def __init_subclass__(cls) -> None: ...
    def __le__(self) -> None: ...
    def __lshift__(self) -> None: ...
    def __lt__(self) -> None: ...
    def __ne__(self) -> None: ...
    def __new__(cls) -> None: ...
    def __reduce__(self, /): ...
    def __reduce_ex__(self, protocol, /): ...
    def __repr__(self) -> None: ...
    def __rlshift__(self) -> None: ...
    def __rrshift__(self) -> None: ...
    def __rshift__(self) -> None: ...
    def __setattr__(self) -> None: ...
    def __sizeof__(self, /): ...
    def __str__(self) -> None: ...
    def __subclasshook__(self) -> None: ...
    def asType(self, arg__1: object) -> object: ...
    def createEntry(self, valueType: vrMetadataTypes.ValueType) -> vrdMetadataEntry: ...
    def dump(self) -> None: ...
    def getColor(self) -> QColor: ...
    def getEntries(self) -> vrdMetadataEntryList: ...
    def getIcon(self) -> QIcon: ...
    def getJson(self) -> QByteArray: ...
    def getName(self) -> str: ...
    def getObjectId(self) -> int: ...
    def getObjects(self) -> List[vrdSceneObject]: ...
    def getUniqueKey(self, key: str) -> str: ...
    def getValue(self, key: str) -> Any: ...
    def isAsset(self) -> bool: ...
    def isAssigned(self) -> bool: ...
    def isEditable(self) -> bool: ...
    def isEditedAsset(self) -> bool: ...
    def isLocked(self) -> bool: ...
    def isNull(self) -> bool: ...
    def isObjectSet(self) -> bool: ...
    def isType(self, arg__1: object) -> bool: ...
    def setColor(self, color: Union[QColor, QRgba64, Any, Qt.GlobalColor, str, int]) -> None: ...
    def setJson(self, json: Union[QByteArray, bytes]) -> bool: ...
    def setLocked(self, value: bool) -> None: ...
    def setName(self, name: str) -> None: ...
    def setValue(self, key: str, value: Any) -> None: ...

class vrdMetallicCarpaintMaterial:
    __doc__: NoneType
    __module__: str
    Artistic: PaintType
    TwoCoat: PaintType
    ThreeCoat: PaintType
    paintTypeProperty: str
    baseColorProperty: str
    baseColorSpectrumProperty: str
    primaryFlakeLayerProperty: str
    secondaryFlakeLayerProperty: str
    clearcoatProperty: str
    incandescenceProperty: str
    displacementTextureProperty: str
    def PaintType(self) -> None: ...
    def __copy__(self) -> None: ...
    def __delattr__(self) -> None: ...
    def __dir__(self, /): ...
    def __eq__(self) -> None: ...
    def __format__(self, format_spec, /): ...
    def __ge__(self) -> None: ...
    def __getattribute__(self) -> None: ...
    def __getstate__(self, /): ...
    def __gt__(self) -> None: ...
    def __hash__(self) -> None: ...
    def __init__(self) -> None: ...
    def __init_subclass__(cls) -> None: ...
    def __le__(self) -> None: ...
    def __lshift__(self) -> None: ...
    def __lt__(self) -> None: ...
    def __ne__(self) -> None: ...
    def __new__(cls) -> None: ...
    def __reduce__(self, /): ...
    def __reduce_ex__(self, protocol, /): ...
    def __repr__(self) -> None: ...
    def __rlshift__(self) -> None: ...
    def __rrshift__(self) -> None: ...
    def __rshift__(self) -> None: ...
    def __setattr__(self) -> None: ...
    def __sizeof__(self, /): ...
    def __str__(self) -> None: ...
    def __subclasshook__(self) -> None: ...
    def asType(self, arg__1: object) -> object: ...
    def duplicate(self, name: str = '') -> vrdMaterial: ...
    def getAnalytic(self) -> vrdAnalyticSettings: ...
    def getBaseColor(self) -> QVector3D: ...
    def getBaseColorSpectrum(self) -> vrSpectrum: ...
    def getClearcoat(self) -> vrdClearcoat: ...
    def getCommon(self) -> vrdBRDFCommonSettings: ...
    def getDisplacementTexture(self) -> vrdDisplacementTexture: ...
    def getIcon(self) -> QIcon: ...
    def getIncandescence(self) -> vrdIncandescence: ...
    def getLocked(self) -> bool: ...
    def getNPR(self) -> vrdNPRSettings: ...
    def getName(self) -> str: ...
    def getObjectId(self) -> int: ...
    def getPaintType(self) -> vrdMetallicCarpaintMaterial.PaintType: ...
    def getPreview(self) -> QImage: ...
    def getPreviewScene(self) -> str: ...
    def getPrimaryFlakeLayer(self) -> vrdFlakeLayer: ...
    def getRaytracing(self) -> vrdMaterialRaytracingSettings: ...
    def getRoundedEdges(self) -> vrdRoundedEdges: ...
    def getSecondaryFlakeLayer(self) -> vrdFlakeLayer: ...
    def getTextures(self) -> List[vrdTexture]: ...
    def getTransparency(self) -> vrdTransparency: ...
    def isAsset(self) -> bool: ...
    def isComponent(self) -> bool: ...
    def isDisplacementActive(self) -> bool: ...
    def isEditable(self) -> bool: ...
    def isEditedAsset(self) -> bool: ...
    def isNull(self) -> bool: ...
    def isType(self, arg__1: object) -> bool: ...
    def isValid(self) -> bool: ...
    def setBaseColor(self, color: QVector3D) -> None: ...
    def setBaseColorSpectrum(self, value: Union[vrSpectrum, QVector3D]) -> None: ...
    def setInlineAllImageSequences(self, value: bool) -> List[vrdImage]: ...
    def setLocked(self, locked: bool) -> None: ...
    def setName(self, name: str) -> None: ...
    def setPaintType(self, type: vrdMetallicCarpaintMaterial.PaintType) -> None: ...
    def setPreviewScene(self, name: str) -> None: ...

class vrdMultiMarker:
    __doc__: NoneType
    __module__: str
    def __copy__(self) -> None: ...
    def __delattr__(self) -> None: ...
    def __dir__(self, /): ...
    def __eq__(self) -> None: ...
    def __format__(self, format_spec, /): ...
    def __ge__(self) -> None: ...
    def __getattribute__(self) -> None: ...
    def __getstate__(self, /): ...
    def __gt__(self) -> None: ...
    def __hash__(self) -> None: ...
    def __init__(self) -> None: ...
    def __init_subclass__(cls) -> None: ...
    def __le__(self) -> None: ...
    def __lshift__(self) -> None: ...
    def __lt__(self) -> None: ...
    def __ne__(self) -> None: ...
    def __new__(cls) -> None: ...
    def __reduce__(self, /): ...
    def __reduce_ex__(self, protocol, /): ...
    def __repr__(self) -> None: ...
    def __rlshift__(self) -> None: ...
    def __rrshift__(self) -> None: ...
    def __rshift__(self) -> None: ...
    def __setattr__(self) -> None: ...
    def __sizeof__(self, /): ...
    def __str__(self) -> None: ...
    def __subclasshook__(self) -> None: ...
    def asType(self, arg__1: object) -> object: ...
    def getConfidence(self) -> float: ...
    def getMarkers(self) -> List[vrdMarker]: ...
    def getName(self) -> str: ...
    def getNode(self) -> vrdNode: ...
    def getObjectId(self) -> int: ...
    def getSize(self) -> QVector3D: ...
    def getTimestamp(self) -> QDateTime: ...
    def getType(self) -> vrXRealityTypes.MarkerTypes: ...
    def isNull(self) -> bool: ...
    def isTracked(self) -> bool: ...
    def isType(self, arg__1: object) -> bool: ...

class vrdMultiMaterial:
    materials: getset_descriptor
    __doc__: NoneType
    __module__: str
    def __copy__(self) -> None: ...
    def __delattr__(self) -> None: ...
    def __dir__(self, /): ...
    def __eq__(self) -> None: ...
    def __format__(self, format_spec, /): ...
    def __ge__(self) -> None: ...
    def __getattribute__(self) -> None: ...
    def __getstate__(self, /): ...
    def __gt__(self) -> None: ...
    def __hash__(self) -> None: ...
    def __init__(self) -> None: ...
    def __init_subclass__(cls) -> None: ...
    def __le__(self) -> None: ...
    def __lshift__(self) -> None: ...
    def __lt__(self) -> None: ...
    def __ne__(self) -> None: ...
    def __new__(cls) -> None: ...
    def __reduce__(self, /): ...
    def __reduce_ex__(self, protocol, /): ...
    def __repr__(self) -> None: ...
    def __rlshift__(self) -> None: ...
    def __rrshift__(self) -> None: ...
    def __rshift__(self) -> None: ...
    def __setattr__(self) -> None: ...
    def __sizeof__(self, /): ...
    def __str__(self) -> None: ...
    def __subclasshook__(self) -> None: ...
    def asType(self, arg__1: object) -> object: ...
    def duplicate(self, name: str = '') -> vrdMaterial: ...
    def getIcon(self) -> QIcon: ...
    def getLocked(self) -> bool: ...
    def getMaterials(self) -> List[vrdMaterial]: ...
    def getMaterialsRef(self) -> vrdMaterialList: ...
    def getName(self) -> str: ...
    def getObjectId(self) -> int: ...
    def getPreview(self) -> QImage: ...
    def getPreviewScene(self) -> str: ...
    def getTextures(self) -> List[vrdTexture]: ...
    def isAsset(self) -> bool: ...
    def isComponent(self) -> bool: ...
    def isEditable(self) -> bool: ...
    def isEditedAsset(self) -> bool: ...
    def isNull(self) -> bool: ...
    def isType(self, arg__1: object) -> bool: ...
    def isValid(self) -> bool: ...
    def setInlineAllImageSequences(self, value: bool) -> List[vrdImage]: ...
    def setLocked(self, locked: bool) -> None: ...
    def setMaterials(self, materials: Sequence[vrdMaterial]) -> None: ...
    def setName(self, name: str) -> None: ...
    def setPreviewScene(self, name: str) -> None: ...

class vrdMultiPassMaterial:
    __doc__: NoneType
    __module__: str
    def __copy__(self) -> None: ...
    def __delattr__(self) -> None: ...
    def __dir__(self, /): ...
    def __eq__(self) -> None: ...
    def __format__(self, format_spec, /): ...
    def __ge__(self) -> None: ...
    def __getattribute__(self) -> None: ...
    def __getstate__(self, /): ...
    def __gt__(self) -> None: ...
    def __hash__(self) -> None: ...
    def __init__(self) -> None: ...
    def __init_subclass__(cls) -> None: ...
    def __le__(self) -> None: ...
    def __lshift__(self) -> None: ...
    def __lt__(self) -> None: ...
    def __ne__(self) -> None: ...
    def __new__(cls) -> None: ...
    def __reduce__(self, /): ...
    def __reduce_ex__(self, protocol, /): ...
    def __repr__(self) -> None: ...
    def __rlshift__(self) -> None: ...
    def __rrshift__(self) -> None: ...
    def __rshift__(self) -> None: ...
    def __setattr__(self) -> None: ...
    def __sizeof__(self, /): ...
    def __str__(self) -> None: ...
    def __subclasshook__(self) -> None: ...
    def asType(self, arg__1: object) -> object: ...
    def duplicate(self, name: str = '') -> vrdMaterial: ...
    def getIcon(self) -> QIcon: ...
    def getLocked(self) -> bool: ...
    def getMaterials(self) -> List[vrdMaterial]: ...
    def getMaterialsRef(self) -> vrdMaterialList: ...
    def getName(self) -> str: ...
    def getObjectId(self) -> int: ...
    def getPreview(self) -> QImage: ...
    def getPreviewScene(self) -> str: ...
    def getTextures(self) -> List[vrdTexture]: ...
    def isAsset(self) -> bool: ...
    def isComponent(self) -> bool: ...
    def isEditable(self) -> bool: ...
    def isEditedAsset(self) -> bool: ...
    def isNull(self) -> bool: ...
    def isType(self, arg__1: object) -> bool: ...
    def isValid(self) -> bool: ...
    def setInlineAllImageSequences(self, value: bool) -> List[vrdImage]: ...
    def setLocked(self, locked: bool) -> None: ...
    def setMaterials(self, materials: Sequence[vrdMaterial]) -> None: ...
    def setName(self, name: str) -> None: ...
    def setPreviewScene(self, name: str) -> None: ...

class vrdNPRSettings:
    __doc__: NoneType
    __module__: str
    warmColorProperty: str
    coolColorProperty: str
    alphaProperty: str
    betaProperty: str
    glossyColorProperty: str
    shininessProperty: str
    def __copy__(self) -> None: ...
    def __delattr__(self) -> None: ...
    def __dir__(self, /): ...
    def __eq__(self) -> None: ...
    def __format__(self, format_spec, /): ...
    def __ge__(self) -> None: ...
    def __getattribute__(self) -> None: ...
    def __getstate__(self, /): ...
    def __gt__(self) -> None: ...
    def __hash__(self) -> None: ...
    def __init__(self) -> None: ...
    def __init_subclass__(cls) -> None: ...
    def __le__(self) -> None: ...
    def __lshift__(self) -> None: ...
    def __lt__(self) -> None: ...
    def __ne__(self) -> None: ...
    def __new__(cls) -> None: ...
    def __reduce__(self, /): ...
    def __reduce_ex__(self, protocol, /): ...
    def __repr__(self) -> None: ...
    def __rlshift__(self) -> None: ...
    def __rrshift__(self) -> None: ...
    def __rshift__(self) -> None: ...
    def __setattr__(self) -> None: ...
    def __sizeof__(self, /): ...
    def __str__(self) -> None: ...
    def __subclasshook__(self) -> None: ...
    def asType(self, arg__1: object) -> object: ...
    def getAlpha(self) -> float: ...
    def getBeta(self) -> float: ...
    def getCoolColor(self) -> QVector3D: ...
    def getGlossyColor(self) -> QVector3D: ...
    def getObjectId(self) -> int: ...
    def getShininess(self) -> float: ...
    def getWarmColor(self) -> QVector3D: ...
    def isNull(self) -> bool: ...
    def isType(self, arg__1: object) -> bool: ...
    def isValid(self) -> bool: ...
    def setAlpha(self, value: float) -> None: ...
    def setBeta(self, value: float) -> None: ...
    def setCoolColor(self, value: QVector3D) -> None: ...
    def setGlossyColor(self, value: QVector3D) -> None: ...
    def setShininess(self, value: float) -> None: ...
    def setWarmColor(self, value: QVector3D) -> None: ...

class vrdNode:
    children: vrdNodeList
    __doc__: NoneType
    __module__: str
    nameProperty: str
    visibilityFlagProperty: str
    selectableFlagProperty: str
    lockedProperty: str
    visibleProperty: str
    boundingBoxProperty: str
    worldBoundingBoxProperty: str
    def __copy__(self) -> None: ...
    def __delattr__(self) -> None: ...
    def __dir__(self, /): ...
    def __eq__(self) -> None: ...
    def __format__(self, format_spec, /): ...
    def __ge__(self) -> None: ...
    def __getattribute__(self) -> None: ...
    def __getstate__(self, /): ...
    def __gt__(self) -> None: ...
    def __hash__(self) -> None: ...
    def __init__(self) -> None: ...
    def __init_subclass__(cls) -> None: ...
    def __le__(self) -> None: ...
    def __lshift__(self) -> None: ...
    def __lt__(self) -> None: ...
    def __ne__(self) -> None: ...
    def __new__(cls) -> None: ...
    def __reduce__(self, /): ...
    def __reduce_ex__(self, protocol, /): ...
    def __repr__(self) -> None: ...
    def __rlshift__(self) -> None: ...
    def __rrshift__(self) -> None: ...
    def __rshift__(self) -> None: ...
    def __setattr__(self) -> None: ...
    def __sizeof__(self, /): ...
    def __str__(self) -> None: ...
    def __subclasshook__(self) -> None: ...
    def applyMaterial(self, material: vrdMaterial) -> None: ...
    def asType(self, arg__1: object) -> object: ...
    def getBoundingBox(self) -> vrdBoundingBox: ...
    def getChild(self, index: int) -> vrdNode: ...
    def getChildCount(self) -> int: ...
    def getChildIndex(self, child: vrdNode) -> int: ...
    def getChildren(self) -> List[vrdNode]: ...
    def getChildrenRecursive(self) -> List[vrdNode]: ...
    def getChildrenRef(self) -> vrdNodeList: ...
    def getLocked(self) -> bool: ...
    def getMaterial(self) -> vrdMaterial: ...
    def getName(self) -> str: ...
    def getObjectId(self) -> int: ...
    def getOrCreateTransformNode(self) -> vrdNode: ...
    def getParent(self) -> vrdNode: ...
    def getPath(self) -> str: ...
    def getSelectableFlag(self) -> bool: ...
    def getSharedNodes(self) -> List[vrdNode]: ...
    def getSynchronizedNodes(self) -> List[vrdNode]: ...
    def getUniquePath(self) -> str: ...
    def getVisibilityFlag(self) -> bool: ...
    def getWorldBoundingBox(self) -> vrdBoundingBox: ...
    def getWorldTransform(self) -> QMatrix4x4: ...
    def hasParent(self, parent: vrdNode) -> bool: ...
    def isEditable(self) -> bool: ...
    def isEditedAsset(self) -> bool: ...
    def isGroup(self) -> bool: ...
    def isImplicitShared(self) -> bool: ...
    def isNull(self) -> bool: ...
    def isShared(self) -> bool: ...
    def isSharedWith(self, node: vrdNode) -> bool: ...
    def isSynchronized(self) -> bool: ...
    def isType(self, arg__1: object) -> bool: ...
    def isValid(self) -> bool: ...
    def isVisible(self) -> bool: ...
    def setLocked(self, locked: bool) -> None: ...
    def setName(self, name: str) -> None: ...
    def setSelectableFlag(self, selectable: bool) -> None: ...
    def setVisibilityFlag(self, visible: bool) -> None: ...

class vrdNodeInfo:
    __doc__: NoneType
    __module__: str
    nameProperty: str
    nodesProperty: str
    surfacesProperty: str
    trianglesProperty: str
    verticesProperty: str
    linesProperty: str
    pointsProperty: str
    textureMemoryProperty: str
    sourceReferencesProperty: str
    smartReferencesProperty: str
    boundingBoxProperty: str
    def __copy__(self) -> None: ...
    def __delattr__(self) -> None: ...
    def __dir__(self, /): ...
    def __eq__(self) -> None: ...
    def __format__(self, format_spec, /): ...
    def __ge__(self) -> None: ...
    def __getattribute__(self) -> None: ...
    def __getstate__(self, /): ...
    def __gt__(self) -> None: ...
    def __hash__(self) -> None: ...
    def __init__(self) -> None: ...
    def __init_subclass__(cls) -> None: ...
    def __le__(self) -> None: ...
    def __lt__(self) -> None: ...
    def __ne__(self) -> None: ...
    def __new__(cls) -> None: ...
    def __reduce__(self, /): ...
    def __reduce_ex__(self, protocol, /): ...
    def __repr__(self) -> None: ...
    def __setattr__(self) -> None: ...
    def __sizeof__(self, /): ...
    def __str__(self) -> None: ...
    def __subclasshook__(self) -> None: ...
    def getBoundingBox(self) -> vrdBoundingBox: ...
    def getLines(self) -> int: ...
    def getName(self) -> str: ...
    def getNodes(self) -> int: ...
    def getPoints(self) -> int: ...
    def getSmartReferences(self) -> int: ...
    def getSourceReferences(self) -> int: ...
    def getSurfaces(self) -> int: ...
    def getTextureMemory(self) -> int: ...
    def getTriangles(self) -> int: ...
    def getVertices(self) -> int: ...
    def setBoundingBox(self, value: vrdBoundingBox) -> None: ...
    def setLines(self, value: int) -> None: ...
    def setName(self, name: str) -> None: ...
    def setNodes(self, value: int) -> None: ...
    def setPoints(self, value: int) -> None: ...
    def setSmartReferences(self, value: int) -> None: ...
    def setSourceReferences(self, value: int) -> None: ...
    def setSurfaces(self, value: int) -> None: ...
    def setTextureMemory(self, value: int) -> None: ...
    def setTriangles(self, value: int) -> None: ...
    def setVertices(self, value: int) -> None: ...

class vrdNodeList:
    __doc__: NoneType
    __module__: str
    def __contains__(self) -> None: ...
    def __copy__(self) -> None: ...
    def __delattr__(self) -> None: ...
    def __dir__(self, /): ...
    def __eq__(self) -> None: ...
    def __format__(self, format_spec, /): ...
    def __ge__(self) -> None: ...
    def __getattribute__(self) -> None: ...
    def __getitem__(self) -> None: ...
    def __getstate__(self, /): ...
    def __gt__(self) -> None: ...
    def __hash__(self) -> None: ...
    def __init__(self) -> None: ...
    def __init_subclass__(cls) -> None: ...
    def __iter__(self) -> None: ...
    def __le__(self) -> None: ...
    def __len__(self) -> None: ...
    def __lshift__(self) -> None: ...
    def __lt__(self) -> None: ...
    def __ne__(self) -> None: ...
    def __new__(cls) -> None: ...
    def __reduce__(self, /): ...
    def __reduce_ex__(self, protocol, /): ...
    def __repr__(self) -> None: ...
    def __rlshift__(self) -> None: ...
    def __rrshift__(self) -> None: ...
    def __rshift__(self) -> None: ...
    def __setattr__(self) -> None: ...
    def __sizeof__(self, /): ...
    def __str__(self) -> None: ...
    def __subclasshook__(self) -> None: ...
    def append(self, value: List[vrdNode] | vrdNode) -> None: ...        
    def asType(self, arg__1: object) -> object: ...
    def at(self, i: int) -> vrdNode: ...
    def canInsert(self, value: vrdNode) -> bool: ...
    def clear(self) -> None: ...
    def contains(self, value: vrdNode) -> bool: ...
    def count(self, value: vrdNode) -> int: ...
    def data(self) -> List[vrdNode]: ...
    def find(self, name: str) -> vrdNode: ...
    def getObjectId(self) -> int: ...
    def index(self, value: vrdNode, start: int = 0, end: int = -1) -> int: ...
    def isNull(self) -> bool: ...
    def isType(self, arg__1: object) -> bool: ...
    def move(self, from_: int, to: int) -> bool: ...
    def remove(self, value: vrdNode) -> bool: ...
    def removeAll(self, value: vrdNode) -> int: ...
    def removeAt(self, i: int) -> bool: ...
    def size(self) -> int: ...

class vrdOCSMaterial:
    __doc__: NoneType
    __module__: str
    oCSBRDFFilenameProperty: str
    automaticReloadProperty: str
    exposureProperty: str
    clearcoatProperty: str
    incandescenceProperty: str
    def __copy__(self) -> None: ...
    def __delattr__(self) -> None: ...
    def __dir__(self, /): ...
    def __eq__(self) -> None: ...
    def __format__(self, format_spec, /): ...
    def __ge__(self) -> None: ...
    def __getattribute__(self) -> None: ...
    def __getstate__(self, /): ...
    def __gt__(self) -> None: ...
    def __hash__(self) -> None: ...
    def __init__(self) -> None: ...
    def __init_subclass__(cls) -> None: ...
    def __le__(self) -> None: ...
    def __lshift__(self) -> None: ...
    def __lt__(self) -> None: ...
    def __ne__(self) -> None: ...
    def __new__(cls) -> None: ...
    def __reduce__(self, /): ...
    def __reduce_ex__(self, protocol, /): ...
    def __repr__(self) -> None: ...
    def __rlshift__(self) -> None: ...
    def __rrshift__(self) -> None: ...
    def __rshift__(self) -> None: ...
    def __setattr__(self) -> None: ...
    def __sizeof__(self, /): ...
    def __str__(self) -> None: ...
    def __subclasshook__(self) -> None: ...
    def asType(self, arg__1: object) -> object: ...
    def duplicate(self, name: str = '') -> vrdMaterial: ...
    def getAnalytic(self) -> vrdAnalyticSettings: ...
    def getAutomaticReload(self) -> bool: ...
    def getClearcoat(self) -> vrdClearcoat: ...
    def getCommon(self) -> vrdBRDFCommonSettings: ...
    def getExposure(self) -> float: ...
    def getIcon(self) -> QIcon: ...
    def getIncandescence(self) -> vrdIncandescence: ...
    def getLocked(self) -> bool: ...
    def getNPR(self) -> vrdNPRSettings: ...
    def getName(self) -> str: ...
    def getOCSBRDFFilename(self) -> str: ...
    def getObjectId(self) -> int: ...
    def getPreview(self) -> QImage: ...
    def getPreviewScene(self) -> str: ...
    def getRaytracing(self) -> vrdMaterialRaytracingSettings: ...
    def getRoundedEdges(self) -> vrdRoundedEdges: ...
    def getTextures(self) -> List[vrdTexture]: ...
    def getTransparency(self) -> vrdTransparency: ...
    def isAsset(self) -> bool: ...
    def isComponent(self) -> bool: ...
    def isDisplacementActive(self) -> bool: ...
    def isEditable(self) -> bool: ...
    def isEditedAsset(self) -> bool: ...
    def isNull(self) -> bool: ...
    def isType(self, arg__1: object) -> bool: ...
    def isValid(self) -> bool: ...
    def setAutomaticReload(self, value: bool) -> None: ...
    def setExposure(self, exposure: float) -> None: ...
    def setInlineAllImageSequences(self, value: bool) -> List[vrdImage]: ...
    def setLocked(self, locked: bool) -> None: ...
    def setName(self, name: str) -> None: ...
    def setOCSBRDFFilename(self, filename: str) -> None: ...
    def setPreviewScene(self, name: str) -> None: ...

class vrdObject:
    __doc__: NoneType
    __module__: str
    def __copy__(self) -> None: ...
    def __delattr__(self) -> None: ...
    def __dir__(self, /): ...
    def __eq__(self) -> None: ...
    def __format__(self, format_spec, /): ...
    def __ge__(self) -> None: ...
    def __getattribute__(self) -> None: ...
    def __getstate__(self, /): ...
    def __gt__(self) -> None: ...
    def __hash__(self) -> None: ...
    def __init__(self) -> None: ...
    def __init_subclass__(cls) -> None: ...
    def __le__(self) -> None: ...
    def __lshift__(self) -> None: ...
    def __lt__(self) -> None: ...
    def __ne__(self) -> None: ...
    def __new__(cls) -> None: ...
    def __reduce__(self, /): ...
    def __reduce_ex__(self, protocol, /): ...
    def __repr__(self) -> None: ...
    def __rlshift__(self) -> None: ...
    def __rrshift__(self) -> None: ...
    def __rshift__(self) -> None: ...
    def __setattr__(self) -> None: ...
    def __sizeof__(self, /): ...
    def __str__(self) -> None: ...
    def __subclasshook__(self) -> None: ...
    def asType(self, arg__1: object) -> object: ...
    def getObjectId(self) -> int: ...
    def isNull(self) -> bool: ...
    def isType(self, arg__1: object) -> bool: ...

class vrdObjectList:
    __doc__: NoneType
    __module__: str
    def __contains__(self) -> None: ...
    def __copy__(self) -> None: ...
    def __delattr__(self) -> None: ...
    def __dir__(self, /): ...
    def __eq__(self) -> None: ...
    def __format__(self, format_spec, /): ...
    def __ge__(self) -> None: ...
    def __getattribute__(self) -> None: ...
    def __getitem__(self) -> None: ...
    def __getstate__(self, /): ...
    def __gt__(self) -> None: ...
    def __hash__(self) -> None: ...
    def __init__(self) -> None: ...
    def __init_subclass__(cls) -> None: ...
    def __iter__(self) -> None: ...
    def __le__(self) -> None: ...
    def __len__(self) -> None: ...
    def __lshift__(self) -> None: ...
    def __lt__(self) -> None: ...
    def __ne__(self) -> None: ...
    def __new__(cls) -> None: ...
    def __reduce__(self, /): ...
    def __reduce_ex__(self, protocol, /): ...
    def __repr__(self) -> None: ...
    def __rlshift__(self) -> None: ...
    def __rrshift__(self) -> None: ...
    def __rshift__(self) -> None: ...
    def __setattr__(self) -> None: ...
    def __sizeof__(self, /): ...
    def __str__(self) -> None: ...
    def __subclasshook__(self) -> None: ...
    def asType(self, arg__1: object) -> object: ...
    def getObjectId(self) -> int: ...
    def isNull(self) -> bool: ...
    def isType(self, arg__1: object) -> bool: ...

class vrdObjectSignal:
    __doc__: NoneType
    __module__: str
    staticMetaObject: QMetaObject
    def __delattr__(self) -> None: ...
    def __dir__(self, /): ...
    def __eq__(self) -> None: ...
    def __format__(self, format_spec, /): ...
    def __ge__(self) -> None: ...
    def __getattribute__(self) -> None: ...
    def __getstate__(self, /): ...
    def __gt__(self) -> None: ...
    def __hash__(self) -> None: ...
    def __init__(self) -> None: ...
    def __init_subclass__(cls) -> None: ...
    def __le__(self) -> None: ...
    def __lt__(self) -> None: ...
    def __ne__(self) -> None: ...
    def __new__(cls) -> None: ...
    def __reduce__(self, /): ...
    def __reduce_ex__(self, protocol, /): ...
    def __repr__(self) -> None: ...
    def __setattr__(self) -> None: ...
    def __sizeof__(self, /): ...
    def __str__(self) -> None: ...
    def __subclasshook__(self) -> None: ...
    def blockSignals(self, b: bool) -> bool: ...
    def childEvent(self, event: QChildEvent) -> None: ...
    def children(self) -> List[QObject]: ...
    def connect(self) -> None: ...
    def connectNotify(self, signal: QMetaMethod) -> None: ...
    def customEvent(self, event: QEvent) -> None: ...
    def deleteLater(self) -> None: ...
    def destroyed(self) -> None: ...
    def disconnect(self) -> None: ...
    def disconnectNotify(self, signal: QMetaMethod) -> None: ...
    def dumpObjectInfo(self) -> None: ...
    def dumpObjectTree(self) -> None: ...
    def dynamicPropertyNames(self) -> List[QByteArray]: ...
    def emit(self, arg__1: bytes, *args: None) -> bool: ...
    def event(self, event: QEvent) -> bool: ...
    def eventFilter(self, watched: QObject, event: QEvent) -> bool: ...
    def findChild(self, type: type, name: str = {}, options: Qt.FindChildOptions = Qt.FindChildOption.FindChildrenRecursively) -> object: ...
    def inherits(self, classname: bytes) -> bool: ...
    def installEventFilter(self, filterObj: QObject) -> None: ...
    def isSignalConnected(self, signal: QMetaMethod) -> bool: ...
    def isWidgetType(self) -> bool: ...
    def isWindowType(self) -> bool: ...
    def killTimer(self, id: int) -> None: ...
    def metaObject(self) -> QMetaObject: ...
    def moveToThread(self, thread: QThread) -> None: ...
    def objectName(self) -> str: ...
    def objectNameChanged(self) -> None: ...
    def parent(self) -> QObject: ...
    def property(self, name: str) -> Any: ...
    def receivers(self, signal: bytes) -> int: ...
    def removeEventFilter(self, obj: QObject) -> None: ...
    def sender(self) -> QObject: ...
    def senderSignalIndex(self) -> int: ...
    def setObjectName(self, name: str) -> None: ...
    def setParent(self, parent: QObject) -> None: ...
    def setProperty(self, name: str, value: Any) -> bool: ...
    def signalsBlocked(self) -> bool: ...
    def startTimer(self, interval: int, timerType: Qt.TimerType = Qt.TimerType.CoarseTimer) -> int: ...
    def thread(self) -> QThread: ...
    def timerEvent(self, event: QTimerEvent) -> None: ...
    def tr(self) -> None: ...

class vrdOpenGLInfo:
    __doc__: NoneType
    __module__: str
    def __copy__(self) -> None: ...
    def __delattr__(self) -> None: ...
    def __dir__(self, /): ...
    def __eq__(self) -> None: ...
    def __format__(self, format_spec, /): ...
    def __ge__(self) -> None: ...
    def __getattribute__(self) -> None: ...
    def __getstate__(self, /): ...
    def __gt__(self) -> None: ...
    def __hash__(self) -> None: ...
    def __init__(self) -> None: ...
    def __init_subclass__(cls) -> None: ...
    def __le__(self) -> None: ...
    def __lshift__(self) -> None: ...
    def __lt__(self) -> None: ...
    def __ne__(self) -> None: ...
    def __new__(cls) -> None: ...
    def __reduce__(self, /): ...
    def __reduce_ex__(self, protocol, /): ...
    def __repr__(self) -> None: ...
    def __rlshift__(self) -> None: ...
    def __rrshift__(self) -> None: ...
    def __rshift__(self) -> None: ...
    def __setattr__(self) -> None: ...
    def __sizeof__(self, /): ...
    def __str__(self) -> None: ...
    def __subclasshook__(self) -> None: ...
    def asType(self, arg__1: object) -> object: ...
    def getAvailableVideoMemorySize(self) -> int: ...
    def getDriverVersion(self) -> List[int]: ...
    def getExtensions(self) -> List[str]: ...
    def getGLSLVersion(self) -> int: ...
    def getMaxTextureSize(self) -> int: ...
    def getMaxTextureUnits(self) -> int: ...
    def getNumMulticastGPUs(self) -> int: ...
    def getObjectId(self) -> int: ...
    def getOpenGLRenderer(self) -> str: ...
    def getOpenGLVendor(self) -> str: ...
    def getTextureMaxAnisotropy(self) -> float: ...
    def getVersion(self) -> float: ...
    def getVideoMemorySize(self) -> int: ...
    def hasExtension(self, extension: str) -> bool: ...
    def hasFeature(self, feature: vrGPUTypes.OpenGLFeature) -> bool: ...
    def hasShadingRateImageSupport(self) -> bool: ...
    def isNull(self) -> bool: ...
    def isType(self, arg__1: object) -> bool: ...
    def isVendor(self, vendor: vrGPUTypes.OpenGLVendor) -> bool: ...

class vrdOrientationConstraintNode:
    __doc__: NoneType
    __module__: str
    def __copy__(self) -> None: ...
    def __delattr__(self) -> None: ...
    def __dir__(self, /): ...
    def __eq__(self) -> None: ...
    def __format__(self, format_spec, /): ...
    def __ge__(self) -> None: ...
    def __getattribute__(self) -> None: ...
    def __getstate__(self, /): ...
    def __gt__(self) -> None: ...
    def __hash__(self) -> None: ...
    def __init__(self) -> None: ...
    def __init_subclass__(cls) -> None: ...
    def __le__(self) -> None: ...
    def __lshift__(self) -> None: ...
    def __lt__(self) -> None: ...
    def __ne__(self) -> None: ...
    def __new__(cls) -> None: ...
    def __reduce__(self, /): ...
    def __reduce_ex__(self, protocol, /): ...
    def __repr__(self) -> None: ...
    def __rlshift__(self) -> None: ...
    def __rrshift__(self) -> None: ...
    def __rshift__(self) -> None: ...
    def __setattr__(self) -> None: ...
    def __sizeof__(self, /): ...
    def __str__(self) -> None: ...
    def __subclasshook__(self) -> None: ...
    def applyMaterial(self, material: vrdMaterial) -> None: ...
    def asType(self, arg__1: object) -> object: ...
    def clearConstrainedNode(self) -> None: ...
    def clearTargetNodes(self) -> None: ...
    def getBoundingBox(self) -> vrdBoundingBox: ...
    def getChild(self, index: int) -> vrdNode: ...
    def getChildCount(self) -> int: ...
    def getChildIndex(self, child: vrdNode) -> int: ...
    def getChildren(self) -> List[vrdNode]: ...
    def getChildrenRecursive(self) -> List[vrdNode]: ...
    def getChildrenRef(self) -> vrdNodeList: ...
    def getConstrainedNode(self) -> vrdNode: ...
    def getLocked(self) -> bool: ...
    def getMaterial(self) -> vrdMaterial: ...
    def getName(self) -> str: ...
    def getObjectId(self) -> int: ...
    def getOrCreateTransformNode(self) -> vrdNode: ...
    def getParent(self) -> vrdNode: ...
    def getPath(self) -> str: ...
    def getSelectableFlag(self) -> bool: ...
    def getSharedNodes(self) -> List[vrdNode]: ...
    def getSynchronizedNodes(self) -> List[vrdNode]: ...
    def getTargetNodeWeight(self, node: vrdNode) -> float: ...
    def getTargetNodes(self) -> List[vrdNode]: ...
    def getUniquePath(self) -> str: ...
    def getVisibilityFlag(self) -> bool: ...
    def getWorldBoundingBox(self) -> vrdBoundingBox: ...
    def getWorldTransform(self) -> QMatrix4x4: ...
    def hasParent(self, parent: vrdNode) -> bool: ...
    def isActive(self) -> bool: ...
    def isEditable(self) -> bool: ...
    def isEditedAsset(self) -> bool: ...
    def isGroup(self) -> bool: ...
    def isImplicitShared(self) -> bool: ...
    def isNull(self) -> bool: ...
    def isShared(self) -> bool: ...
    def isSharedWith(self, node: vrdNode) -> bool: ...
    def isSynchronized(self) -> bool: ...
    def isType(self, arg__1: object) -> bool: ...
    def isValid(self) -> bool: ...
    def isVisible(self) -> bool: ...
    def setActive(self, value: bool) -> None: ...
    def setConstrainedNode(self, node: vrdNode) -> None: ...
    def setLocked(self, locked: bool) -> None: ...
    def setName(self, name: str) -> None: ...
    def setSelectableFlag(self, selectable: bool) -> None: ...
    def setTargetNodeWeight(self, node: vrdNode, weight: float) -> None: ...
    def setTargetNodes(self, nodes: Sequence[vrdNode]) -> None: ...
    def setVisibilityFlag(self, visible: bool) -> None: ...

class vrdParentConstraintNode:
    __doc__: NoneType
    __module__: str
    maintainOffsetProperty: str
    def __copy__(self) -> None: ...
    def __delattr__(self) -> None: ...
    def __dir__(self, /): ...
    def __eq__(self) -> None: ...
    def __format__(self, format_spec, /): ...
    def __ge__(self) -> None: ...
    def __getattribute__(self) -> None: ...
    def __getstate__(self, /): ...
    def __gt__(self) -> None: ...
    def __hash__(self) -> None: ...
    def __init__(self) -> None: ...
    def __init_subclass__(cls) -> None: ...
    def __le__(self) -> None: ...
    def __lshift__(self) -> None: ...
    def __lt__(self) -> None: ...
    def __ne__(self) -> None: ...
    def __new__(cls) -> None: ...
    def __reduce__(self, /): ...
    def __reduce_ex__(self, protocol, /): ...
    def __repr__(self) -> None: ...
    def __rlshift__(self) -> None: ...
    def __rrshift__(self) -> None: ...
    def __rshift__(self) -> None: ...
    def __setattr__(self) -> None: ...
    def __sizeof__(self, /): ...
    def __str__(self) -> None: ...
    def __subclasshook__(self) -> None: ...
    def applyMaterial(self, material: vrdMaterial) -> None: ...
    def asType(self, arg__1: object) -> object: ...
    def clearConstrainedNode(self) -> None: ...
    def clearTargetNodes(self) -> None: ...
    def getBoundingBox(self) -> vrdBoundingBox: ...
    def getChild(self, index: int) -> vrdNode: ...
    def getChildCount(self) -> int: ...
    def getChildIndex(self, child: vrdNode) -> int: ...
    def getChildren(self) -> List[vrdNode]: ...
    def getChildrenRecursive(self) -> List[vrdNode]: ...
    def getChildrenRef(self) -> vrdNodeList: ...
    def getConstrainedNode(self) -> vrdNode: ...
    def getLocked(self) -> bool: ...
    def getMaintainOffset(self) -> bool: ...
    def getMaterial(self) -> vrdMaterial: ...
    def getName(self) -> str: ...
    def getObjectId(self) -> int: ...
    def getOrCreateTransformNode(self) -> vrdNode: ...
    def getParent(self) -> vrdNode: ...
    def getPath(self) -> str: ...
    def getSelectableFlag(self) -> bool: ...
    def getSharedNodes(self) -> List[vrdNode]: ...
    def getSynchronizedNodes(self) -> List[vrdNode]: ...
    def getTargetNodeWeight(self, node: vrdNode) -> float: ...
    def getTargetNodes(self) -> List[vrdNode]: ...
    def getUniquePath(self) -> str: ...
    def getVisibilityFlag(self) -> bool: ...
    def getWorldBoundingBox(self) -> vrdBoundingBox: ...
    def getWorldTransform(self) -> QMatrix4x4: ...
    def hasParent(self, parent: vrdNode) -> bool: ...
    def isActive(self) -> bool: ...
    def isEditable(self) -> bool: ...
    def isEditedAsset(self) -> bool: ...
    def isGroup(self) -> bool: ...
    def isImplicitShared(self) -> bool: ...
    def isNull(self) -> bool: ...
    def isShared(self) -> bool: ...
    def isSharedWith(self, node: vrdNode) -> bool: ...
    def isSynchronized(self) -> bool: ...
    def isType(self, arg__1: object) -> bool: ...
    def isValid(self) -> bool: ...
    def isVisible(self) -> bool: ...
    def setActive(self, value: bool) -> None: ...
    def setConstrainedNode(self, node: vrdNode) -> None: ...
    def setLocked(self, locked: bool) -> None: ...
    def setMaintainOffset(self, value: bool) -> None: ...
    def setName(self, name: str) -> None: ...
    def setSelectableFlag(self, selectable: bool) -> None: ...
    def setTargetNodeWeight(self, node: vrdNode, weight: float) -> None: ...
    def setTargetNodes(self, nodes: Sequence[vrdNode]) -> None: ...
    def setVisibilityFlag(self, visible: bool) -> None: ...

class vrdPerspectiveMatch:
    __doc__: NoneType
    __module__: str
    enabledProperty: str
    vanishingLinesTypeProperty: str
    magnifyFactorProperty: str
    rotationStepSizeProperty: str
    rotateLeftProperty: str
    rotateRightProperty: str
    xLine1Property: str
    xLine2Property: str
    yLine1Property: str
    yLine2Property: str
    zLine1Property: str
    zLine2Property: str
    defaultLinesProperty: str
    pivotProperty: str
    pivotFromNavigatorProperty: str
    def __copy__(self) -> None: ...
    def __delattr__(self) -> None: ...
    def __dir__(self, /): ...
    def __eq__(self) -> None: ...
    def __format__(self, format_spec, /): ...
    def __ge__(self) -> None: ...
    def __getattribute__(self) -> None: ...
    def __getstate__(self, /): ...
    def __gt__(self) -> None: ...
    def __hash__(self) -> None: ...
    def __init__(self) -> None: ...
    def __init_subclass__(cls) -> None: ...
    def __le__(self) -> None: ...
    def __lshift__(self) -> None: ...
    def __lt__(self) -> None: ...
    def __ne__(self) -> None: ...
    def __new__(cls) -> None: ...
    def __reduce__(self, /): ...
    def __reduce_ex__(self, protocol, /): ...
    def __repr__(self) -> None: ...
    def __rlshift__(self) -> None: ...
    def __rrshift__(self) -> None: ...
    def __rshift__(self) -> None: ...
    def __setattr__(self) -> None: ...
    def __sizeof__(self, /): ...
    def __str__(self) -> None: ...
    def __subclasshook__(self) -> None: ...
    def asType(self, arg__1: object) -> object: ...
    def doRotateLeft(self) -> None: ...
    def doRotateRight(self) -> None: ...
    def getEnabled(self) -> bool: ...
    def getMagnifyFactor(self) -> float: ...
    def getObjectId(self) -> int: ...
    def getPivot(self) -> QVector3D: ...
    def getRotationStepSize(self) -> float: ...
    def getVanishingLinesType(self) -> vrCameraTypes.VanishingLinesType: ...
    def isNull(self) -> bool: ...
    def isType(self, arg__1: object) -> bool: ...
    def isValid(self) -> bool: ...
    def setDefaultLines(self) -> None: ...
    def setEnabled(self, enabled: bool) -> None: ...
    def setMagnifyFactor(self, factor: float) -> None: ...
    def setPivot(self, pivot: QVector3D) -> None: ...
    def setPivotFromNavigator(self) -> None: ...
    def setRotationStepSize(self, deg: float) -> None: ...
    def setVanishingLinesType(self, type: vrCameraTypes.VanishingLinesType) -> None: ...

class vrdPhongMaterial:
    __doc__: NoneType
    __module__: str
    diffuseColorProperty: str
    diffuseColorSpectrumProperty: str
    glossyColorProperty: str
    glossyColorSpectrumProperty: str
    roughnessProperty: str
    diffuseBackscatteringProperty: str
    diffuseTextureProperty: str
    glossyTextureProperty: str
    roughnessTextureProperty: str
    bumpTextureProperty: str
    incandescenceProperty: str
    subsurfaceScatteringProperty: str
    displacementTextureProperty: str
    def __copy__(self) -> None: ...
    def __delattr__(self) -> None: ...
    def __dir__(self, /): ...
    def __eq__(self) -> None: ...
    def __format__(self, format_spec, /): ...
    def __ge__(self) -> None: ...
    def __getattribute__(self) -> None: ...
    def __getstate__(self, /): ...
    def __gt__(self) -> None: ...
    def __hash__(self) -> None: ...
    def __init__(self) -> None: ...
    def __init_subclass__(cls) -> None: ...
    def __le__(self) -> None: ...
    def __lshift__(self) -> None: ...
    def __lt__(self) -> None: ...
    def __ne__(self) -> None: ...
    def __new__(cls) -> None: ...
    def __reduce__(self, /): ...
    def __reduce_ex__(self, protocol, /): ...
    def __repr__(self) -> None: ...
    def __rlshift__(self) -> None: ...
    def __rrshift__(self) -> None: ...
    def __rshift__(self) -> None: ...
    def __setattr__(self) -> None: ...
    def __sizeof__(self, /): ...
    def __str__(self) -> None: ...
    def __subclasshook__(self) -> None: ...
    def asType(self, arg__1: object) -> object: ...
    def duplicate(self, name: str = '') -> vrdMaterial: ...
    def getAnalytic(self) -> vrdAnalyticSettings: ...
    def getBumpTexture(self) -> vrdBumpTexture: ...
    def getCommon(self) -> vrdBRDFCommonSettings: ...
    def getDiffuseBackscattering(self) -> float: ...
    def getDiffuseColor(self) -> QVector3D: ...
    def getDiffuseColorSpectrum(self) -> vrSpectrum: ...
    def getDiffuseTexture(self) -> vrdTexture: ...
    def getDisplacementTexture(self) -> vrdDisplacementTexture: ...
    def getGlossyColor(self) -> QVector3D: ...
    def getGlossyColorSpectrum(self) -> vrSpectrum: ...
    def getGlossyTexture(self) -> vrdTexture: ...
    def getIcon(self) -> QIcon: ...
    def getIncandescence(self) -> vrdIncandescence: ...
    def getLocked(self) -> bool: ...
    def getNPR(self) -> vrdNPRSettings: ...
    def getName(self) -> str: ...
    def getObjectId(self) -> int: ...
    def getPreview(self) -> QImage: ...
    def getPreviewScene(self) -> str: ...
    def getRaytracing(self) -> vrdMaterialRaytracingSettings: ...
    def getRoughness(self) -> float: ...
    def getRoughnessTexture(self) -> vrdRoughnessTexture: ...
    def getRoundedEdges(self) -> vrdRoundedEdges: ...
    def getSubsurfaceScattering(self) -> vrdSubsurfaceScattering: ...
    def getTextures(self) -> List[vrdTexture]: ...
    def getTransparency(self) -> vrdTransparency: ...
    def isAsset(self) -> bool: ...
    def isComponent(self) -> bool: ...
    def isDisplacementActive(self) -> bool: ...
    def isEditable(self) -> bool: ...
    def isEditedAsset(self) -> bool: ...
    def isNull(self) -> bool: ...
    def isType(self, arg__1: object) -> bool: ...
    def isValid(self) -> bool: ...
    def setDiffuseBackscattering(self, v: float) -> None: ...
    def setDiffuseColor(self, value: QVector3D) -> None: ...
    def setDiffuseColorSpectrum(self, value: Union[vrSpectrum, QVector3D]) -> None: ...
    def setGlossyColor(self, value: QVector3D) -> None: ...
    def setGlossyColorSpectrum(self, value: Union[vrSpectrum, QVector3D]) -> None: ...
    def setInlineAllImageSequences(self, value: bool) -> List[vrdImage]: ...
    def setLocked(self, locked: bool) -> None: ...
    def setName(self, name: str) -> None: ...
    def setPreviewScene(self, name: str) -> None: ...
    def setRoughness(self, roughness: float) -> None: ...

class vrdPlasticMaterial:
    __doc__: NoneType
    __module__: str
    diffuseColorProperty: str
    diffuseColorSpectrumProperty: str
    glossyColorProperty: str
    glossyColorSpectrumProperty: str
    roughnessProperty: str
    reflectivityProperty: str
    diffuseTextureProperty: str
    glossyTextureProperty: str
    clearcoatProperty: str
    roughnessTextureProperty: str
    bumpTextureProperty: str
    incandescenceProperty: str
    subsurfaceScatteringProperty: str
    displacementTextureProperty: str
    def __copy__(self) -> None: ...
    def __delattr__(self) -> None: ...
    def __dir__(self, /): ...
    def __eq__(self) -> None: ...
    def __format__(self, format_spec, /): ...
    def __ge__(self) -> None: ...
    def __getattribute__(self) -> None: ...
    def __getstate__(self, /): ...
    def __gt__(self) -> None: ...
    def __hash__(self) -> None: ...
    def __init__(self) -> None: ...
    def __init_subclass__(cls) -> None: ...
    def __le__(self) -> None: ...
    def __lshift__(self) -> None: ...
    def __lt__(self) -> None: ...
    def __ne__(self) -> None: ...
    def __new__(cls) -> None: ...
    def __reduce__(self, /): ...
    def __reduce_ex__(self, protocol, /): ...
    def __repr__(self) -> None: ...
    def __rlshift__(self) -> None: ...
    def __rrshift__(self) -> None: ...
    def __rshift__(self) -> None: ...
    def __setattr__(self) -> None: ...
    def __sizeof__(self, /): ...
    def __str__(self) -> None: ...
    def __subclasshook__(self) -> None: ...
    def asType(self, arg__1: object) -> object: ...
    def duplicate(self, name: str = '') -> vrdMaterial: ...
    def getAnalytic(self) -> vrdAnalyticSettings: ...
    def getBumpTexture(self) -> vrdBumpTexture: ...
    def getClearcoat(self) -> vrdClearcoat: ...
    def getCommon(self) -> vrdBRDFCommonSettings: ...
    def getDiffuseColor(self) -> QVector3D: ...
    def getDiffuseColorSpectrum(self) -> vrSpectrum: ...
    def getDiffuseTexture(self) -> vrdTexture: ...
    def getDisplacementTexture(self) -> vrdDisplacementTexture: ...
    def getGlossyColor(self) -> QVector3D: ...
    def getGlossyColorSpectrum(self) -> vrSpectrum: ...
    def getGlossyTexture(self) -> vrdTexture: ...
    def getIcon(self) -> QIcon: ...
    def getIncandescence(self) -> vrdIncandescence: ...
    def getLocked(self) -> bool: ...
    def getNPR(self) -> vrdNPRSettings: ...
    def getName(self) -> str: ...
    def getObjectId(self) -> int: ...
    def getPreview(self) -> QImage: ...
    def getPreviewScene(self) -> str: ...
    def getRaytracing(self) -> vrdMaterialRaytracingSettings: ...
    def getReflectivity(self) -> float: ...
    def getRoughness(self) -> float: ...
    def getRoughnessTexture(self) -> vrdRoughnessTexture: ...
    def getRoundedEdges(self) -> vrdRoundedEdges: ...
    def getSubsurfaceScattering(self) -> vrdSubsurfaceScattering: ...
    def getTextures(self) -> List[vrdTexture]: ...
    def getTransparency(self) -> vrdTransparency: ...
    def isAsset(self) -> bool: ...
    def isComponent(self) -> bool: ...
    def isDisplacementActive(self) -> bool: ...
    def isEditable(self) -> bool: ...
    def isEditedAsset(self) -> bool: ...
    def isNull(self) -> bool: ...
    def isType(self, arg__1: object) -> bool: ...
    def isValid(self) -> bool: ...
    def setDiffuseColor(self, value: QVector3D) -> None: ...
    def setDiffuseColorSpectrum(self, value: Union[vrSpectrum, QVector3D]) -> None: ...
    def setGlossyColor(self, value: QVector3D) -> None: ...
    def setGlossyColorSpectrum(self, value: Union[vrSpectrum, QVector3D]) -> None: ...
    def setInlineAllImageSequences(self, value: bool) -> List[vrdImage]: ...
    def setLocked(self, locked: bool) -> None: ...
    def setName(self, name: str) -> None: ...
    def setPreviewScene(self, name: str) -> None: ...
    def setReflectivity(self, v: float) -> None: ...
    def setRoughness(self, roughness: float) -> None: ...

class vrdPointLightNode:
    __doc__: NoneType
    __module__: str
    attenuationProperty: str
    textureProperty: str
    lightProfileProperty: str
    lensFlareEffectProperty: str
    def __copy__(self) -> None: ...
    def __delattr__(self) -> None: ...
    def __dir__(self, /): ...
    def __eq__(self) -> None: ...
    def __format__(self, format_spec, /): ...
    def __ge__(self) -> None: ...
    def __getattribute__(self) -> None: ...
    def __getstate__(self, /): ...
    def __gt__(self) -> None: ...
    def __hash__(self) -> None: ...
    def __init__(self) -> None: ...
    def __init_subclass__(cls) -> None: ...
    def __le__(self) -> None: ...
    def __lshift__(self) -> None: ...
    def __lt__(self) -> None: ...
    def __ne__(self) -> None: ...
    def __new__(cls) -> None: ...
    def __reduce__(self, /): ...
    def __reduce_ex__(self, protocol, /): ...
    def __repr__(self) -> None: ...
    def __rlshift__(self) -> None: ...
    def __rrshift__(self) -> None: ...
    def __rshift__(self) -> None: ...
    def __setattr__(self) -> None: ...
    def __sizeof__(self, /): ...
    def __str__(self) -> None: ...
    def __subclasshook__(self) -> None: ...
    def applyMaterial(self, material: vrdMaterial) -> None: ...
    def asType(self, arg__1: object) -> object: ...
    def captureTransformVariant(self, name: str) -> None: ...
    def deleteTransformVariant(self, variant: vrdTransformNodeVariant) -> None: ...
    def findTransformVariant(self, name: str) -> vrdTransformNodeVariant: ...
    def getAttenuation(self) -> vrLightTypes.Attenuation: ...
    def getBakeLayer(self) -> int: ...
    def getBoundingBox(self) -> vrdBoundingBox: ...
    def getCastShadowOnShadowMaterial(self) -> bool: ...
    def getChild(self, index: int) -> vrdNode: ...
    def getChildCount(self) -> int: ...
    def getChildIndex(self, child: vrdNode) -> int: ...
    def getChildren(self) -> List[vrdNode]: ...
    def getChildrenRecursive(self) -> List[vrdNode]: ...
    def getChildrenRef(self) -> vrdNodeList: ...
    def getDiffuseColor(self) -> QVector3D: ...
    def getDiffuseColorSpectrum(self) -> vrSpectrum: ...
    def getEulerRotationOrder(self) -> vrTransformTypes.EulerRotationOrder: ...
    def getGlossyColor(self) -> QVector3D: ...
    def getGlossyColorSpectrum(self) -> vrSpectrum: ...
    def getGroundShadowIntensity(self) -> float: ...
    def getIlluminateScene(self) -> bool: ...
    def getIlluminateShadowMaterial(self) -> bool: ...
    def getImportanceMultiplier(self) -> float: ...
    def getIntensity(self) -> float: ...
    def getIsPhysicallyBased(self) -> bool: ...
    def getLensFlareEffect(self) -> vrdLensFlareEffect: ...
    def getLightProfile(self) -> vrdLightProfile: ...
    def getLightTransform(self) -> vrdLightTransform: ...
    def getLightUnit(self) -> vrLightTypes.Unit: ...
    def getLocalLight(self) -> bool: ...
    def getLocked(self) -> bool: ...
    def getMaterial(self) -> vrdMaterial: ...
    def getMaterialShadowIntensity(self) -> float: ...
    def getModuleNode(self) -> vrdBaseLightNode: ...
    def getName(self) -> str: ...
    def getObjectId(self) -> int: ...
    def getOn(self) -> bool: ...
    def getOrCreateTransformNode(self) -> vrdNode: ...
    def getParent(self) -> vrdNode: ...
    def getPath(self) -> str: ...
    def getRotatePivot(self) -> QVector3D: ...
    def getRotatePivotTranslation(self) -> QVector3D: ...
    def getRotationAsEuler(self) -> QVector3D: ...
    def getRotationAsQuaternion(self) -> QQuaternion: ...
    def getRotationOrientationAsEuler(self) -> QVector3D: ...
    def getRotationOrientationAsQuaternion(self) -> QQuaternion: ...
    def getScale(self) -> QVector3D: ...
    def getScalePivot(self) -> QVector3D: ...
    def getScalePivotTranslation(self) -> QVector3D: ...
    def getSelectableFlag(self) -> bool: ...
    def getShadowMap(self) -> vrdShadowMap: ...
    def getSharedNodes(self) -> List[vrdNode]: ...
    def getShear(self) -> QVector3D: ...
    def getSynchronizedNodes(self) -> List[vrdNode]: ...
    def getTemperature(self) -> int: ...
    def getTexture(self) -> vrdLightTexture: ...
    def getTransform(self) -> QMatrix4x4: ...
    def getTransformVariants(self) -> List[vrdTransformNodeVariant]: ...
    def getTranslation(self) -> QVector3D: ...
    def getUniquePath(self) -> str: ...
    def getUseLightTemperature(self) -> bool: ...
    def getVisibilityFlag(self) -> bool: ...
    def getVisualizationScale(self) -> float: ...
    def getVisualizationVisible(self) -> bool: ...
    def getVolumeIlluminationMode(self) -> vrLightTypes.VolumeIlluminationMode: ...
    def getWorldBoundingBox(self) -> vrdBoundingBox: ...
    def getWorldRotatePivot(self) -> QVector3D: ...
    def getWorldScalePivot(self) -> QVector3D: ...
    def getWorldTransform(self) -> QMatrix4x4: ...
    def getWorldTranslation(self) -> QVector3D: ...
    def hasParent(self, parent: vrdNode) -> bool: ...
    def isEditable(self) -> bool: ...
    def isEditedAsset(self) -> bool: ...
    def isGroup(self) -> bool: ...
    def isImplicitShared(self) -> bool: ...
    def isNull(self) -> bool: ...
    def isShared(self) -> bool: ...
    def isSharedWith(self, node: vrdNode) -> bool: ...
    def isSynchronized(self) -> bool: ...
    def isType(self, arg__1: object) -> bool: ...
    def isValid(self) -> bool: ...
    def isVisible(self) -> bool: ...
    def resetTransformation(self) -> None: ...
    def setAttenuation(self, attenuation: vrLightTypes.Attenuation) -> None: ...
    def setBakeLayer(self, layer: int) -> None: ...
    def setCastShadowOnShadowMaterial(self, castShadow: bool) -> None: ...
    def setDiffuseColor(self, diffuseColor: QVector3D) -> None: ...
    def setDiffuseColorSpectrum(self, spectrum: Union[vrSpectrum, QVector3D]) -> None: ...
    def setEulerRotationOrder(self, rotationOrder: vrTransformTypes.EulerRotationOrder) -> None: ...
    def setGlossyColor(self, glossyColor: QVector3D) -> None: ...
    def setGlossyColorSpectrum(self, spectrum: Union[vrSpectrum, QVector3D]) -> None: ...
    def setGroundShadowIntensity(self, intensity: float) -> None: ...
    def setIlluminateScene(self, illuminateScene: bool) -> None: ...
    def setIlluminateShadowMaterial(self, illuminateShadosMeterial: bool) -> None: ...
    def setImportanceMultiplier(self, importanceMultiplier: float) -> None: ...
    def setIntensity(self, intensity: float) -> None: ...
    def setIsPhysicallyBased(self, on: bool) -> None: ...
    def setLightUnit(self, unit: vrLightTypes.Unit) -> None: ...
    def setLocalLight(self, isLocalLight: bool) -> None: ...
    def setLocked(self, locked: bool) -> None: ...
    def setMaterialShadowIntensity(self, intensity: float) -> None: ...
    def setName(self, name: str) -> None: ...
    def setOn(self, on: bool) -> None: ...
    def setRotatePivot(self, rotatePivot: QVector3D) -> None: ...
    def setRotatePivotTranslation(self, rotatePivotTranslation: QVector3D) -> None: ...
    def setRotationAsEuler(self, rotation: QVector3D) -> None: ...
    def setRotationAsQuaternion(self, rotation: QQuaternion) -> None: ...
    def setRotationOrientationAsEuler(self, rotationOrientation: QVector3D) -> None: ...
    def setRotationOrientationAsQuaternion(self, orientation: QQuaternion) -> None: ...
    def setScale(self, scale: QVector3D) -> None: ...
    def setScalePivot(self, scalePivot: QVector3D) -> None: ...
    def setScalePivotTranslation(self, scalePivotTranslation: QVector3D) -> None: ...
    def setSelectableFlag(self, selectable: bool) -> None: ...
    def setShear(self, shear: QVector3D) -> None: ...
    def setTemperature(self, kelvin: int) -> None: ...
    def setTransform(self, matrix: Union[QMatrix4x4, QTransform]) -> None: ...
    def setTranslation(self, translation: QVector3D) -> None: ...
    def setUseLightTemperature(self, use: bool) -> None: ...
    def setVisibilityFlag(self, visible: bool) -> None: ...
    def setVisualizationScale(self, scale: float) -> None: ...
    def setVisualizationVisible(self, showVisualization: bool) -> None: ...
    def setVolumeIlluminationMode(self, mode: vrLightTypes.VolumeIlluminationMode) -> None: ...
    def setWorldRotatePivot(self, rotatePivot: QVector3D) -> None: ...
    def setWorldScalePivot(self, scalePivot: QVector3D) -> None: ...
    def setWorldTransform(self, matrix: Union[QMatrix4x4, QTransform]) -> None: ...
    def setWorldTranslation(self, translation: QVector3D) -> None: ...

class vrdPolygonChunk:
    __doc__: NoneType
    __module__: str
    cullFaceProperty: str
    frontFaceProperty: str
    frontModeProperty: str
    backModeProperty: str
    smoothingProperty: str
    offsetFillProperty: str
    offsetPointProperty: str
    offsetLineProperty: str
    offsetFactorProperty: str
    offsetBiasProperty: str
    def CullFace(self) -> None: ...
    def FillMode(self) -> None: ...
    def FrontFace(self) -> None: ...
    def __copy__(self) -> None: ...
    def __delattr__(self) -> None: ...
    def __dir__(self, /): ...
    def __eq__(self) -> None: ...
    def __format__(self, format_spec, /): ...
    def __ge__(self) -> None: ...
    def __getattribute__(self) -> None: ...
    def __getstate__(self, /): ...
    def __gt__(self) -> None: ...
    def __hash__(self) -> None: ...
    def __init__(self) -> None: ...
    def __init_subclass__(cls) -> None: ...
    def __le__(self) -> None: ...
    def __lshift__(self) -> None: ...
    def __lt__(self) -> None: ...
    def __ne__(self) -> None: ...
    def __new__(cls) -> None: ...
    def __reduce__(self, /): ...
    def __reduce_ex__(self, protocol, /): ...
    def __repr__(self) -> None: ...
    def __rlshift__(self) -> None: ...
    def __rrshift__(self) -> None: ...
    def __rshift__(self) -> None: ...
    def __setattr__(self) -> None: ...
    def __sizeof__(self, /): ...
    def __str__(self) -> None: ...
    def __subclasshook__(self) -> None: ...
    def asType(self, arg__1: object) -> object: ...
    def getBackMode(self) -> vrdPolygonChunk.FillMode: ...
    def getCullFace(self) -> vrdPolygonChunk.CullFace: ...
    def getFrontFace(self) -> vrdPolygonChunk.FrontFace: ...
    def getFrontMode(self) -> vrdPolygonChunk.FillMode: ...
    def getObjectId(self) -> int: ...
    def getOffsetBias(self) -> float: ...
    def getOffsetFactor(self) -> float: ...
    def getOffsetFill(self) -> bool: ...
    def getOffsetLine(self) -> bool: ...
    def getOffsetPoint(self) -> bool: ...
    def getSmoothing(self) -> bool: ...
    def isNull(self) -> bool: ...
    def isType(self, arg__1: object) -> bool: ...
    def isValid(self) -> bool: ...
    def setBackMode(self, fillMode: vrdPolygonChunk.FillMode) -> None: ...
    def setCullFace(self, cullFace: vrdPolygonChunk.CullFace) -> None: ...
    def setFrontFace(self, frontFace: vrdPolygonChunk.FrontFace) -> None: ...
    def setFrontMode(self, fillMode: vrdPolygonChunk.FillMode) -> None: ...
    def setOffsetBias(self, offsetBias: float) -> None: ...
    def setOffsetFactor(self, offsetFactor: float) -> None: ...
    def setOffsetFill(self, offsetFill: bool) -> None: ...
    def setOffsetLine(self, offsetLine: bool) -> None: ...
    def setOffsetPoint(self, offsetPoint: bool) -> None: ...
    def setSmoothing(self, smoothing: bool) -> None: ...

class vrdPositionConstraintNode:
    __doc__: NoneType
    __module__: str
    maintainOffsetProperty: str
    def __copy__(self) -> None: ...
    def __delattr__(self) -> None: ...
    def __dir__(self, /): ...
    def __eq__(self) -> None: ...
    def __format__(self, format_spec, /): ...
    def __ge__(self) -> None: ...
    def __getattribute__(self) -> None: ...
    def __getstate__(self, /): ...
    def __gt__(self) -> None: ...
    def __hash__(self) -> None: ...
    def __init__(self) -> None: ...
    def __init_subclass__(cls) -> None: ...
    def __le__(self) -> None: ...
    def __lshift__(self) -> None: ...
    def __lt__(self) -> None: ...
    def __ne__(self) -> None: ...
    def __new__(cls) -> None: ...
    def __reduce__(self, /): ...
    def __reduce_ex__(self, protocol, /): ...
    def __repr__(self) -> None: ...
    def __rlshift__(self) -> None: ...
    def __rrshift__(self) -> None: ...
    def __rshift__(self) -> None: ...
    def __setattr__(self) -> None: ...
    def __sizeof__(self, /): ...
    def __str__(self) -> None: ...
    def __subclasshook__(self) -> None: ...
    def applyMaterial(self, material: vrdMaterial) -> None: ...
    def asType(self, arg__1: object) -> object: ...
    def clearConstrainedNode(self) -> None: ...
    def clearTargetNodes(self) -> None: ...
    def getBoundingBox(self) -> vrdBoundingBox: ...
    def getChild(self, index: int) -> vrdNode: ...
    def getChildCount(self) -> int: ...
    def getChildIndex(self, child: vrdNode) -> int: ...
    def getChildren(self) -> List[vrdNode]: ...
    def getChildrenRecursive(self) -> List[vrdNode]: ...
    def getChildrenRef(self) -> vrdNodeList: ...
    def getConstrainedNode(self) -> vrdNode: ...
    def getLocked(self) -> bool: ...
    def getMaintainOffset(self) -> bool: ...
    def getMaterial(self) -> vrdMaterial: ...
    def getName(self) -> str: ...
    def getObjectId(self) -> int: ...
    def getOrCreateTransformNode(self) -> vrdNode: ...
    def getParent(self) -> vrdNode: ...
    def getPath(self) -> str: ...
    def getSelectableFlag(self) -> bool: ...
    def getSharedNodes(self) -> List[vrdNode]: ...
    def getSynchronizedNodes(self) -> List[vrdNode]: ...
    def getTargetNodeWeight(self, node: vrdNode) -> float: ...
    def getTargetNodes(self) -> List[vrdNode]: ...
    def getUniquePath(self) -> str: ...
    def getVisibilityFlag(self) -> bool: ...
    def getWorldBoundingBox(self) -> vrdBoundingBox: ...
    def getWorldTransform(self) -> QMatrix4x4: ...
    def hasParent(self, parent: vrdNode) -> bool: ...
    def isActive(self) -> bool: ...
    def isEditable(self) -> bool: ...
    def isEditedAsset(self) -> bool: ...
    def isGroup(self) -> bool: ...
    def isImplicitShared(self) -> bool: ...
    def isNull(self) -> bool: ...
    def isShared(self) -> bool: ...
    def isSharedWith(self, node: vrdNode) -> bool: ...
    def isSynchronized(self) -> bool: ...
    def isType(self, arg__1: object) -> bool: ...
    def isValid(self) -> bool: ...
    def isVisible(self) -> bool: ...
    def setActive(self, value: bool) -> None: ...
    def setConstrainedNode(self, node: vrdNode) -> None: ...
    def setLocked(self, locked: bool) -> None: ...
    def setMaintainOffset(self, value: bool) -> None: ...
    def setName(self, name: str) -> None: ...
    def setSelectableFlag(self, selectable: bool) -> None: ...
    def setTargetNodeWeight(self, node: vrdNode, weight: float) -> None: ...
    def setTargetNodes(self, nodes: Sequence[vrdNode]) -> None: ...
    def setVisibilityFlag(self, visible: bool) -> None: ...

class vrdProjectMergeSettings:
    __doc__: NoneType
    __module__: str
    importVredVariantsProperty: str
    importVredTouchSensorsProperty: str
    importVredSequencesProperty: str
    importVredAnimationCurvesProperty: str
    importVredAnimationClipsProperty: str
    importVredAnnotationsProperty: str
    mergeVredMaterialsProperty: str
    environmentImportOptionProperty: str
    def __copy__(self) -> None: ...
    def __delattr__(self) -> None: ...
    def __dir__(self, /): ...
    def __eq__(self) -> None: ...
    def __format__(self, format_spec, /): ...
    def __ge__(self) -> None: ...
    def __getattribute__(self) -> None: ...
    def __getstate__(self, /): ...
    def __gt__(self) -> None: ...
    def __hash__(self) -> None: ...
    def __init__(self) -> None: ...
    def __init_subclass__(cls) -> None: ...
    def __le__(self) -> None: ...
    def __lt__(self) -> None: ...
    def __ne__(self) -> None: ...
    def __new__(cls) -> None: ...
    def __reduce__(self, /): ...
    def __reduce_ex__(self, protocol, /): ...
    def __repr__(self) -> None: ...
    def __setattr__(self) -> None: ...
    def __sizeof__(self, /): ...
    def __str__(self) -> None: ...
    def __subclasshook__(self) -> None: ...
    def getEnvironmentImportOption(self) -> int: ...
    def getImportVredAnimationClips(self) -> bool: ...
    def getImportVredAnimationCurves(self) -> bool: ...
    def getImportVredAnnotations(self) -> bool: ...
    def getImportVredSequences(self) -> bool: ...
    def getImportVredTouchSensors(self) -> bool: ...
    def getImportVredVariants(self) -> bool: ...
    def getMergeVredMaterials(self) -> bool: ...
    def setEnvironmentImportOption(self, value: int) -> None: ...
    def setImportVredAnimationClips(self, value: bool) -> None: ...
    def setImportVredAnimationCurves(self, value: bool) -> None: ...
    def setImportVredAnnotations(self, value: bool) -> None: ...
    def setImportVredSequences(self, value: bool) -> None: ...
    def setImportVredTouchSensors(self, value: bool) -> None: ...
    def setImportVredVariants(self, value: bool) -> None: ...
    def setMergeVredMaterials(self, value: bool) -> None: ...

class vrdRayFile:
    __doc__: NoneType
    __module__: str
    fileNameProperty: str
    useLightSpectrumProperty: str
    useRandomSamplingProperty: str
    usePhotonsForDirectLightingProperty: str
    visualizationRayCountProperty: str
    visualizationRayLengthProperty: str
    emitterConeAngleProperty: str
    directEvaluationConeAngleProperty: str
    directEvaluationRadiusProperty: str
    directEvaluationOffsetProperty: str
    rayFileInfoProperty: str
    toProperty: str
    def __copy__(self) -> None: ...
    def __delattr__(self) -> None: ...
    def __dir__(self, /): ...
    def __eq__(self) -> None: ...
    def __format__(self, format_spec, /): ...
    def __ge__(self) -> None: ...
    def __getattribute__(self) -> None: ...
    def __getstate__(self, /): ...
    def __gt__(self) -> None: ...
    def __hash__(self) -> None: ...
    def __init__(self) -> None: ...
    def __init_subclass__(cls) -> None: ...
    def __le__(self) -> None: ...
    def __lshift__(self) -> None: ...
    def __lt__(self) -> None: ...
    def __ne__(self) -> None: ...
    def __new__(cls) -> None: ...
    def __reduce__(self, /): ...
    def __reduce_ex__(self, protocol, /): ...
    def __repr__(self) -> None: ...
    def __rlshift__(self) -> None: ...
    def __rrshift__(self) -> None: ...
    def __rshift__(self) -> None: ...
    def __setattr__(self) -> None: ...
    def __sizeof__(self, /): ...
    def __str__(self) -> None: ...
    def __subclasshook__(self) -> None: ...
    def asType(self, arg__1: object) -> object: ...
    def clear(self) -> None: ...
    def getDirectEvaluationConeAngle(self) -> float: ...
    def getDirectEvaluationOffset(self) -> float: ...
    def getDirectEvaluationRadius(self) -> float: ...
    def getEmitterConeAngle(self) -> float: ...
    def getFileName(self) -> str: ...
    def getObjectId(self) -> int: ...
    def getRayFileInfo(self) -> vrdRayFileInfo: ...
    def getUseLightSpectrum(self) -> bool: ...
    def getUsePhotonsForDirectLighting(self) -> bool: ...
    def getUseRandomSampling(self) -> bool: ...
    def getVisualizationRayCount(self) -> int: ...
    def getVisualizationRayLength(self) -> float: ...
    def isNull(self) -> bool: ...
    def isType(self, arg__1: object) -> bool: ...
    def isValid(self) -> bool: ...
    def load(self, filename: str) -> None: ...
    def reload(self) -> None: ...
    def setDirectEvaluationConeAngle(self, angle: float) -> None: ...
    def setDirectEvaluationOffset(self, offset: float) -> None: ...
    def setDirectEvaluationRadius(self, radius: float) -> None: ...
    def setEmitterConeAngle(self, angle: float) -> None: ...
    def setFileName(self, fileName: str) -> None: ...
    def setTo(self, other: vrdRayFile) -> None: ...
    def setUseLightSpectrum(self, use: bool) -> None: ...
    def setUsePhotonsForDirectLighting(self, use: bool) -> None: ...
    def setUseRandomSampling(self, use: bool) -> None: ...
    def setVisualizationRayCount(self, count: int) -> None: ...
    def setVisualizationRayLength(self, length: float) -> None: ...

class vrdRayFileInfo:
    __doc__: NoneType
    __module__: str
    def __copy__(self) -> None: ...
    def __delattr__(self) -> None: ...
    def __dir__(self, /): ...
    def __eq__(self) -> None: ...
    def __format__(self, format_spec, /): ...
    def __ge__(self) -> None: ...
    def __getattribute__(self) -> None: ...
    def __getstate__(self, /): ...
    def __gt__(self) -> None: ...
    def __hash__(self) -> None: ...
    def __init__(self) -> None: ...
    def __init_subclass__(cls) -> None: ...
    def __le__(self) -> None: ...
    def __lt__(self) -> None: ...
    def __ne__(self) -> None: ...
    def __new__(cls) -> None: ...
    def __reduce__(self, /): ...
    def __reduce_ex__(self, protocol, /): ...
    def __repr__(self) -> None: ...
    def __setattr__(self) -> None: ...
    def __sizeof__(self, /): ...
    def __str__(self) -> None: ...
    def __subclasshook__(self) -> None: ...
    def getLuminousPower(self) -> float: ...
    def getNumberOfRays(self) -> int: ...
    def getScalingFactor(self) -> float: ...
    def getSpectralInformationString(self) -> str: ...

class vrdRayIntersection:
    __doc__: NoneType
    __module__: str
    def __copy__(self) -> None: ...
    def __delattr__(self) -> None: ...
    def __dir__(self, /): ...
    def __eq__(self) -> None: ...
    def __format__(self, format_spec, /): ...
    def __ge__(self) -> None: ...
    def __getattribute__(self) -> None: ...
    def __getstate__(self, /): ...
    def __gt__(self) -> None: ...
    def __hash__(self) -> None: ...
    def __init__(self) -> None: ...
    def __init_subclass__(cls) -> None: ...
    def __le__(self) -> None: ...
    def __lt__(self) -> None: ...
    def __ne__(self) -> None: ...
    def __new__(cls) -> None: ...
    def __reduce__(self, /): ...
    def __reduce_ex__(self, protocol, /): ...
    def __repr__(self) -> None: ...
    def __setattr__(self) -> None: ...
    def __sizeof__(self, /): ...
    def __str__(self) -> None: ...
    def __subclasshook__(self) -> None: ...
    def getNode(self) -> vrdNode: ...
    def getNormal(self) -> QVector3D: ...
    def getOrigin(self) -> QVector3D: ...
    def getPoint(self) -> QVector3D: ...
    def getUV(self) -> QVector2D: ...
    def hasHit(self) -> bool: ...
    def setHit(self, value: bool) -> None: ...
    def setNode(self, value: vrdNode) -> None: ...
    def setNormal(self, value: QVector3D) -> None: ...
    def setOrigin(self, value: QVector3D) -> None: ...
    def setPoint(self, value: QVector3D) -> None: ...
    def setUV(self, value: QVector2D) -> None: ...

class vrdRayLightNode:
    __doc__: NoneType
    __module__: str
    rayFileProperty: str
    def __copy__(self) -> None: ...
    def __delattr__(self) -> None: ...
    def __dir__(self, /): ...
    def __eq__(self) -> None: ...
    def __format__(self, format_spec, /): ...
    def __ge__(self) -> None: ...
    def __getattribute__(self) -> None: ...
    def __getstate__(self, /): ...
    def __gt__(self) -> None: ...
    def __hash__(self) -> None: ...
    def __init__(self) -> None: ...
    def __init_subclass__(cls) -> None: ...
    def __le__(self) -> None: ...
    def __lshift__(self) -> None: ...
    def __lt__(self) -> None: ...
    def __ne__(self) -> None: ...
    def __new__(cls) -> None: ...
    def __reduce__(self, /): ...
    def __reduce_ex__(self, protocol, /): ...
    def __repr__(self) -> None: ...
    def __rlshift__(self) -> None: ...
    def __rrshift__(self) -> None: ...
    def __rshift__(self) -> None: ...
    def __setattr__(self) -> None: ...
    def __sizeof__(self, /): ...
    def __str__(self) -> None: ...
    def __subclasshook__(self) -> None: ...
    def applyMaterial(self, material: vrdMaterial) -> None: ...
    def asType(self, arg__1: object) -> object: ...
    def captureTransformVariant(self, name: str) -> None: ...
    def deleteTransformVariant(self, variant: vrdTransformNodeVariant) -> None: ...
    def findTransformVariant(self, name: str) -> vrdTransformNodeVariant: ...
    def getBakeLayer(self) -> int: ...
    def getBoundingBox(self) -> vrdBoundingBox: ...
    def getCastShadowOnShadowMaterial(self) -> bool: ...
    def getChild(self, index: int) -> vrdNode: ...
    def getChildCount(self) -> int: ...
    def getChildIndex(self, child: vrdNode) -> int: ...
    def getChildren(self) -> List[vrdNode]: ...
    def getChildrenRecursive(self) -> List[vrdNode]: ...
    def getChildrenRef(self) -> vrdNodeList: ...
    def getDiffuseColor(self) -> QVector3D: ...
    def getDiffuseColorSpectrum(self) -> vrSpectrum: ...
    def getEulerRotationOrder(self) -> vrTransformTypes.EulerRotationOrder: ...
    def getGlossyColor(self) -> QVector3D: ...
    def getGlossyColorSpectrum(self) -> vrSpectrum: ...
    def getGroundShadowIntensity(self) -> float: ...
    def getIlluminateShadowMaterial(self) -> bool: ...
    def getImportanceMultiplier(self) -> float: ...
    def getIntensity(self) -> float: ...
    def getIsPhysicallyBased(self) -> bool: ...
    def getLightTransform(self) -> vrdLightTransform: ...
    def getLightUnit(self) -> vrLightTypes.Unit: ...
    def getLocked(self) -> bool: ...
    def getMaterial(self) -> vrdMaterial: ...
    def getMaterialShadowIntensity(self) -> float: ...
    def getModuleNode(self) -> vrdBaseLightNode: ...
    def getName(self) -> str: ...
    def getObjectId(self) -> int: ...
    def getOn(self) -> bool: ...
    def getOrCreateTransformNode(self) -> vrdNode: ...
    def getParent(self) -> vrdNode: ...
    def getPath(self) -> str: ...
    def getRayFile(self) -> vrdRayFile: ...
    def getRotatePivot(self) -> QVector3D: ...
    def getRotatePivotTranslation(self) -> QVector3D: ...
    def getRotationAsEuler(self) -> QVector3D: ...
    def getRotationAsQuaternion(self) -> QQuaternion: ...
    def getRotationOrientationAsEuler(self) -> QVector3D: ...
    def getRotationOrientationAsQuaternion(self) -> QQuaternion: ...
    def getScale(self) -> QVector3D: ...
    def getScalePivot(self) -> QVector3D: ...
    def getScalePivotTranslation(self) -> QVector3D: ...
    def getSelectableFlag(self) -> bool: ...
    def getSharedNodes(self) -> List[vrdNode]: ...
    def getShear(self) -> QVector3D: ...
    def getSynchronizedNodes(self) -> List[vrdNode]: ...
    def getTemperature(self) -> int: ...
    def getTransform(self) -> QMatrix4x4: ...
    def getTransformVariants(self) -> List[vrdTransformNodeVariant]: ...
    def getTranslation(self) -> QVector3D: ...
    def getUniquePath(self) -> str: ...
    def getUseLightTemperature(self) -> bool: ...
    def getVisibilityFlag(self) -> bool: ...
    def getVisualizationVisible(self) -> bool: ...
    def getVolumeIlluminationMode(self) -> vrLightTypes.VolumeIlluminationMode: ...
    def getWorldBoundingBox(self) -> vrdBoundingBox: ...
    def getWorldRotatePivot(self) -> QVector3D: ...
    def getWorldScalePivot(self) -> QVector3D: ...
    def getWorldTransform(self) -> QMatrix4x4: ...
    def getWorldTranslation(self) -> QVector3D: ...
    def hasParent(self, parent: vrdNode) -> bool: ...
    def isEditable(self) -> bool: ...
    def isEditedAsset(self) -> bool: ...
    def isGroup(self) -> bool: ...
    def isImplicitShared(self) -> bool: ...
    def isNull(self) -> bool: ...
    def isShared(self) -> bool: ...
    def isSharedWith(self, node: vrdNode) -> bool: ...
    def isSynchronized(self) -> bool: ...
    def isType(self, arg__1: object) -> bool: ...
    def isValid(self) -> bool: ...
    def isVisible(self) -> bool: ...
    def resetTransformation(self) -> None: ...
    def setBakeLayer(self, layer: int) -> None: ...
    def setCastShadowOnShadowMaterial(self, castShadow: bool) -> None: ...
    def setDiffuseColor(self, diffuseColor: QVector3D) -> None: ...
    def setDiffuseColorSpectrum(self, spectrum: Union[vrSpectrum, QVector3D]) -> None: ...
    def setEulerRotationOrder(self, rotationOrder: vrTransformTypes.EulerRotationOrder) -> None: ...
    def setGlossyColor(self, glossyColor: QVector3D) -> None: ...
    def setGlossyColorSpectrum(self, spectrum: Union[vrSpectrum, QVector3D]) -> None: ...
    def setGroundShadowIntensity(self, intensity: float) -> None: ...
    def setIlluminateShadowMaterial(self, illuminateShadosMeterial: bool) -> None: ...
    def setImportanceMultiplier(self, importanceMultiplier: float) -> None: ...
    def setIntensity(self, intensity: float) -> None: ...
    def setIsPhysicallyBased(self, on: bool) -> None: ...
    def setLightUnit(self, unit: vrLightTypes.Unit) -> None: ...
    def setLocked(self, locked: bool) -> None: ...
    def setMaterialShadowIntensity(self, intensity: float) -> None: ...
    def setName(self, name: str) -> None: ...
    def setOn(self, on: bool) -> None: ...
    def setRotatePivot(self, rotatePivot: QVector3D) -> None: ...
    def setRotatePivotTranslation(self, rotatePivotTranslation: QVector3D) -> None: ...
    def setRotationAsEuler(self, rotation: QVector3D) -> None: ...
    def setRotationAsQuaternion(self, rotation: QQuaternion) -> None: ...
    def setRotationOrientationAsEuler(self, rotationOrientation: QVector3D) -> None: ...
    def setRotationOrientationAsQuaternion(self, orientation: QQuaternion) -> None: ...
    def setScale(self, scale: QVector3D) -> None: ...
    def setScalePivot(self, scalePivot: QVector3D) -> None: ...
    def setScalePivotTranslation(self, scalePivotTranslation: QVector3D) -> None: ...
    def setSelectableFlag(self, selectable: bool) -> None: ...
    def setShear(self, shear: QVector3D) -> None: ...
    def setTemperature(self, kelvin: int) -> None: ...
    def setTransform(self, matrix: Union[QMatrix4x4, QTransform]) -> None: ...
    def setTranslation(self, translation: QVector3D) -> None: ...
    def setUseLightTemperature(self, use: bool) -> None: ...
    def setVisibilityFlag(self, visible: bool) -> None: ...
    def setVisualizationVisible(self, showVisualization: bool) -> None: ...
    def setVolumeIlluminationMode(self, mode: vrLightTypes.VolumeIlluminationMode) -> None: ...
    def setWorldRotatePivot(self, rotatePivot: QVector3D) -> None: ...
    def setWorldScalePivot(self, scalePivot: QVector3D) -> None: ...
    def setWorldTransform(self, matrix: Union[QMatrix4x4, QTransform]) -> None: ...
    def setWorldTranslation(self, translation: QVector3D) -> None: ...

class vrdRaytracingInfo:
    __doc__: NoneType
    __module__: str
    def __copy__(self) -> None: ...
    def __delattr__(self) -> None: ...
    def __dir__(self, /): ...
    def __eq__(self) -> None: ...
    def __format__(self, format_spec, /): ...
    def __ge__(self) -> None: ...
    def __getattribute__(self) -> None: ...
    def __getstate__(self, /): ...
    def __gt__(self) -> None: ...
    def __hash__(self) -> None: ...
    def __init__(self) -> None: ...
    def __init_subclass__(cls) -> None: ...
    def __le__(self) -> None: ...
    def __lshift__(self) -> None: ...
    def __lt__(self) -> None: ...
    def __ne__(self) -> None: ...
    def __new__(cls) -> None: ...
    def __reduce__(self, /): ...
    def __reduce_ex__(self, protocol, /): ...
    def __repr__(self) -> None: ...
    def __rlshift__(self) -> None: ...
    def __rrshift__(self) -> None: ...
    def __rshift__(self) -> None: ...
    def __setattr__(self) -> None: ...
    def __sizeof__(self, /): ...
    def __str__(self) -> None: ...
    def __subclasshook__(self) -> None: ...
    def asType(self, arg__1: object) -> object: ...
    def getDriverVersion(self) -> List[int]: ...
    def getObjectId(self) -> int: ...
    def isGPURTSupported(self) -> bool: ...
    def isNull(self) -> bool: ...
    def isType(self, arg__1: object) -> bool: ...

class vrdRectangularLightNode:
    __doc__: NoneType
    __module__: str
    areaLightConeProperty: str
    def QualityMode(self) -> None: ...
    def __copy__(self) -> None: ...
    def __delattr__(self) -> None: ...
    def __dir__(self, /): ...
    def __eq__(self) -> None: ...
    def __format__(self, format_spec, /): ...
    def __ge__(self) -> None: ...
    def __getattribute__(self) -> None: ...
    def __getstate__(self, /): ...
    def __gt__(self) -> None: ...
    def __hash__(self) -> None: ...
    def __init__(self) -> None: ...
    def __init_subclass__(cls) -> None: ...
    def __le__(self) -> None: ...
    def __lshift__(self) -> None: ...
    def __lt__(self) -> None: ...
    def __ne__(self) -> None: ...
    def __new__(cls) -> None: ...
    def __reduce__(self, /): ...
    def __reduce_ex__(self, protocol, /): ...
    def __repr__(self) -> None: ...
    def __rlshift__(self) -> None: ...
    def __rrshift__(self) -> None: ...
    def __rshift__(self) -> None: ...
    def __setattr__(self) -> None: ...
    def __sizeof__(self, /): ...
    def __str__(self) -> None: ...
    def __subclasshook__(self) -> None: ...
    def applyMaterial(self, material: vrdMaterial) -> None: ...
    def asType(self, arg__1: object) -> object: ...
    def captureTransformVariant(self, name: str) -> None: ...
    def deleteTransformVariant(self, variant: vrdTransformNodeVariant) -> None: ...
    def findTransformVariant(self, name: str) -> vrdTransformNodeVariant: ...
    def getAreaLightCone(self) -> vrdAreaLightCone: ...
    def getAttenuation(self) -> vrLightTypes.Attenuation: ...
    def getBakeLayer(self) -> int: ...
    def getBoundingBox(self) -> vrdBoundingBox: ...
    def getCastShadowOnShadowMaterial(self) -> bool: ...
    def getChild(self, index: int) -> vrdNode: ...
    def getChildCount(self) -> int: ...
    def getChildIndex(self, child: vrdNode) -> int: ...
    def getChildren(self) -> List[vrdNode]: ...
    def getChildrenRecursive(self) -> List[vrdNode]: ...
    def getChildrenRef(self) -> vrdNodeList: ...
    def getDiffuseColor(self) -> QVector3D: ...
    def getDiffuseColorSpectrum(self) -> vrSpectrum: ...
    def getEulerRotationOrder(self) -> vrTransformTypes.EulerRotationOrder: ...
    def getGlossyColor(self) -> QVector3D: ...
    def getGlossyColorSpectrum(self) -> vrSpectrum: ...
    def getGroundShadowIntensity(self) -> float: ...
    def getIlluminateScene(self) -> bool: ...
    def getIlluminateShadowMaterial(self) -> bool: ...
    def getImportanceMultiplier(self) -> float: ...
    def getIntensity(self) -> float: ...
    def getInteractiveMode(self) -> vrdAreaLightNode.QualityMode: ...
    def getInteractiveQuality(self) -> int: ...
    def getIsPhysicallyBased(self) -> bool: ...
    def getLightProfile(self) -> vrdLightProfile: ...
    def getLightTransform(self) -> vrdLightTransform: ...
    def getLightUnit(self) -> vrLightTypes.Unit: ...
    def getLocalLight(self) -> bool: ...
    def getLocked(self) -> bool: ...
    def getMaterial(self) -> vrdMaterial: ...
    def getMaterialShadowIntensity(self) -> float: ...
    def getModuleNode(self) -> vrdBaseLightNode: ...
    def getName(self) -> str: ...
    def getObjectId(self) -> int: ...
    def getOn(self) -> bool: ...
    def getOrCreateTransformNode(self) -> vrdNode: ...
    def getParent(self) -> vrdNode: ...
    def getPath(self) -> str: ...
    def getPrimaryVisibility(self) -> bool: ...
    def getRotatePivot(self) -> QVector3D: ...
    def getRotatePivotTranslation(self) -> QVector3D: ...
    def getRotationAsEuler(self) -> QVector3D: ...
    def getRotationAsQuaternion(self) -> QQuaternion: ...
    def getRotationOrientationAsEuler(self) -> QVector3D: ...
    def getRotationOrientationAsQuaternion(self) -> QQuaternion: ...
    def getScale(self) -> QVector3D: ...
    def getScalePivot(self) -> QVector3D: ...
    def getScalePivotTranslation(self) -> QVector3D: ...
    def getSelectableFlag(self) -> bool: ...
    def getShadowMap(self) -> vrdShadowMap: ...
    def getSharedNodes(self) -> List[vrdNode]: ...
    def getShear(self) -> QVector3D: ...
    def getStillFrameMode(self) -> vrdAreaLightNode.QualityMode: ...
    def getStillFrameQuality(self) -> int: ...
    def getSynchronizedNodes(self) -> List[vrdNode]: ...
    def getTemperature(self) -> int: ...
    def getTexture(self) -> vrdLightTexture: ...
    def getTransform(self) -> QMatrix4x4: ...
    def getTransformVariants(self) -> List[vrdTransformNodeVariant]: ...
    def getTranslation(self) -> QVector3D: ...
    def getUniquePath(self) -> str: ...
    def getUseLightTemperature(self) -> bool: ...
    def getVisibilityFlag(self) -> bool: ...
    def getVisibleInReflections(self) -> bool: ...
    def getVisualizationVisible(self) -> bool: ...
    def getVolumeIlluminationMode(self) -> vrLightTypes.VolumeIlluminationMode: ...
    def getWorldBoundingBox(self) -> vrdBoundingBox: ...
    def getWorldRotatePivot(self) -> QVector3D: ...
    def getWorldScalePivot(self) -> QVector3D: ...
    def getWorldTransform(self) -> QMatrix4x4: ...
    def getWorldTranslation(self) -> QVector3D: ...
    def hasParent(self, parent: vrdNode) -> bool: ...
    def isEditable(self) -> bool: ...
    def isEditedAsset(self) -> bool: ...
    def isGroup(self) -> bool: ...
    def isImplicitShared(self) -> bool: ...
    def isNull(self) -> bool: ...
    def isShared(self) -> bool: ...
    def isSharedWith(self, node: vrdNode) -> bool: ...
    def isSynchronized(self) -> bool: ...
    def isType(self, arg__1: object) -> bool: ...
    def isValid(self) -> bool: ...
    def isVisible(self) -> bool: ...
    def resetTransformation(self) -> None: ...
    def setAttenuation(self, attenuation: vrLightTypes.Attenuation) -> None: ...
    def setBakeLayer(self, layer: int) -> None: ...
    def setCastShadowOnShadowMaterial(self, castShadow: bool) -> None: ...
    def setDiffuseColor(self, diffuseColor: QVector3D) -> None: ...
    def setDiffuseColorSpectrum(self, spectrum: Union[vrSpectrum, QVector3D]) -> None: ...
    def setEulerRotationOrder(self, rotationOrder: vrTransformTypes.EulerRotationOrder) -> None: ...
    def setGlossyColor(self, glossyColor: QVector3D) -> None: ...
    def setGlossyColorSpectrum(self, spectrum: Union[vrSpectrum, QVector3D]) -> None: ...
    def setGroundShadowIntensity(self, intensity: float) -> None: ...
    def setIlluminateScene(self, illuminateScene: bool) -> None: ...
    def setIlluminateShadowMaterial(self, illuminateShadosMeterial: bool) -> None: ...
    def setImportanceMultiplier(self, importanceMultiplier: float) -> None: ...
    def setIntensity(self, intensity: float) -> None: ...
    def setInteractiveMode(self, value: vrdAreaLightNode.QualityMode) -> None: ...
    def setInteractiveQuality(self, quality: int) -> None: ...
    def setIsPhysicallyBased(self, on: bool) -> None: ...
    def setLightUnit(self, unit: vrLightTypes.Unit) -> None: ...
    def setLocalLight(self, isLocalLight: bool) -> None: ...
    def setLocked(self, locked: bool) -> None: ...
    def setMaterialShadowIntensity(self, intensity: float) -> None: ...
    def setName(self, name: str) -> None: ...
    def setOn(self, on: bool) -> None: ...
    def setPrimaryVisibility(self, visible: bool) -> None: ...
    def setRotatePivot(self, rotatePivot: QVector3D) -> None: ...
    def setRotatePivotTranslation(self, rotatePivotTranslation: QVector3D) -> None: ...
    def setRotationAsEuler(self, rotation: QVector3D) -> None: ...
    def setRotationAsQuaternion(self, rotation: QQuaternion) -> None: ...
    def setRotationOrientationAsEuler(self, rotationOrientation: QVector3D) -> None: ...
    def setRotationOrientationAsQuaternion(self, orientation: QQuaternion) -> None: ...
    def setScale(self, scale: QVector3D) -> None: ...
    def setScalePivot(self, scalePivot: QVector3D) -> None: ...
    def setScalePivotTranslation(self, scalePivotTranslation: QVector3D) -> None: ...
    def setSelectableFlag(self, selectable: bool) -> None: ...
    def setShear(self, shear: QVector3D) -> None: ...
    def setStillFrameMode(self, value: vrdAreaLightNode.QualityMode) -> None: ...
    def setStillFrameQuality(self, quality: int) -> None: ...
    def setTemperature(self, kelvin: int) -> None: ...
    def setTransform(self, matrix: Union[QMatrix4x4, QTransform]) -> None: ...
    def setTranslation(self, translation: QVector3D) -> None: ...
    def setUseLightTemperature(self, use: bool) -> None: ...
    def setVisibilityFlag(self, visible: bool) -> None: ...
    def setVisibleInReflections(self, visible: bool) -> None: ...
    def setVisualizationVisible(self, showVisualization: bool) -> None: ...
    def setVolumeIlluminationMode(self, mode: vrLightTypes.VolumeIlluminationMode) -> None: ...
    def setWorldRotatePivot(self, rotatePivot: QVector3D) -> None: ...
    def setWorldScalePivot(self, scalePivot: QVector3D) -> None: ...
    def setWorldTransform(self, matrix: Union[QMatrix4x4, QTransform]) -> None: ...
    def setWorldTranslation(self, translation: QVector3D) -> None: ...

class vrdReferenceNode:
    __doc__: NoneType
    __module__: str
    stateProperty: str
    sourceFileStateProperty: str
    smartFileStateProperty: str
    def __copy__(self) -> None: ...
    def __delattr__(self) -> None: ...
    def __dir__(self, /): ...
    def __eq__(self) -> None: ...
    def __format__(self, format_spec, /): ...
    def __ge__(self) -> None: ...
    def __getattribute__(self) -> None: ...
    def __getstate__(self, /): ...
    def __gt__(self) -> None: ...
    def __hash__(self) -> None: ...
    def __init__(self) -> None: ...
    def __init_subclass__(cls) -> None: ...
    def __le__(self) -> None: ...
    def __lshift__(self) -> None: ...
    def __lt__(self) -> None: ...
    def __ne__(self) -> None: ...
    def __new__(cls) -> None: ...
    def __reduce__(self, /): ...
    def __reduce_ex__(self, protocol, /): ...
    def __repr__(self) -> None: ...
    def __rlshift__(self) -> None: ...
    def __rrshift__(self) -> None: ...
    def __rshift__(self) -> None: ...
    def __setattr__(self) -> None: ...
    def __sizeof__(self, /): ...
    def __str__(self) -> None: ...
    def __subclasshook__(self) -> None: ...
    def applyMaterial(self, material: vrdMaterial) -> None: ...
    def asType(self, arg__1: object) -> object: ...
    def captureTransformVariant(self, name: str) -> None: ...
    def createSmartPath(self, location: vrReferenceTypes.ExportLocation, customPath: str = '') -> str: ...
    def createSmartReference(self, useSourcePath: bool = False) -> None: ...
    def createSourceReference(self) -> None: ...
    def deleteTransformVariant(self, variant: vrdTransformNodeVariant) -> None: ...
    def findTransformVariant(self, name: str) -> vrdTransformNodeVariant: ...
    def getBoundingBox(self) -> vrdBoundingBox: ...
    def getChild(self, index: int) -> vrdNode: ...
    def getChildCount(self) -> int: ...
    def getChildIndex(self, child: vrdNode) -> int: ...
    def getChildren(self) -> List[vrdNode]: ...
    def getChildrenRecursive(self) -> List[vrdNode]: ...
    def getChildrenRef(self) -> vrdNodeList: ...
    def getEulerRotationOrder(self) -> vrTransformTypes.EulerRotationOrder: ...
    def getLocked(self) -> bool: ...
    def getMaterial(self) -> vrdMaterial: ...
    def getName(self) -> str: ...
    def getObjectId(self) -> int: ...
    def getOrCreateTransformNode(self) -> vrdNode: ...
    def getParent(self) -> vrdNode: ...
    def getPath(self) -> str: ...
    def getRotatePivot(self) -> QVector3D: ...
    def getRotatePivotTranslation(self) -> QVector3D: ...
    def getRotationAsEuler(self) -> QVector3D: ...
    def getRotationAsQuaternion(self) -> QQuaternion: ...
    def getRotationOrientationAsEuler(self) -> QVector3D: ...
    def getRotationOrientationAsQuaternion(self) -> QQuaternion: ...
    def getScale(self) -> QVector3D: ...
    def getScalePivot(self) -> QVector3D: ...
    def getScalePivotTranslation(self) -> QVector3D: ...
    def getSelectableFlag(self) -> bool: ...
    def getSharedNodes(self) -> List[vrdNode]: ...
    def getShear(self) -> QVector3D: ...
    def getSmartCreationDate(self) -> QDateTime: ...
    def getSmartFileState(self) -> vrReferenceTypes.FileState: ...
    def getSmartLastModified(self) -> QDateTime: ...
    def getSmartOwner(self) -> str: ...
    def getSmartPath(self) -> str: ...
    def getSmartRevision(self) -> str: ...
    def getSmartRevisionPath(self, revision: str) -> str: ...
    def getSmartRevisions(self) -> List[str]: ...
    def getSourceFileState(self) -> vrReferenceTypes.FileState: ...
    def getSourceImportDate(self) -> QDateTime: ...
    def getSourceLastModified(self) -> QDateTime: ...
    def getSourceOwner(self) -> str: ...
    def getSourcePath(self) -> str: ...
    def getSourceRevision(self) -> str: ...
    def getSourceRevisionPath(self, revision: str) -> str: ...
    def getSourceRevisions(self) -> List[str]: ...
    def getState(self) -> vrReferenceTypes.State: ...
    def getSynchronizedNodes(self) -> List[vrdNode]: ...
    def getTransform(self) -> QMatrix4x4: ...
    def getTransformVariants(self) -> List[vrdTransformNodeVariant]: ...
    def getTranslation(self) -> QVector3D: ...
    def getUniquePath(self) -> str: ...
    def getVisibilityFlag(self) -> bool: ...
    def getWorldBoundingBox(self) -> vrdBoundingBox: ...
    def getWorldRotatePivot(self) -> QVector3D: ...
    def getWorldScalePivot(self) -> QVector3D: ...
    def getWorldTransform(self) -> QMatrix4x4: ...
    def getWorldTranslation(self) -> QVector3D: ...
    def hasParent(self, parent: vrdNode) -> bool: ...
    def hasSmartReference(self) -> bool: ...
    def hasSourceReference(self) -> bool: ...
    def isChanged(self) -> bool: ...
    def isEditable(self) -> bool: ...
    def isEditedAsset(self) -> bool: ...
    def isGroup(self) -> bool: ...
    def isImplicitShared(self) -> bool: ...
    def isLoaded(self) -> bool: ...
    def isNull(self) -> bool: ...
    def isRootNode(self) -> bool: ...
    def isSelfOrSubReferenceChanged(self) -> bool: ...
    def isShared(self) -> bool: ...
    def isSharedWith(self, node: vrdNode) -> bool: ...
    def isSubReferenceChanged(self) -> bool: ...
    def isSynchronized(self) -> bool: ...
    def isType(self, arg__1: object) -> bool: ...
    def isValid(self) -> bool: ...
    def isVisible(self) -> bool: ...
    def load(self) -> None: ...
    def loadSmartReference(self) -> None: ...
    def loadSourceReference(self) -> None: ...
    def removeSmartReference(self) -> None: ...
    def removeSourceReference(self) -> None: ...
    def resetTransformation(self) -> None: ...
    def saveSmartReference(self) -> None: ...
    def saveSmartReferenceAs(self, path: str, unshare: bool) -> None: ...
    def setEulerRotationOrder(self, rotationOrder: vrTransformTypes.EulerRotationOrder) -> None: ...
    def setLocked(self, locked: bool) -> None: ...
    def setName(self, name: str) -> None: ...
    def setRotatePivot(self, rotatePivot: QVector3D) -> None: ...
    def setRotatePivotTranslation(self, rotatePivotTranslation: QVector3D) -> None: ...
    def setRotationAsEuler(self, rotation: QVector3D) -> None: ...
    def setRotationAsQuaternion(self, rotation: QQuaternion) -> None: ...
    def setRotationOrientationAsEuler(self, rotationOrientation: QVector3D) -> None: ...
    def setRotationOrientationAsQuaternion(self, orientation: QQuaternion) -> None: ...
    def setScale(self, scale: QVector3D) -> None: ...
    def setScalePivot(self, scalePivot: QVector3D) -> None: ...
    def setScalePivotTranslation(self, scalePivotTranslation: QVector3D) -> None: ...
    def setSelectableFlag(self, selectable: bool) -> None: ...
    def setShear(self, shear: QVector3D) -> None: ...
    def setSmartPath(self, path: str) -> None: ...
    def setSourcePath(self, path: str) -> None: ...
    def setTransform(self, matrix: Union[QMatrix4x4, QTransform]) -> None: ...
    def setTranslation(self, translation: QVector3D) -> None: ...
    def setVisibilityFlag(self, visible: bool) -> None: ...
    def setWorldRotatePivot(self, rotatePivot: QVector3D) -> None: ...
    def setWorldScalePivot(self, scalePivot: QVector3D) -> None: ...
    def setWorldTransform(self, matrix: Union[QMatrix4x4, QTransform]) -> None: ...
    def setWorldTranslation(self, translation: QVector3D) -> None: ...
    def unload(self) -> None: ...

class vrdReflectivePlasticMaterial:
    __doc__: NoneType
    __module__: str
    Fast: FresnelQuality
    Accurate: FresnelQuality
    diffuseColorProperty: str
    diffuseColorSpectrumProperty: str
    specularColorProperty: str
    specularColorSpectrumProperty: str
    reflectivityProperty: str
    fresnelQualityProperty: str
    diffuseTextureProperty: str
    specularTextureProperty: str
    bumpTextureProperty: str
    incandescenceProperty: str
    subsurfaceScatteringProperty: str
    displacementTextureProperty: str
    def FresnelQuality(self) -> None: ...
    def __copy__(self) -> None: ...
    def __delattr__(self) -> None: ...
    def __dir__(self, /): ...
    def __eq__(self) -> None: ...
    def __format__(self, format_spec, /): ...
    def __ge__(self) -> None: ...
    def __getattribute__(self) -> None: ...
    def __getstate__(self, /): ...
    def __gt__(self) -> None: ...
    def __hash__(self) -> None: ...
    def __init__(self) -> None: ...
    def __init_subclass__(cls) -> None: ...
    def __le__(self) -> None: ...
    def __lshift__(self) -> None: ...
    def __lt__(self) -> None: ...
    def __ne__(self) -> None: ...
    def __new__(cls) -> None: ...
    def __reduce__(self, /): ...
    def __reduce_ex__(self, protocol, /): ...
    def __repr__(self) -> None: ...
    def __rlshift__(self) -> None: ...
    def __rrshift__(self) -> None: ...
    def __rshift__(self) -> None: ...
    def __setattr__(self) -> None: ...
    def __sizeof__(self, /): ...
    def __str__(self) -> None: ...
    def __subclasshook__(self) -> None: ...
    def asType(self, arg__1: object) -> object: ...
    def duplicate(self, name: str = '') -> vrdMaterial: ...
    def getAnalytic(self) -> vrdAnalyticSettings: ...
    def getBumpTexture(self) -> vrdBumpTexture: ...
    def getCommon(self) -> vrdBRDFCommonSettings: ...
    def getDiffuseColor(self) -> QVector3D: ...
    def getDiffuseColorSpectrum(self) -> vrSpectrum: ...
    def getDiffuseTexture(self) -> vrdTexture: ...
    def getDisplacementTexture(self) -> vrdDisplacementTexture: ...
    def getFresnelQuality(self) -> vrdReflectivePlasticMaterial.FresnelQuality: ...
    def getIcon(self) -> QIcon: ...
    def getIncandescence(self) -> vrdIncandescence: ...
    def getLocked(self) -> bool: ...
    def getNPR(self) -> vrdNPRSettings: ...
    def getName(self) -> str: ...
    def getObjectId(self) -> int: ...
    def getPreview(self) -> QImage: ...
    def getPreviewScene(self) -> str: ...
    def getRaytracing(self) -> vrdMaterialRaytracingSettings: ...
    def getReflectivity(self) -> float: ...
    def getRoundedEdges(self) -> vrdRoundedEdges: ...
    def getSpecularColor(self) -> QVector3D: ...
    def getSpecularColorSpectrum(self) -> vrSpectrum: ...
    def getSpecularTexture(self) -> vrdTexture: ...
    def getSubsurfaceScattering(self) -> vrdSubsurfaceScattering: ...
    def getTextures(self) -> List[vrdTexture]: ...
    def getTransparency(self) -> vrdTransparency: ...
    def isAsset(self) -> bool: ...
    def isComponent(self) -> bool: ...
    def isDisplacementActive(self) -> bool: ...
    def isEditable(self) -> bool: ...
    def isEditedAsset(self) -> bool: ...
    def isNull(self) -> bool: ...
    def isType(self, arg__1: object) -> bool: ...
    def isValid(self) -> bool: ...
    def setDiffuseColor(self, value: QVector3D) -> None: ...
    def setDiffuseColorSpectrum(self, value: Union[vrSpectrum, QVector3D]) -> None: ...
    def setFresnelQuality(self, quality: vrdReflectivePlasticMaterial.FresnelQuality) -> None: ...
    def setInlineAllImageSequences(self, value: bool) -> List[vrdImage]: ...
    def setLocked(self, locked: bool) -> None: ...
    def setName(self, name: str) -> None: ...
    def setPreviewScene(self, name: str) -> None: ...
    def setReflectivity(self, v: float) -> None: ...
    def setSpecularColor(self, value: QVector3D) -> None: ...
    def setSpecularColorSpectrum(self, value: Union[vrSpectrum, QVector3D]) -> None: ...

class vrdRoughnessTexture:
    __doc__: NoneType
    __module__: str
    minimumRoughnessProperty: str
    maximumRoughnessProperty: str
    minimumRoughnessUProperty: str
    maximumRoughnessUProperty: str
    minimumRoughnessVProperty: str
    maximumRoughnessVProperty: str
    roughnessMapTypeProperty: str
    def __copy__(self) -> None: ...
    def __delattr__(self) -> None: ...
    def __dir__(self, /): ...
    def __eq__(self) -> None: ...
    def __format__(self, format_spec, /): ...
    def __ge__(self) -> None: ...
    def __getattribute__(self) -> None: ...
    def __getstate__(self, /): ...
    def __gt__(self) -> None: ...
    def __hash__(self) -> None: ...
    def __init__(self) -> None: ...
    def __init_subclass__(cls) -> None: ...
    def __le__(self) -> None: ...
    def __lshift__(self) -> None: ...
    def __lt__(self) -> None: ...
    def __ne__(self) -> None: ...
    def __new__(cls) -> None: ...
    def __reduce__(self, /): ...
    def __reduce_ex__(self, protocol, /): ...
    def __repr__(self) -> None: ...
    def __rlshift__(self) -> None: ...
    def __rrshift__(self) -> None: ...
    def __rshift__(self) -> None: ...
    def __setattr__(self) -> None: ...
    def __sizeof__(self, /): ...
    def __str__(self) -> None: ...
    def __subclasshook__(self) -> None: ...
    def asType(self, arg__1: object) -> object: ...
    def getAnisotropy(self) -> float: ...
    def getComponentName(self) -> str: ...
    def getConnectRepeatModes(self) -> bool: ...
    def getFrameOffset(self) -> int: ...
    def getGamma(self) -> float: ...
    def getImage(self) -> vrdImage: ...
    def getImageNumber(self) -> int: ...
    def getInfiniteTilingContrast(self) -> float: ...
    def getInfiniteTilingGridSize(self) -> int: ...
    def getInfiniteTilingHueWeight(self) -> float: ...
    def getInfiniteTilingMaxRotation(self) -> float: ...
    def getInfiniteTilingSaturationWeight(self) -> float: ...
    def getInfiniteTilingValueWeight(self) -> float: ...
    def getInlineImageSequence(self) -> bool: ...
    def getInvertTexture(self) -> bool: ...
    def getLinkTextureSettings(self) -> bool: ...
    def getManipulate(self) -> bool: ...
    def getMappingType(self) -> vrTextureTypes.MappingType: ...
    def getMaximumRoughness(self) -> float: ...
    def getMaximumRoughnessU(self) -> float: ...
    def getMaximumRoughnessV(self) -> float: ...
    def getMinimumRoughness(self) -> float: ...
    def getMinimumRoughnessU(self) -> float: ...
    def getMinimumRoughnessV(self) -> float: ...
    def getObjectId(self) -> int: ...
    def getOffset(self) -> QVector2D: ...
    def getPlanarProjectionCenter(self) -> QVector3D: ...
    def getPlanarProjectionKeepAspectRatio(self) -> bool: ...
    def getPlanarProjectionOrientation(self) -> QVector2D: ...
    def getPlanarProjectionSingleSided(self) -> bool: ...
    def getPlanarProjectionSize(self) -> QVector3D: ...
    def getRepeat(self) -> QVector2D: ...
    def getRepeatModeU(self) -> vrTextureTypes.RepeatMode: ...
    def getRepeatModeV(self) -> vrTextureTypes.RepeatMode: ...
    def getRotate(self) -> float: ...
    def getRoughnessMapType(self) -> vrRoughnessTextureTypes.ValueMapping: ...
    def getTextureSize(self) -> QVector2D: ...
    def getTriplanarBlend(self) -> float: ...
    def getTriplanarXOffset(self) -> QVector2D: ...
    def getTriplanarXRepeat(self) -> QVector2D: ...
    def getTriplanarXRotation(self) -> float: ...
    def getTriplanarYOffset(self) -> QVector2D: ...
    def getTriplanarYRepeat(self) -> QVector2D: ...
    def getTriplanarYRotation(self) -> float: ...
    def getTriplanarZOffset(self) -> QVector2D: ...
    def getTriplanarZRepeat(self) -> QVector2D: ...
    def getTriplanarZRotation(self) -> float: ...
    def getUniformRepeat(self) -> bool: ...
    def getUseAlpha(self) -> bool: ...
    def getUseCutout(self) -> bool: ...
    def getUseImageSequence(self) -> bool: ...
    def getUseInfiniteTiling(self) -> bool: ...
    def getUseTexture(self) -> bool: ...
    def getUseTextureSize(self) -> bool: ...
    def isNull(self) -> bool: ...
    def isType(self, arg__1: object) -> bool: ...
    def isValid(self) -> bool: ...
    def setAnisotropy(self, anisotropy: float) -> None: ...
    def setConnectRepeatModes(self, s: bool) -> None: ...
    def setFrameOffset(self, frameOffset: int) -> None: ...
    def setGamma(self, gamma: float) -> None: ...
    def setImage(self, img: vrdImage) -> None: ...
    def setImageNumber(self, imageNumber: int) -> None: ...
    def setInfiniteTilingContrast(self, contrast: float) -> None: ...
    def setInfiniteTilingGridSize(self, gridSize: int) -> None: ...
    def setInfiniteTilingHueWeight(self, hueWeight: float) -> None: ...
    def setInfiniteTilingMaxRotation(self, maxRotation: float) -> None: ...
    def setInfiniteTilingSaturationWeight(self, saturationWeight: float) -> None: ...
    def setInfiniteTilingValueWeight(self, valueWeight: float) -> None: ...
    def setInlineImageSequence(self, s: bool) -> None: ...
    def setInvertTexture(self, invertTexture: bool) -> None: ...
    def setLinkTextureSettings(self, s: bool) -> None: ...
    def setManipulate(self, s: bool) -> None: ...
    def setMappingType(self, type: vrTextureTypes.MappingType) -> None: ...
    def setMaximumRoughness(self, maximumRoughness: float) -> None: ...
    def setMaximumRoughnessU(self, maximumRoughness: float) -> None: ...
    def setMaximumRoughnessV(self, maximumRoughness: float) -> None: ...
    def setMinimumRoughness(self, minimumRoughness: float) -> None: ...
    def setMinimumRoughnessU(self, minimumRoughness: float) -> None: ...
    def setMinimumRoughnessV(self, minimumRoughness: float) -> None: ...
    def setOffset(self, offset: QVector2D) -> None: ...
    def setPlanarProjectionCenter(self, center: QVector3D) -> None: ...
    def setPlanarProjectionFitSize(self) -> None: ...
    def setPlanarProjectionKeepAspectRatio(self, s: bool) -> None: ...
    def setPlanarProjectionObjectCenter(self) -> None: ...
    def setPlanarProjectionOrientation(self, orientation: QVector2D) -> None: ...
    def setPlanarProjectionPlane(self, center: QVector3D, direction: QVector3D) -> None: ...
    def setPlanarProjectionSingleSided(self, s: bool) -> None: ...
    def setPlanarProjectionSize(self, size: QVector3D) -> None: ...
    def setRepeat(self, repeat: QVector2D) -> None: ...
    def setRepeatModeU(self, mode: vrTextureTypes.RepeatMode) -> None: ...
    def setRepeatModeV(self, mode: vrTextureTypes.RepeatMode) -> None: ...
    def setRotate(self, rotate: float) -> None: ...
    def setRoughnessMapType(self, mapping: vrRoughnessTextureTypes.ValueMapping) -> None: ...
    def setTextureSize(self, size: QVector2D) -> None: ...
    def setTriplanarBlend(self, blend: float) -> None: ...
    def setTriplanarXOffset(self, offset: QVector2D) -> None: ...
    def setTriplanarXRepeat(self, repeat: QVector2D) -> None: ...
    def setTriplanarXRotation(self, rotation: float) -> None: ...
    def setTriplanarYOffset(self, offset: QVector2D) -> None: ...
    def setTriplanarYRepeat(self, repeat: QVector2D) -> None: ...
    def setTriplanarYRotation(self, rotation: float) -> None: ...
    def setTriplanarZOffset(self, offset: QVector2D) -> None: ...
    def setTriplanarZRepeat(self, repeat: QVector2D) -> None: ...
    def setTriplanarZRotation(self, rotation: float) -> None: ...
    def setUniformRepeat(self, s: bool) -> None: ...
    def setUseAlpha(self, s: bool) -> None: ...
    def setUseCutout(self, s: bool) -> None: ...
    def setUseImageSequence(self, s: bool) -> None: ...
    def setUseInfiniteTiling(self, s: bool) -> None: ...
    def setUseTexture(self, s: bool) -> None: ...
    def setUseTextureSize(self, s: bool) -> None: ...
    def supportsGamma(self) -> bool: ...
    def supportsInvertTexture(self) -> bool: ...
    def supportsMappingType(self) -> bool: ...
    def supportsUseAlpha(self) -> bool: ...
    def supportsUseCutout(self) -> bool: ...

class vrdRoundedEdges:
    __doc__: NoneType
    __module__: str
    Off: EdgeMode
    SameGeometry: EdgeMode
    SameMaterial: EdgeMode
    SameGroup: EdgeMode
    ConvexAndConcave: EdgeType
    ConvexOnly: EdgeType
    ConcaveOnly: EdgeType
    modeProperty: str
    groupIdProperty: str
    edgeTypeProperty: str
    radiusProperty: str
    chamferProperty: str
    angleLimitProperty: str
    qualityProperty: str
    def EdgeMode(self) -> None: ...
    def EdgeType(self) -> None: ...
    def __copy__(self) -> None: ...
    def __delattr__(self) -> None: ...
    def __dir__(self, /): ...
    def __eq__(self) -> None: ...
    def __format__(self, format_spec, /): ...
    def __ge__(self) -> None: ...
    def __getattribute__(self) -> None: ...
    def __getstate__(self, /): ...
    def __gt__(self) -> None: ...
    def __hash__(self) -> None: ...
    def __init__(self) -> None: ...
    def __init_subclass__(cls) -> None: ...
    def __le__(self) -> None: ...
    def __lshift__(self) -> None: ...
    def __lt__(self) -> None: ...
    def __ne__(self) -> None: ...
    def __new__(cls) -> None: ...
    def __reduce__(self, /): ...
    def __reduce_ex__(self, protocol, /): ...
    def __repr__(self) -> None: ...
    def __rlshift__(self) -> None: ...
    def __rrshift__(self) -> None: ...
    def __rshift__(self) -> None: ...
    def __setattr__(self) -> None: ...
    def __sizeof__(self, /): ...
    def __str__(self) -> None: ...
    def __subclasshook__(self) -> None: ...
    def asType(self, arg__1: object) -> object: ...
    def getAngleLimit(self) -> float: ...
    def getChamfer(self) -> float: ...
    def getEdgeType(self) -> vrdRoundedEdges.EdgeType: ...
    def getGroupId(self) -> int: ...
    def getMode(self) -> vrdRoundedEdges.EdgeMode: ...
    def getObjectId(self) -> int: ...
    def getQuality(self) -> int: ...
    def getRadius(self) -> float: ...
    def isNull(self) -> bool: ...
    def isType(self, arg__1: object) -> bool: ...
    def isValid(self) -> bool: ...
    def setAngleLimit(self, value: float) -> None: ...
    def setChamfer(self, value: float) -> None: ...
    def setEdgeType(self, mode: vrdRoundedEdges.EdgeType) -> None: ...
    def setGroupId(self, value: int) -> None: ...
    def setMode(self, mode: vrdRoundedEdges.EdgeMode) -> None: ...
    def setQuality(self, value: int) -> None: ...
    def setRadius(self, value: float) -> None: ...

class vrdSVBRDFMaterial:
    __doc__: NoneType
    __module__: str
    exposureProperty: str
    colorCorrectionProperty: str
    bumpTextureProperty: str
    incandescenceProperty: str
    subsurfaceScatteringProperty: str
    displacementTextureProperty: str
    def __copy__(self) -> None: ...
    def __delattr__(self) -> None: ...
    def __dir__(self, /): ...
    def __eq__(self) -> None: ...
    def __format__(self, format_spec, /): ...
    def __ge__(self) -> None: ...
    def __getattribute__(self) -> None: ...
    def __getstate__(self, /): ...
    def __gt__(self) -> None: ...
    def __hash__(self) -> None: ...
    def __init__(self) -> None: ...
    def __init_subclass__(cls) -> None: ...
    def __le__(self) -> None: ...
    def __lshift__(self) -> None: ...
    def __lt__(self) -> None: ...
    def __ne__(self) -> None: ...
    def __new__(cls) -> None: ...
    def __reduce__(self, /): ...
    def __reduce_ex__(self, protocol, /): ...
    def __repr__(self) -> None: ...
    def __rlshift__(self) -> None: ...
    def __rrshift__(self) -> None: ...
    def __rshift__(self) -> None: ...
    def __setattr__(self) -> None: ...
    def __sizeof__(self, /): ...
    def __str__(self) -> None: ...
    def __subclasshook__(self) -> None: ...
    def asType(self, arg__1: object) -> object: ...
    def duplicate(self, name: str = '') -> vrdMaterial: ...
    def getAnalytic(self) -> vrdAnalyticSettings: ...
    def getBumpTexture(self) -> vrdBumpTexture: ...
    def getColorCorrection(self) -> vrdColorCorrection: ...
    def getCommon(self) -> vrdBRDFCommonSettings: ...
    def getDisplacementTexture(self) -> vrdDisplacementTexture: ...
    def getExposure(self) -> float: ...
    def getIcon(self) -> QIcon: ...
    def getIncandescence(self) -> vrdIncandescence: ...
    def getLocked(self) -> bool: ...
    def getNPR(self) -> vrdNPRSettings: ...
    def getName(self) -> str: ...
    def getObjectId(self) -> int: ...
    def getPreview(self) -> QImage: ...
    def getPreviewScene(self) -> str: ...
    def getRaytracing(self) -> vrdMaterialRaytracingSettings: ...
    def getRoundedEdges(self) -> vrdRoundedEdges: ...
    def getSubsurfaceScattering(self) -> vrdSubsurfaceScattering: ...
    def getTextures(self) -> List[vrdTexture]: ...
    def getTransparency(self) -> vrdTransparency: ...
    def isAsset(self) -> bool: ...
    def isComponent(self) -> bool: ...
    def isDisplacementActive(self) -> bool: ...
    def isEditable(self) -> bool: ...
    def isEditedAsset(self) -> bool: ...
    def isNull(self) -> bool: ...
    def isType(self, arg__1: object) -> bool: ...
    def isValid(self) -> bool: ...
    def setExposure(self, exposure: float) -> None: ...
    def setInlineAllImageSequences(self, value: bool) -> List[vrdImage]: ...
    def setLocked(self, locked: bool) -> None: ...
    def setName(self, name: str) -> None: ...
    def setPreviewScene(self, name: str) -> None: ...

class vrdSceneImportSettings:
    __doc__: NoneType
    __module__: str
    mergeMaterialsProperty: str
    applyMaterialsFromAssetManagerProperty: str
    centerInOriginProperty: str
    putOnGroundProperty: str
    importAnimationsProperty: str
    def __copy__(self) -> None: ...
    def __delattr__(self) -> None: ...
    def __dir__(self, /): ...
    def __eq__(self) -> None: ...
    def __format__(self, format_spec, /): ...
    def __ge__(self) -> None: ...
    def __getattribute__(self) -> None: ...
    def __getstate__(self, /): ...
    def __gt__(self) -> None: ...
    def __hash__(self) -> None: ...
    def __init__(self) -> None: ...
    def __init_subclass__(cls) -> None: ...
    def __le__(self) -> None: ...
    def __lt__(self) -> None: ...
    def __ne__(self) -> None: ...
    def __new__(cls) -> None: ...
    def __reduce__(self, /): ...
    def __reduce_ex__(self, protocol, /): ...
    def __repr__(self) -> None: ...
    def __setattr__(self) -> None: ...
    def __sizeof__(self, /): ...
    def __str__(self) -> None: ...
    def __subclasshook__(self) -> None: ...
    def getApplyMaterialsFromAssetManager(self) -> bool: ...
    def getCenterInOrigin(self) -> bool: ...
    def getCreateReferences(self) -> bool: ...
    def getImportAnimations(self) -> bool: ...
    def getMergeMaterials(self) -> bool: ...
    def getPreserveAnimations(self) -> bool: ...
    def getPreserveRenderLayerSettings(self) -> bool: ...
    def getPreserveTouchSensors(self) -> bool: ...
    def getPreserveTransformations(self) -> bool: ...
    def getPutOnGround(self) -> bool: ...
    def setApplyMaterialsFromAssetManager(self, value: bool) -> None: ...
    def setCenterInOrigin(self, value: bool) -> None: ...
    def setCreateReferences(self, value: bool) -> None: ...
    def setImportAnimations(self, value: bool) -> None: ...
    def setMergeMaterials(self, value: bool) -> None: ...
    def setPreserveAnimations(self, value: bool) -> None: ...
    def setPreserveRenderLayerSettings(self, value: bool) -> None: ...
    def setPreserveTouchSensors(self, value: bool) -> None: ...
    def setPreserveTransformations(self, value: bool) -> None: ...
    def setPutOnGround(self, value: bool) -> None: ...

class vrdSceneItemInfo:
    __doc__: NoneType
    __module__: str
    HasMetadata: Flags
    HasAnimation: Flags
    HasTransformVariant: Flags
    HasTouchSensor: Flags
    HasAnnotation: Flags
    nodeProperty: str
    displayTextProperty: str
    isCheckedProperty: str
    iconProperty: str
    isSharedProperty: str
    isImplicitSharedProperty: str
    isSynchronizedProperty: str
    isEditableProperty: str
    isVisibleProperty: str
    hasFileInfoProperty: str
    flagsProperty: str
    def Flags(self) -> None: ...
    def __copy__(self) -> None: ...
    def __delattr__(self) -> None: ...
    def __dir__(self, /): ...
    def __eq__(self) -> None: ...
    def __format__(self, format_spec, /): ...
    def __ge__(self) -> None: ...
    def __getattribute__(self) -> None: ...
    def __getstate__(self, /): ...
    def __gt__(self) -> None: ...
    def __hash__(self) -> None: ...
    def __init__(self) -> None: ...
    def __init_subclass__(cls) -> None: ...
    def __le__(self) -> None: ...
    def __lt__(self) -> None: ...
    def __ne__(self) -> None: ...
    def __new__(cls) -> None: ...
    def __reduce__(self, /): ...
    def __reduce_ex__(self, protocol, /): ...
    def __repr__(self) -> None: ...
    def __setattr__(self) -> None: ...
    def __sizeof__(self, /): ...
    def __str__(self) -> None: ...
    def __subclasshook__(self) -> None: ...
    def getDisplayText(self) -> str: ...
    def getFlags(self) -> vrdSceneItemInfo.Flags: ...
    def getHasFileInfo(self) -> bool: ...
    def getIcon(self) -> QIcon: ...
    def getIsChecked(self) -> bool: ...
    def getIsEditable(self) -> bool: ...
    def getIsImplicitShared(self) -> bool: ...
    def getIsShared(self) -> bool: ...
    def getIsSynchronized(self) -> bool: ...
    def getIsVisible(self) -> bool: ...
    def getNode(self) -> vrdNode: ...
    def setDisplayText(self, displayText: str) -> None: ...
    def setFlags(self, value: vrdSceneItemInfo.Flags) -> None: ...
    def setHasFileInfo(self, value: bool) -> None: ...
    def setIcon(self, icon: Union[QIcon, QPixmap]) -> None: ...
    def setIsChecked(self, checked: bool) -> None: ...
    def setIsEditable(self, value: bool) -> None: ...
    def setIsImplicitShared(self, value: bool) -> None: ...
    def setIsShared(self, value: bool) -> None: ...
    def setIsSynchronized(self, value: bool) -> None: ...
    def setIsVisible(self, visible: bool) -> None: ...
    def setNode(self, node: vrdNode) -> None: ...

class vrdSceneObject:
    __doc__: NoneType
    __module__: str
    def __copy__(self) -> None: ...
    def __delattr__(self) -> None: ...
    def __dir__(self, /): ...
    def __eq__(self) -> None: ...
    def __format__(self, format_spec, /): ...
    def __ge__(self) -> None: ...
    def __getattribute__(self) -> None: ...
    def __getstate__(self, /): ...
    def __gt__(self) -> None: ...
    def __hash__(self) -> None: ...
    def __init__(self) -> None: ...
    def __init_subclass__(cls) -> None: ...
    def __le__(self) -> None: ...
    def __lshift__(self) -> None: ...
    def __lt__(self) -> None: ...
    def __ne__(self) -> None: ...
    def __new__(cls) -> None: ...
    def __reduce__(self, /): ...
    def __reduce_ex__(self, protocol, /): ...
    def __repr__(self) -> None: ...
    def __rlshift__(self) -> None: ...
    def __rrshift__(self) -> None: ...
    def __rshift__(self) -> None: ...
    def __setattr__(self) -> None: ...
    def __sizeof__(self, /): ...
    def __str__(self) -> None: ...
    def __subclasshook__(self) -> None: ...
    def asType(self, arg__1: object) -> object: ...
    def getObjectId(self) -> int: ...
    def isNull(self) -> bool: ...
    def isType(self, arg__1: object) -> bool: ...
    def isValid(self) -> bool: ...

class vrdSceneplateNode:
    __doc__: NoneType
    __module__: str
    nodeTypeProperty: str
    contentTypeProperty: str
    transparencyProperty: str
    webStreamActiveProperty: str
    clickThroughProperty: str
    urlProperty: str
    widthProperty: str
    heightProperty: str
    offsetModeProperty: str
    repeatModeProperty: str
    sizeModeProperty: str
    positionProperty: str
    offsetProperty: str
    sizeProperty: str
    rotationProperty: str
    fontColorProperty: str
    backgroundColorProperty: str
    backgroundTransparencyProperty: str
    textProperty: str
    fontProperty: str
    fontStyleProperty: str
    fontHeightProperty: str
    imageProperty: str
    useImageSequenceProperty: str
    imageNumberProperty: str
    frameOffsetProperty: str
    inlineImageSequenceProperty: str
    whiteBalanceProperty: str
    hueShiftProperty: str
    contrastProperty: str
    brightnessProperty: str
    saturationProperty: str
    def __copy__(self) -> None: ...
    def __delattr__(self) -> None: ...
    def __dir__(self, /): ...
    def __eq__(self) -> None: ...
    def __format__(self, format_spec, /): ...
    def __ge__(self) -> None: ...
    def __getattribute__(self) -> None: ...
    def __getstate__(self, /): ...
    def __gt__(self) -> None: ...
    def __hash__(self) -> None: ...
    def __init__(self) -> None: ...
    def __init_subclass__(cls) -> None: ...
    def __le__(self) -> None: ...
    def __lshift__(self) -> None: ...
    def __lt__(self) -> None: ...
    def __ne__(self) -> None: ...
    def __new__(cls) -> None: ...
    def __reduce__(self, /): ...
    def __reduce_ex__(self, protocol, /): ...
    def __repr__(self) -> None: ...
    def __rlshift__(self) -> None: ...
    def __rrshift__(self) -> None: ...
    def __rshift__(self) -> None: ...
    def __setattr__(self) -> None: ...
    def __sizeof__(self, /): ...
    def __str__(self) -> None: ...
    def __subclasshook__(self) -> None: ...
    def applyMaterial(self, material: vrdMaterial) -> None: ...
    def asType(self, arg__1: object) -> object: ...
    def getBackgroundColor(self) -> QVector3D: ...
    def getBackgroundTransparency(self) -> float: ...
    def getBoundingBox(self) -> vrdBoundingBox: ...
    def getBrightness(self) -> float: ...
    def getChild(self, index: int) -> vrdNode: ...
    def getChildCount(self) -> int: ...
    def getChildIndex(self, child: vrdNode) -> int: ...
    def getChildren(self) -> List[vrdNode]: ...
    def getChildrenRecursive(self) -> List[vrdNode]: ...
    def getChildrenRef(self) -> vrdNodeList: ...
    def getClickThrough(self) -> float: ...
    def getContentType(self) -> vrSceneplateTypes.ContentType: ...
    def getContrast(self) -> float: ...
    def getFont(self) -> str: ...
    def getFontColor(self) -> QVector3D: ...
    def getFontHeight(self) -> int: ...
    def getFontStyle(self) -> str: ...
    def getFrameOffset(self) -> int: ...
    def getHeight(self) -> int: ...
    def getHueShift(self) -> float: ...
    def getImage(self) -> vrdImage: ...
    def getImageNumber(self) -> int: ...
    def getInlineImageSequence(self) -> bool: ...
    def getLocked(self) -> bool: ...
    def getMaterial(self) -> vrdMaterial: ...
    def getName(self) -> str: ...
    def getNodeType(self) -> vrSceneplateTypes.NodeType: ...
    def getObjectId(self) -> int: ...
    def getOffset(self) -> QVector2D: ...
    def getOffsetMode(self) -> vrSceneplateTypes.SizeType: ...
    def getOrCreateTransformNode(self) -> vrdNode: ...
    def getParent(self) -> vrdNode: ...
    def getPath(self) -> str: ...
    def getPosition(self) -> vrSceneplateTypes.Position: ...
    def getRepeatMode(self) -> vrSceneplateTypes.RepeatMode: ...
    def getRotation(self) -> float: ...
    def getSaturation(self) -> float: ...
    def getSelectableFlag(self) -> bool: ...
    def getSharedNodes(self) -> List[vrdNode]: ...
    def getSize(self) -> float: ...
    def getSizeMode(self) -> vrSceneplateTypes.SizeType: ...
    def getSynchronizedNodes(self) -> List[vrdNode]: ...
    def getText(self) -> str: ...
    def getTransparency(self) -> float: ...
    def getUniquePath(self) -> str: ...
    def getUrl(self) -> str: ...
    def getUseImageSequence(self) -> bool: ...
    def getVisibilityFlag(self) -> bool: ...
    def getWebStreamActive(self) -> bool: ...
    def getWhiteBalance(self) -> int: ...
    def getWidth(self) -> int: ...
    def getWorldBoundingBox(self) -> vrdBoundingBox: ...
    def getWorldTransform(self) -> QMatrix4x4: ...
    def hasParent(self, parent: vrdNode) -> bool: ...
    def isEditable(self) -> bool: ...
    def isEditedAsset(self) -> bool: ...
    def isGroup(self) -> bool: ...
    def isImplicitShared(self) -> bool: ...
    def isNull(self) -> bool: ...
    def isShared(self) -> bool: ...
    def isSharedWith(self, node: vrdNode) -> bool: ...
    def isSynchronized(self) -> bool: ...
    def isType(self, arg__1: object) -> bool: ...
    def isValid(self) -> bool: ...
    def isVisible(self) -> bool: ...
    def setBackgroundColor(self, color: QVector3D) -> None: ...
    def setBackgroundTransparency(self, transparency: float) -> None: ...
    def setBrightness(self, brightness: float) -> None: ...
    def setClickThrough(self, clickThrough: float) -> None: ...
    def setContentType(self, contentType: vrSceneplateTypes.ContentType) -> None: ...
    def setContrast(self, contrast: float) -> None: ...
    def setFont(self, fontName: str) -> None: ...
    def setFontColor(self, color: QVector3D) -> None: ...
    def setFontHeight(self, fontHeight: int) -> None: ...
    def setFontStyle(self, style: str) -> None: ...
    def setFrameOffset(self, frameOffset: int) -> None: ...
    def setHeight(self, height: int) -> None: ...
    def setHueShift(self, value: float) -> None: ...
    def setImage(self, img: vrdImage) -> None: ...
    def setImageNumber(self, imageNumber: int) -> None: ...
    def setInlineImageSequence(self, inlineImageSequence: bool) -> None: ...
    def setLocked(self, locked: bool) -> None: ...
    def setName(self, name: str) -> None: ...
    def setNodeType(self, nodeType: vrSceneplateTypes.NodeType) -> None: ...
    def setOffset(self, offset: QVector2D) -> None: ...
    def setOffsetMode(self, offsetMode: vrSceneplateTypes.SizeType) -> None: ...
    def setPosition(self, position: vrSceneplateTypes.Position) -> None: ...
    def setRepeatMode(self, repeatMode: vrSceneplateTypes.RepeatMode) -> None: ...
    def setRotation(self, rotation: float) -> None: ...
    def setSaturation(self, saturation: float) -> None: ...
    def setSelectableFlag(self, selectable: bool) -> None: ...
    def setSize(self, size: float) -> None: ...
    def setSizeMode(self, sizeMode: vrSceneplateTypes.SizeType) -> None: ...
    def setText(self, text: str) -> None: ...
    def setTransparency(self, transparency: float) -> None: ...
    def setUrl(self, url: str) -> None: ...
    def setUseImageSequence(self, useImageSequence: bool) -> None: ...
    def setVisibilityFlag(self, visible: bool) -> None: ...
    def setWebStreamActive(self, value: bool) -> None: ...
    def setWhiteBalance(self, whiteBalance: int) -> None: ...
    def setWidth(self, width: int) -> None: ...

class vrdSessionUser:
    __doc__: NoneType
    __module__: str
    userIdProperty: str
    userNameProperty: str
    userColorProperty: str
    projectCRCProperty: str
    isHmdProperty: str
    roomProperty: str
    deviceNameProperty: str
    deviceImageProperty: str
    userIconProperty: str
    def __copy__(self) -> None: ...
    def __delattr__(self) -> None: ...
    def __dir__(self, /): ...
    def __eq__(self) -> None: ...
    def __format__(self, format_spec, /): ...
    def __ge__(self) -> None: ...
    def __getattribute__(self) -> None: ...
    def __getstate__(self, /): ...
    def __gt__(self) -> None: ...
    def __hash__(self) -> None: ...
    def __init__(self) -> None: ...
    def __init_subclass__(cls) -> None: ...
    def __le__(self) -> None: ...
    def __lshift__(self) -> None: ...
    def __lt__(self) -> None: ...
    def __ne__(self) -> None: ...
    def __new__(cls) -> None: ...
    def __reduce__(self, /): ...
    def __reduce_ex__(self, protocol, /): ...
    def __repr__(self) -> None: ...
    def __rlshift__(self) -> None: ...
    def __rrshift__(self) -> None: ...
    def __rshift__(self) -> None: ...
    def __setattr__(self) -> None: ...
    def __sizeof__(self, /): ...
    def __str__(self) -> None: ...
    def __subclasshook__(self) -> None: ...
    def asType(self, arg__1: object) -> object: ...
    def getBillboardNode(self) -> vrdNode: ...
    def getCameraMatrix(self) -> QMatrix4x4: ...
    def getDeviceImage(self) -> QImage: ...
    def getDeviceName(self) -> str: ...
    def getHasLeftHand(self) -> bool: ...
    def getHasRightHand(self) -> bool: ...
    def getHeadNode(self) -> vrdNode: ...
    def getHeadTrackingMatrix(self) -> QMatrix4x4: ...
    def getIsHmd(self) -> bool: ...
    def getIsRemote(self) -> bool: ...
    def getLeftHandNode(self) -> vrdNode: ...
    def getLeftHandTrackingMatrix(self) -> QMatrix4x4: ...
    def getObjectId(self) -> int: ...
    def getProjectCRC(self) -> int: ...
    def getProjectName(self) -> str: ...
    def getRightHandNode(self) -> vrdNode: ...
    def getRightHandTrackingMatrix(self) -> QMatrix4x4: ...
    def getRoom(self) -> str: ...
    def getSpectatorCount(self) -> int: ...
    def getTorsoNode(self) -> vrdNode: ...
    def getUserColor(self) -> QColor: ...
    def getUserIcon(self) -> QImage: ...
    def getUserId(self) -> int: ...
    def getUserName(self) -> str: ...
    def isNull(self) -> bool: ...
    def isType(self, arg__1: object) -> bool: ...
    def sendPython(self, command: str, commandId: str = '') -> None: ...
    def setAvatarVisible(self, visible: bool) -> None: ...

class vrdShadowMap:
    __doc__: NoneType
    __module__: str
    resolutionProperty: str
    filterRadiusProperty: str
    def __copy__(self) -> None: ...
    def __delattr__(self) -> None: ...
    def __dir__(self, /): ...
    def __eq__(self) -> None: ...
    def __format__(self, format_spec, /): ...
    def __ge__(self) -> None: ...
    def __getattribute__(self) -> None: ...
    def __getstate__(self, /): ...
    def __gt__(self) -> None: ...
    def __hash__(self) -> None: ...
    def __init__(self) -> None: ...
    def __init_subclass__(cls) -> None: ...
    def __le__(self) -> None: ...
    def __lshift__(self) -> None: ...
    def __lt__(self) -> None: ...
    def __ne__(self) -> None: ...
    def __new__(cls) -> None: ...
    def __reduce__(self, /): ...
    def __reduce_ex__(self, protocol, /): ...
    def __repr__(self) -> None: ...
    def __rlshift__(self) -> None: ...
    def __rrshift__(self) -> None: ...
    def __rshift__(self) -> None: ...
    def __setattr__(self) -> None: ...
    def __sizeof__(self, /): ...
    def __str__(self) -> None: ...
    def __subclasshook__(self) -> None: ...
    def asType(self, arg__1: object) -> object: ...
    def getFilterRadius(self) -> float: ...
    def getObjectId(self) -> int: ...
    def getResolution(self) -> int: ...
    def isNull(self) -> bool: ...
    def isType(self, arg__1: object) -> bool: ...
    def isValid(self) -> bool: ...
    def setFilterRadius(self, radius: float) -> None: ...
    def setResolution(self, resolution: int) -> None: ...

class vrdShadowMaterial:
    __doc__: NoneType
    __module__: str
    Transparent: OpacityMode
    Solid: OpacityMode
    Off: ReflectionMode
    DiffuseOnly: ReflectionMode
    GlossyOnly: ReflectionMode
    DiffuseGlossy: ReflectionMode
    raytracingProperty: str
    occlusionColorProperty: str
    occlusionColorSpectrumProperty: str
    occlusionIntensityProperty: str
    shadowColorProperty: str
    shadowColorSpectrumProperty: str
    opacityModeProperty: str
    sortKeyProperty: str
    reflectionModeProperty: str
    diffuseColorProperty: str
    diffuseColorSpectrumProperty: str
    glossyColorProperty: str
    glossyColorSpectrumProperty: str
    reflectivityProperty: str
    roughnessProperty: str
    def OpacityMode(self) -> None: ...
    def ReflectionMode(self) -> None: ...
    def __copy__(self) -> None: ...
    def __delattr__(self) -> None: ...
    def __dir__(self, /): ...
    def __eq__(self) -> None: ...
    def __format__(self, format_spec, /): ...
    def __ge__(self) -> None: ...
    def __getattribute__(self) -> None: ...
    def __getstate__(self, /): ...
    def __gt__(self) -> None: ...
    def __hash__(self) -> None: ...
    def __init__(self) -> None: ...
    def __init_subclass__(cls) -> None: ...
    def __le__(self) -> None: ...
    def __lshift__(self) -> None: ...
    def __lt__(self) -> None: ...
    def __ne__(self) -> None: ...
    def __new__(cls) -> None: ...
    def __reduce__(self, /): ...
    def __reduce_ex__(self, protocol, /): ...
    def __repr__(self) -> None: ...
    def __rlshift__(self) -> None: ...
    def __rrshift__(self) -> None: ...
    def __rshift__(self) -> None: ...
    def __setattr__(self) -> None: ...
    def __sizeof__(self, /): ...
    def __str__(self) -> None: ...
    def __subclasshook__(self) -> None: ...
    def asType(self, arg__1: object) -> object: ...
    def duplicate(self, name: str = '') -> vrdMaterial: ...
    def getDiffuseColor(self) -> QVector3D: ...
    def getDiffuseColorSpectrum(self) -> vrSpectrum: ...
    def getGlossyColor(self) -> QVector3D: ...
    def getGlossyColorSpectrum(self) -> vrSpectrum: ...
    def getIcon(self) -> QIcon: ...
    def getLocked(self) -> bool: ...
    def getName(self) -> str: ...
    def getObjectId(self) -> int: ...
    def getOcclusionColor(self) -> QVector3D: ...
    def getOcclusionColorSpectrum(self) -> vrSpectrum: ...
    def getOcclusionIntensity(self) -> float: ...
    def getOpacityMode(self) -> vrdShadowMaterial.OpacityMode: ...
    def getPreview(self) -> QImage: ...
    def getPreviewScene(self) -> str: ...
    def getRaytracing(self) -> vrdMaterialRaytracingSettings: ...
    def getReflectionMode(self) -> vrdShadowMaterial.ReflectionMode: ...
    def getReflectivity(self) -> float: ...
    def getRoughness(self) -> float: ...
    def getShadowColor(self) -> QVector3D: ...
    def getShadowColorSpectrum(self) -> vrSpectrum: ...
    def getSortKey(self) -> int: ...
    def getTextures(self) -> List[vrdTexture]: ...
    def isAsset(self) -> bool: ...
    def isComponent(self) -> bool: ...
    def isEditable(self) -> bool: ...
    def isEditedAsset(self) -> bool: ...
    def isNull(self) -> bool: ...
    def isType(self, arg__1: object) -> bool: ...
    def isValid(self) -> bool: ...
    def setDiffuseColor(self, value: QVector3D) -> None: ...
    def setDiffuseColorSpectrum(self, value: Union[vrSpectrum, QVector3D]) -> None: ...
    def setGlossyColor(self, value: QVector3D) -> None: ...
    def setGlossyColorSpectrum(self, value: Union[vrSpectrum, QVector3D]) -> None: ...
    def setInlineAllImageSequences(self, value: bool) -> List[vrdImage]: ...
    def setLocked(self, locked: bool) -> None: ...
    def setName(self, name: str) -> None: ...
    def setOcclusionColor(self, color: QVector3D) -> None: ...
    def setOcclusionColorSpectrum(self, value: Union[vrSpectrum, QVector3D]) -> None: ...
    def setOcclusionIntensity(self, v: float) -> None: ...
    def setOpacityMode(self, mode: vrdShadowMaterial.OpacityMode) -> None: ...
    def setPreviewScene(self, name: str) -> None: ...
    def setReflectionMode(self, mode: vrdShadowMaterial.ReflectionMode) -> None: ...
    def setReflectivity(self, v: float) -> None: ...
    def setRoughness(self, roughness: float) -> None: ...
    def setShadowColor(self, color: QVector3D) -> None: ...
    def setShadowColorSpectrum(self, value: Union[vrSpectrum, QVector3D]) -> None: ...
    def setSortKey(self, value: int) -> None: ...

class vrdSkylightLocation:
    __doc__: NoneType
    __module__: str
    longitudeProperty: str
    latitudeProperty: str
    timeZoneProperty: str
    useDaylightSavingTimeProperty: str
    closestCityProperty: str
    def __copy__(self) -> None: ...
    def __delattr__(self) -> None: ...
    def __dir__(self, /): ...
    def __eq__(self) -> None: ...
    def __format__(self, format_spec, /): ...
    def __ge__(self) -> None: ...
    def __getattribute__(self) -> None: ...
    def __getstate__(self, /): ...
    def __gt__(self) -> None: ...
    def __hash__(self) -> None: ...
    def __init__(self) -> None: ...
    def __init_subclass__(cls) -> None: ...
    def __le__(self) -> None: ...
    def __lshift__(self) -> None: ...
    def __lt__(self) -> None: ...
    def __ne__(self) -> None: ...
    def __new__(cls) -> None: ...
    def __reduce__(self, /): ...
    def __reduce_ex__(self, protocol, /): ...
    def __repr__(self) -> None: ...
    def __rlshift__(self) -> None: ...
    def __rrshift__(self) -> None: ...
    def __rshift__(self) -> None: ...
    def __setattr__(self) -> None: ...
    def __sizeof__(self, /): ...
    def __str__(self) -> None: ...
    def __subclasshook__(self) -> None: ...
    def asType(self, arg__1: object) -> object: ...
    def calculateSunPosition(self, date: QDate, time: QTime) -> QVector2D: ...
    def getClosestCity(self) -> str: ...
    def getLatitude(self) -> float: ...
    def getLongitude(self) -> float: ...
    def getObjectId(self) -> int: ...
    def getTimeZone(self) -> float: ...
    def getUseDaylightSavingTime(self) -> bool: ...
    def isNull(self) -> bool: ...
    def isType(self, arg__1: object) -> bool: ...
    def isValid(self) -> bool: ...
    def setLatitude(self, value: float) -> None: ...
    def setLongitude(self, value: float) -> None: ...
    def setTimeZone(self, value: float) -> None: ...
    def setUseDaylightSavingTime(self, value: bool) -> None: ...

class vrdSkylightMaterial:
    __doc__: NoneType
    __module__: str
    environmentProperty: str
    environmentWithSunProperty: str
    resolutionProperty: str
    showCompassProperty: str
    dateProperty: str
    timeProperty: str
    skyAndSunProperty: str
    locationProperty: str
    def GeometryType(self) -> None: ...
    def __copy__(self) -> None: ...
    def __delattr__(self) -> None: ...
    def __dir__(self, /): ...
    def __eq__(self) -> None: ...
    def __format__(self, format_spec, /): ...
    def __ge__(self) -> None: ...
    def __getattribute__(self) -> None: ...
    def __getstate__(self, /): ...
    def __gt__(self) -> None: ...
    def __hash__(self) -> None: ...
    def __init__(self) -> None: ...
    def __init_subclass__(cls) -> None: ...
    def __le__(self) -> None: ...
    def __lshift__(self) -> None: ...
    def __lt__(self) -> None: ...
    def __ne__(self) -> None: ...
    def __new__(cls) -> None: ...
    def __reduce__(self, /): ...
    def __reduce_ex__(self, protocol, /): ...
    def __repr__(self) -> None: ...
    def __rlshift__(self) -> None: ...
    def __rrshift__(self) -> None: ...
    def __rshift__(self) -> None: ...
    def __setattr__(self) -> None: ...
    def __sizeof__(self, /): ...
    def __str__(self) -> None: ...
    def __subclasshook__(self) -> None: ...
    def asType(self, arg__1: object) -> object: ...
    def duplicate(self, name: str = '') -> vrdMaterial: ...
    def getColorCorrection(self) -> vrdEnvironmentColorCorrection: ...
    def getDate(self) -> QDate: ...
    def getEnvironment(self) -> vrdImage: ...
    def getEnvironmentWithSun(self) -> vrdImage: ...
    def getExposure(self) -> float: ...
    def getFilteredEnvMapSamples(self) -> int: ...
    def getGeometryFile(self) -> str: ...
    def getGeometryType(self) -> vrdEnvironmentMaterial.GeometryType: ...
    def getIcon(self) -> QIcon: ...
    def getIlluminateVolumes(self) -> bool: ...
    def getLocation(self) -> vrdSkylightLocation: ...
    def getLocked(self) -> bool: ...
    def getLuminanceMapping(self) -> float: ...
    def getName(self) -> str: ...
    def getObjectId(self) -> int: ...
    def getPreview(self) -> QImage: ...
    def getPreviewScene(self) -> str: ...
    def getRaytracing(self) -> vrdEnvironmentRaytracingSettings: ...
    def getResolution(self) -> int: ...
    def getShadowsAndIllumination(self) -> vrdEnvironmentShadowsAndIllumination: ...
    def getShowCompass(self) -> bool: ...
    def getSkyAndSun(self) -> vrdSkylightSkyAndSun: ...
    def getTextures(self) -> List[vrdTexture]: ...
    def getTime(self) -> QTime: ...
    def getTransformation(self) -> vrdEnvironmentTransformation: ...
    def isAsset(self) -> bool: ...
    def isComponent(self) -> bool: ...
    def isEditable(self) -> bool: ...
    def isEditedAsset(self) -> bool: ...
    def isFlipped(self) -> bool: ...
    def isNull(self) -> bool: ...
    def isShadowPlaneVisible(self) -> bool: ...
    def isType(self, arg__1: object) -> bool: ...
    def isValid(self) -> bool: ...
    def isVisible(self) -> bool: ...
    def setDate(self, value: QDate) -> None: ...
    def setExposure(self, exposure: float) -> None: ...
    def setFilteredEnvMapSamples(self, samples: int) -> None: ...
    def setFlipped(self, s: bool) -> None: ...
    def setGeometryFile(self, filename: str) -> None: ...
    def setGeometryType(self, value: vrdEnvironmentMaterial.GeometryType) -> None: ...
    def setIlluminateVolumes(self, value: bool) -> None: ...
    def setInlineAllImageSequences(self, value: bool) -> List[vrdImage]: ...
    def setLocked(self, locked: bool) -> None: ...
    def setLuminanceMapping(self, luminanceMapping: float) -> None: ...
    def setName(self, name: str) -> None: ...
    def setPreviewScene(self, name: str) -> None: ...
    def setResolution(self, value: int) -> None: ...
    def setShadowPlaneVisible(self, s: bool) -> None: ...
    def setShowCompass(self, value: bool) -> None: ...
    def setTime(self, value: QTime) -> None: ...
    def setVisible(self, s: bool) -> None: ...
    def toSphericalQImage(self, width: int, height: int, toneMapped: bool = True) -> QImage: ...

class vrdSkylightSkyAndSun:
    __doc__: NoneType
    __module__: str
    Artistic: SkyModel
    Realistic: SkyModel
    skyModelProperty: str
    skyTurbidityProperty: str
    sunScaleProperty: str
    sunVisibleInSpecularReflectionsProperty: str
    useMirroredSkyAsGroundProperty: str
    groundColorProperty: str
    def SkyModel(self) -> None: ...
    def __copy__(self) -> None: ...
    def __delattr__(self) -> None: ...
    def __dir__(self, /): ...
    def __eq__(self) -> None: ...
    def __format__(self, format_spec, /): ...
    def __ge__(self) -> None: ...
    def __getattribute__(self) -> None: ...
    def __getstate__(self, /): ...
    def __gt__(self) -> None: ...
    def __hash__(self) -> None: ...
    def __init__(self) -> None: ...
    def __init_subclass__(cls) -> None: ...
    def __le__(self) -> None: ...
    def __lshift__(self) -> None: ...
    def __lt__(self) -> None: ...
    def __ne__(self) -> None: ...
    def __new__(cls) -> None: ...
    def __reduce__(self, /): ...
    def __reduce_ex__(self, protocol, /): ...
    def __repr__(self) -> None: ...
    def __rlshift__(self) -> None: ...
    def __rrshift__(self) -> None: ...
    def __rshift__(self) -> None: ...
    def __setattr__(self) -> None: ...
    def __sizeof__(self, /): ...
    def __str__(self) -> None: ...
    def __subclasshook__(self) -> None: ...
    def asType(self, arg__1: object) -> object: ...
    def getGroundColor(self) -> QVector3D: ...
    def getObjectId(self) -> int: ...
    def getSkyModel(self) -> vrdSkylightSkyAndSun.SkyModel: ...
    def getSkyTurbidity(self) -> float: ...
    def getSunScale(self) -> float: ...
    def getSunVisibleInSpecularReflections(self) -> bool: ...
    def getUseMirroredSkyAsGround(self) -> bool: ...
    def isNull(self) -> bool: ...
    def isType(self, arg__1: object) -> bool: ...
    def isValid(self) -> bool: ...
    def setGroundColor(self, value: QVector3D) -> None: ...
    def setSkyModel(self, value: vrdSkylightSkyAndSun.SkyModel) -> None: ...
    def setSkyTurbidity(self, value: float) -> None: ...
    def setSunScale(self, value: float) -> None: ...
    def setSunVisibleInSpecularReflections(self, value: bool) -> None: ...
    def setUseMirroredSkyAsGround(self, value: bool) -> None: ...

class vrdSoundNode:
    __doc__: NoneType
    __module__: str
    SpatializeSourceOff: SpatializeSourceMode
    SpatializeSourceOn: SpatializeSourceMode
    SpatializeSourceAuto: SpatializeSourceMode
    NoReverb: ReverbEffect
    GenericReverb: ReverbEffect
    PaddedCellReverb: ReverbEffect
    RoomReverb: ReverbEffect
    BathRoomReverb: ReverbEffect
    LivingRoomReverb: ReverbEffect
    StoneRoomReverb: ReverbEffect
    AuditoriumReverb: ReverbEffect
    ConcertHallReverb: ReverbEffect
    CaveReverb: ReverbEffect
    ArenaReverb: ReverbEffect
    HangarReverb: ReverbEffect
    CarpetedHallwayReverb: ReverbEffect
    HallwayReverb: ReverbEffect
    StoneCorridorReverb: ReverbEffect
    AlleyReverb: ReverbEffect
    ForestReverb: ReverbEffect
    CityReverb: ReverbEffect
    MountainsReverb: ReverbEffect
    QuarryReverb: ReverbEffect
    PlainReverb: ReverbEffect
    soundFileProperty: str
    soundDataProperty: str
    gainProperty: str
    minGainProperty: str
    maxGainProperty: str
    pitchProperty: str
    referenceDistanceProperty: str
    maxDistanceProperty: str
    rolloffFactorProperty: str
    coneInnerAngleProperty: str
    coneOuterAngleProperty: str
    coneOuterGainProperty: str
    playProperty: str
    loopProperty: str
    sourceRadiusProperty: str
    spatializeSourceProperty: str
    reverbEffectProperty: str
    def ReverbEffect(self) -> None: ...
    def SpatializeSourceMode(self) -> None: ...
    def __copy__(self) -> None: ...
    def __delattr__(self) -> None: ...
    def __dir__(self, /): ...
    def __eq__(self) -> None: ...
    def __format__(self, format_spec, /): ...
    def __ge__(self) -> None: ...
    def __getattribute__(self) -> None: ...
    def __getstate__(self, /): ...
    def __gt__(self) -> None: ...
    def __hash__(self) -> None: ...
    def __init__(self) -> None: ...
    def __init_subclass__(cls) -> None: ...
    def __le__(self) -> None: ...
    def __lshift__(self) -> None: ...
    def __lt__(self) -> None: ...
    def __ne__(self) -> None: ...
    def __new__(cls) -> None: ...
    def __reduce__(self, /): ...
    def __reduce_ex__(self, protocol, /): ...
    def __repr__(self) -> None: ...
    def __rlshift__(self) -> None: ...
    def __rrshift__(self) -> None: ...
    def __rshift__(self) -> None: ...
    def __setattr__(self) -> None: ...
    def __sizeof__(self, /): ...
    def __str__(self) -> None: ...
    def __subclasshook__(self) -> None: ...
    def applyMaterial(self, material: vrdMaterial) -> None: ...
    def asType(self, arg__1: object) -> object: ...
    def getBoundingBox(self) -> vrdBoundingBox: ...
    def getChild(self, index: int) -> vrdNode: ...
    def getChildCount(self) -> int: ...
    def getChildIndex(self, child: vrdNode) -> int: ...
    def getChildren(self) -> List[vrdNode]: ...
    def getChildrenRecursive(self) -> List[vrdNode]: ...
    def getChildrenRef(self) -> vrdNodeList: ...
    def getConeInnerAngle(self) -> float: ...
    def getConeOuterAngle(self) -> float: ...
    def getConeOuterGain(self) -> float: ...
    def getGain(self) -> float: ...
    def getLocked(self) -> bool: ...
    def getLoop(self) -> bool: ...
    def getMaterial(self) -> vrdMaterial: ...
    def getMaxDistance(self) -> float: ...
    def getMaxGain(self) -> float: ...
    def getMinGain(self) -> float: ...
    def getName(self) -> str: ...
    def getObjectId(self) -> int: ...
    def getOrCreateTransformNode(self) -> vrdNode: ...
    def getParent(self) -> vrdNode: ...
    def getPath(self) -> str: ...
    def getPitch(self) -> float: ...
    def getPlay(self) -> bool: ...
    def getReferenceDistance(self) -> float: ...
    def getReverbEffect(self) -> vrdSoundNode.ReverbEffect: ...
    def getRolloffFactor(self) -> float: ...
    def getSelectableFlag(self) -> bool: ...
    def getSharedNodes(self) -> List[vrdNode]: ...
    def getSoundData(self) -> QByteArray: ...
    def getSoundFile(self) -> str: ...
    def getSourceRadius(self) -> float: ...
    def getSpatializeSource(self) -> vrdSoundNode.SpatializeSourceMode: ...
    def getSynchronizedNodes(self) -> List[vrdNode]: ...
    def getUniquePath(self) -> str: ...
    def getVisibilityFlag(self) -> bool: ...
    def getWorldBoundingBox(self) -> vrdBoundingBox: ...
    def getWorldTransform(self) -> QMatrix4x4: ...
    def hasParent(self, parent: vrdNode) -> bool: ...
    def isEditable(self) -> bool: ...
    def isEditedAsset(self) -> bool: ...
    def isGroup(self) -> bool: ...
    def isImplicitShared(self) -> bool: ...
    def isNull(self) -> bool: ...
    def isShared(self) -> bool: ...
    def isSharedWith(self, node: vrdNode) -> bool: ...
    def isSynchronized(self) -> bool: ...
    def isType(self, arg__1: object) -> bool: ...
    def isValid(self) -> bool: ...
    def isVisible(self) -> bool: ...
    def setConeInnerAngle(self, value: float) -> None: ...
    def setConeOuterAngle(self, value: float) -> None: ...
    def setConeOuterGain(self, value: float) -> None: ...
    def setGain(self, value: float) -> None: ...
    def setLocked(self, locked: bool) -> None: ...
    def setLoop(self, value: bool) -> None: ...
    def setMaxDistance(self, value: float) -> None: ...
    def setMaxGain(self, value: float) -> None: ...
    def setMinGain(self, value: float) -> None: ...
    def setName(self, name: str) -> None: ...
    def setPitch(self, value: float) -> None: ...
    def setPlay(self, value: bool) -> None: ...
    def setReferenceDistance(self, value: float) -> None: ...
    def setReverbEffect(self, value: vrdSoundNode.ReverbEffect) -> None: ...
    def setRolloffFactor(self, value: float) -> None: ...
    def setSelectableFlag(self, selectable: bool) -> None: ...
    def setSoundData(self, value: Union[QByteArray, bytes]) -> None: ...
    def setSoundFile(self, value: str) -> None: ...
    def setSourceRadius(self, value: float) -> None: ...
    def setSpatializeSource(self, value: vrdSoundNode.SpatializeSourceMode) -> None: ...
    def setVisibilityFlag(self, visible: bool) -> None: ...
    def start(self) -> None: ...
    def stop(self) -> None: ...

class vrdSoundObstructorNode:
    __doc__: NoneType
    __module__: str
    def __copy__(self) -> None: ...
    def __delattr__(self) -> None: ...
    def __dir__(self, /): ...
    def __eq__(self) -> None: ...
    def __format__(self, format_spec, /): ...
    def __ge__(self) -> None: ...
    def __getattribute__(self) -> None: ...
    def __getstate__(self, /): ...
    def __gt__(self) -> None: ...
    def __hash__(self) -> None: ...
    def __init__(self) -> None: ...
    def __init_subclass__(cls) -> None: ...
    def __le__(self) -> None: ...
    def __lshift__(self) -> None: ...
    def __lt__(self) -> None: ...
    def __ne__(self) -> None: ...
    def __new__(cls) -> None: ...
    def __reduce__(self, /): ...
    def __reduce_ex__(self, protocol, /): ...
    def __repr__(self) -> None: ...
    def __rlshift__(self) -> None: ...
    def __rrshift__(self) -> None: ...
    def __rshift__(self) -> None: ...
    def __setattr__(self) -> None: ...
    def __sizeof__(self, /): ...
    def __str__(self) -> None: ...
    def __subclasshook__(self) -> None: ...
    def applyMaterial(self, material: vrdMaterial) -> None: ...
    def asType(self, arg__1: object) -> object: ...
    def getBoundingBox(self) -> vrdBoundingBox: ...
    def getChild(self, index: int) -> vrdNode: ...
    def getChildCount(self) -> int: ...
    def getChildIndex(self, child: vrdNode) -> int: ...
    def getChildren(self) -> List[vrdNode]: ...
    def getChildrenRecursive(self) -> List[vrdNode]: ...
    def getChildrenRef(self) -> vrdNodeList: ...
    def getLocked(self) -> bool: ...
    def getMaterial(self) -> vrdMaterial: ...
    def getName(self) -> str: ...
    def getObjectId(self) -> int: ...
    def getOrCreateTransformNode(self) -> vrdNode: ...
    def getParent(self) -> vrdNode: ...
    def getPath(self) -> str: ...
    def getSelectableFlag(self) -> bool: ...
    def getSharedNodes(self) -> List[vrdNode]: ...
    def getSynchronizedNodes(self) -> List[vrdNode]: ...
    def getUniquePath(self) -> str: ...
    def getVisibilityFlag(self) -> bool: ...
    def getWorldBoundingBox(self) -> vrdBoundingBox: ...
    def getWorldTransform(self) -> QMatrix4x4: ...
    def hasParent(self, parent: vrdNode) -> bool: ...
    def isEditable(self) -> bool: ...
    def isEditedAsset(self) -> bool: ...
    def isGroup(self) -> bool: ...
    def isImplicitShared(self) -> bool: ...
    def isNull(self) -> bool: ...
    def isShared(self) -> bool: ...
    def isSharedWith(self, node: vrdNode) -> bool: ...
    def isSynchronized(self) -> bool: ...
    def isType(self, arg__1: object) -> bool: ...
    def isValid(self) -> bool: ...
    def isVisible(self) -> bool: ...
    def setLocked(self, locked: bool) -> None: ...
    def setName(self, name: str) -> None: ...
    def setSelectableFlag(self, selectable: bool) -> None: ...
    def setVisibilityFlag(self, visible: bool) -> None: ...

class vrdSphereEnvironmentMaterial:
    __doc__: NoneType
    __module__: str
    environmentProperty: str
    useImageSequenceProperty: str
    imageNumberProperty: str
    frameOffsetProperty: str
    inlineImageSequenceProperty: str
    hDRLightStudioProperty: str
    def GeometryType(self) -> None: ...
    def __copy__(self) -> None: ...
    def __delattr__(self) -> None: ...
    def __dir__(self, /): ...
    def __eq__(self) -> None: ...
    def __format__(self, format_spec, /): ...
    def __ge__(self) -> None: ...
    def __getattribute__(self) -> None: ...
    def __getstate__(self, /): ...
    def __gt__(self) -> None: ...
    def __hash__(self) -> None: ...
    def __init__(self) -> None: ...
    def __init_subclass__(cls) -> None: ...
    def __le__(self) -> None: ...
    def __lshift__(self) -> None: ...
    def __lt__(self) -> None: ...
    def __ne__(self) -> None: ...
    def __new__(cls) -> None: ...
    def __reduce__(self, /): ...
    def __reduce_ex__(self, protocol, /): ...
    def __repr__(self) -> None: ...
    def __rlshift__(self) -> None: ...
    def __rrshift__(self) -> None: ...
    def __rshift__(self) -> None: ...
    def __setattr__(self) -> None: ...
    def __sizeof__(self, /): ...
    def __str__(self) -> None: ...
    def __subclasshook__(self) -> None: ...
    def asType(self, arg__1: object) -> object: ...
    def objectEnvironmentBrightness(self, factor: float, threshold: float) -> bool: ...
    def createLightSources(self, lightSources: Sequence[vrdEnvironmentLightSource]) -> None: ...
    def duplicate(self, name: str = '') -> vrdMaterial: ...
    def findLightSources(self, numLights: int) -> List[vrdEnvironmentLightSource]: ...
    def getColorCorrection(self) -> vrdEnvironmentColorCorrection: ...
    def getEnvironment(self) -> vrdImage: ...
    def getExposure(self) -> float: ...
    def getFilteredEnvMapSamples(self) -> int: ...
    def getFrameOffset(self) -> int: ...
    def getGeometryFile(self) -> str: ...
    def getGeometryType(self) -> vrdEnvironmentMaterial.GeometryType: ...
    def getHDRLightStudio(self) -> vrdHDRLightStudio: ...
    def getIcon(self) -> QIcon: ...
    def getIlluminateVolumes(self) -> bool: ...
    def getImageNumber(self) -> int: ...
    def getInlineImageSequence(self) -> bool: ...
    def getLocked(self) -> bool: ...
    def getLuminanceMapping(self) -> float: ...
    def getName(self) -> str: ...
    def getObjectId(self) -> int: ...
    def getPreview(self) -> QImage: ...
    def getPreviewScene(self) -> str: ...
    def getRaytracing(self) -> vrdEnvironmentRaytracingSettings: ...
    def getShadowsAndIllumination(self) -> vrdEnvironmentShadowsAndIllumination: ...
    def getTextures(self) -> List[vrdTexture]: ...
    def getTransformation(self) -> vrdEnvironmentTransformation: ...
    def getUseImageSequence(self) -> bool: ...
    def isAsset(self) -> bool: ...
    def isComponent(self) -> bool: ...
    def isEditable(self) -> bool: ...
    def isEditedAsset(self) -> bool: ...
    def isFlipped(self) -> bool: ...
    def isNull(self) -> bool: ...
    def isShadowPlaneVisible(self) -> bool: ...
    def isType(self, arg__1: object) -> bool: ...
    def isValid(self) -> bool: ...
    def isVisible(self) -> bool: ...
    def setEnvironment(self, image: vrdImage) -> None: ...
    def setExposure(self, exposure: float) -> None: ...
    def setFilteredEnvMapSamples(self, samples: int) -> None: ...
    def setFlipped(self, s: bool) -> None: ...
    def setFrameOffset(self, frameOffset: int) -> None: ...
    def setGeometryFile(self, filename: str) -> None: ...
    def setGeometryType(self, value: vrdEnvironmentMaterial.GeometryType) -> None: ...
    def setIlluminateVolumes(self, value: bool) -> None: ...
    def setImageNumber(self, imageNumber: int) -> None: ...
    def setInlineAllImageSequences(self, value: bool) -> List[vrdImage]: ...
    def setInlineImageSequence(self, inlineImageSequence: bool) -> None: ...
    def setLocked(self, locked: bool) -> None: ...
    def setLuminanceMapping(self, luminanceMapping: float) -> None: ...
    def setName(self, name: str) -> None: ...
    def setPreviewScene(self, name: str) -> None: ...
    def setShadowPlaneVisible(self, s: bool) -> None: ...
    def setUseImageSequence(self, useImageSequence: bool) -> None: ...
    def setVisible(self, s: bool) -> None: ...
    def toSphericalQImage(self, width: int, height: int, toneMapped: bool = True) -> QImage: ...

class vrdSphericalLightNode:
    __doc__: NoneType
    __module__: str
    def QualityMode(self) -> None: ...
    def __copy__(self) -> None: ...
    def __delattr__(self) -> None: ...
    def __dir__(self, /): ...
    def __eq__(self) -> None: ...
    def __format__(self, format_spec, /): ...
    def __ge__(self) -> None: ...
    def __getattribute__(self) -> None: ...
    def __getstate__(self, /): ...
    def __gt__(self) -> None: ...
    def __hash__(self) -> None: ...
    def __init__(self) -> None: ...
    def __init_subclass__(cls) -> None: ...
    def __le__(self) -> None: ...
    def __lshift__(self) -> None: ...
    def __lt__(self) -> None: ...
    def __ne__(self) -> None: ...
    def __new__(cls) -> None: ...
    def __reduce__(self, /): ...
    def __reduce_ex__(self, protocol, /): ...
    def __repr__(self) -> None: ...
    def __rlshift__(self) -> None: ...
    def __rrshift__(self) -> None: ...
    def __rshift__(self) -> None: ...
    def __setattr__(self) -> None: ...
    def __sizeof__(self, /): ...
    def __str__(self) -> None: ...
    def __subclasshook__(self) -> None: ...
    def applyMaterial(self, material: vrdMaterial) -> None: ...
    def asType(self, arg__1: object) -> object: ...
    def captureTransformVariant(self, name: str) -> None: ...
    def deleteTransformVariant(self, variant: vrdTransformNodeVariant) -> None: ...
    def findTransformVariant(self, name: str) -> vrdTransformNodeVariant: ...
    def getAttenuation(self) -> vrLightTypes.Attenuation: ...
    def getBakeLayer(self) -> int: ...
    def getBoundingBox(self) -> vrdBoundingBox: ...
    def getCastShadowOnShadowMaterial(self) -> bool: ...
    def getChild(self, index: int) -> vrdNode: ...
    def getChildCount(self) -> int: ...
    def getChildIndex(self, child: vrdNode) -> int: ...
    def getChildren(self) -> List[vrdNode]: ...
    def getChildrenRecursive(self) -> List[vrdNode]: ...
    def getChildrenRef(self) -> vrdNodeList: ...
    def getDiffuseColor(self) -> QVector3D: ...
    def getDiffuseColorSpectrum(self) -> vrSpectrum: ...
    def getEulerRotationOrder(self) -> vrTransformTypes.EulerRotationOrder: ...
    def getGlossyColor(self) -> QVector3D: ...
    def getGlossyColorSpectrum(self) -> vrSpectrum: ...
    def getGroundShadowIntensity(self) -> float: ...
    def getIlluminateScene(self) -> bool: ...
    def getIlluminateShadowMaterial(self) -> bool: ...
    def getImportanceMultiplier(self) -> float: ...
    def getIntensity(self) -> float: ...
    def getInteractiveMode(self) -> vrdAreaLightNode.QualityMode: ...
    def getInteractiveQuality(self) -> int: ...
    def getIsPhysicallyBased(self) -> bool: ...
    def getLightProfile(self) -> vrdLightProfile: ...
    def getLightTransform(self) -> vrdLightTransform: ...
    def getLightUnit(self) -> vrLightTypes.Unit: ...
    def getLocalLight(self) -> bool: ...
    def getLocked(self) -> bool: ...
    def getMaterial(self) -> vrdMaterial: ...
    def getMaterialShadowIntensity(self) -> float: ...
    def getModuleNode(self) -> vrdBaseLightNode: ...
    def getName(self) -> str: ...
    def getObjectId(self) -> int: ...
    def getOn(self) -> bool: ...
    def getOrCreateTransformNode(self) -> vrdNode: ...
    def getParent(self) -> vrdNode: ...
    def getPath(self) -> str: ...
    def getPrimaryVisibility(self) -> bool: ...
    def getRotatePivot(self) -> QVector3D: ...
    def getRotatePivotTranslation(self) -> QVector3D: ...
    def getRotationAsEuler(self) -> QVector3D: ...
    def getRotationAsQuaternion(self) -> QQuaternion: ...
    def getRotationOrientationAsEuler(self) -> QVector3D: ...
    def getRotationOrientationAsQuaternion(self) -> QQuaternion: ...
    def getScale(self) -> QVector3D: ...
    def getScalePivot(self) -> QVector3D: ...
    def getScalePivotTranslation(self) -> QVector3D: ...
    def getSelectableFlag(self) -> bool: ...
    def getShadowMap(self) -> vrdShadowMap: ...
    def getSharedNodes(self) -> List[vrdNode]: ...
    def getShear(self) -> QVector3D: ...
    def getStillFrameMode(self) -> vrdAreaLightNode.QualityMode: ...
    def getStillFrameQuality(self) -> int: ...
    def getSynchronizedNodes(self) -> List[vrdNode]: ...
    def getTemperature(self) -> int: ...
    def getTexture(self) -> vrdLightTexture: ...
    def getTransform(self) -> QMatrix4x4: ...
    def getTransformVariants(self) -> List[vrdTransformNodeVariant]: ...
    def getTranslation(self) -> QVector3D: ...
    def getUniquePath(self) -> str: ...
    def getUseLightTemperature(self) -> bool: ...
    def getVisibilityFlag(self) -> bool: ...
    def getVisibleInReflections(self) -> bool: ...
    def getVisualizationVisible(self) -> bool: ...
    def getVolumeIlluminationMode(self) -> vrLightTypes.VolumeIlluminationMode: ...
    def getWorldBoundingBox(self) -> vrdBoundingBox: ...
    def getWorldRotatePivot(self) -> QVector3D: ...
    def getWorldScalePivot(self) -> QVector3D: ...
    def getWorldTransform(self) -> QMatrix4x4: ...
    def getWorldTranslation(self) -> QVector3D: ...
    def hasParent(self, parent: vrdNode) -> bool: ...
    def isEditable(self) -> bool: ...
    def isEditedAsset(self) -> bool: ...
    def isGroup(self) -> bool: ...
    def isImplicitShared(self) -> bool: ...
    def isNull(self) -> bool: ...
    def isShared(self) -> bool: ...
    def isSharedWith(self, node: vrdNode) -> bool: ...
    def isSynchronized(self) -> bool: ...
    def isType(self, arg__1: object) -> bool: ...
    def isValid(self) -> bool: ...
    def isVisible(self) -> bool: ...
    def resetTransformation(self) -> None: ...
    def setAttenuation(self, attenuation: vrLightTypes.Attenuation) -> None: ...
    def setBakeLayer(self, layer: int) -> None: ...
    def setCastShadowOnShadowMaterial(self, castShadow: bool) -> None: ...
    def setDiffuseColor(self, diffuseColor: QVector3D) -> None: ...
    def setDiffuseColorSpectrum(self, spectrum: Union[vrSpectrum, QVector3D]) -> None: ...
    def setEulerRotationOrder(self, rotationOrder: vrTransformTypes.EulerRotationOrder) -> None: ...
    def setGlossyColor(self, glossyColor: QVector3D) -> None: ...
    def setGlossyColorSpectrum(self, spectrum: Union[vrSpectrum, QVector3D]) -> None: ...
    def setGroundShadowIntensity(self, intensity: float) -> None: ...
    def setIlluminateScene(self, illuminateScene: bool) -> None: ...
    def setIlluminateShadowMaterial(self, illuminateShadosMeterial: bool) -> None: ...
    def setImportanceMultiplier(self, importanceMultiplier: float) -> None: ...
    def setIntensity(self, intensity: float) -> None: ...
    def setInteractiveMode(self, value: vrdAreaLightNode.QualityMode) -> None: ...
    def setInteractiveQuality(self, quality: int) -> None: ...
    def setIsPhysicallyBased(self, on: bool) -> None: ...
    def setLightUnit(self, unit: vrLightTypes.Unit) -> None: ...
    def setLocalLight(self, isLocalLight: bool) -> None: ...
    def setLocked(self, locked: bool) -> None: ...
    def setMaterialShadowIntensity(self, intensity: float) -> None: ...
    def setName(self, name: str) -> None: ...
    def setOn(self, on: bool) -> None: ...
    def setPrimaryVisibility(self, visible: bool) -> None: ...
    def setRotatePivot(self, rotatePivot: QVector3D) -> None: ...
    def setRotatePivotTranslation(self, rotatePivotTranslation: QVector3D) -> None: ...
    def setRotationAsEuler(self, rotation: QVector3D) -> None: ...
    def setRotationAsQuaternion(self, rotation: QQuaternion) -> None: ...
    def setRotationOrientationAsEuler(self, rotationOrientation: QVector3D) -> None: ...
    def setRotationOrientationAsQuaternion(self, orientation: QQuaternion) -> None: ...
    def setScale(self, scale: QVector3D) -> None: ...
    def setScalePivot(self, scalePivot: QVector3D) -> None: ...
    def setScalePivotTranslation(self, scalePivotTranslation: QVector3D) -> None: ...
    def setSelectableFlag(self, selectable: bool) -> None: ...
    def setShear(self, shear: QVector3D) -> None: ...
    def setStillFrameMode(self, value: vrdAreaLightNode.QualityMode) -> None: ...
    def setStillFrameQuality(self, quality: int) -> None: ...
    def setTemperature(self, kelvin: int) -> None: ...
    def setTransform(self, matrix: Union[QMatrix4x4, QTransform]) -> None: ...
    def setTranslation(self, translation: QVector3D) -> None: ...
    def setUseLightTemperature(self, use: bool) -> None: ...
    def setVisibilityFlag(self, visible: bool) -> None: ...
    def setVisibleInReflections(self, visible: bool) -> None: ...
    def setVisualizationVisible(self, showVisualization: bool) -> None: ...
    def setVolumeIlluminationMode(self, mode: vrLightTypes.VolumeIlluminationMode) -> None: ...
    def setWorldRotatePivot(self, rotatePivot: QVector3D) -> None: ...
    def setWorldScalePivot(self, scalePivot: QVector3D) -> None: ...
    def setWorldTransform(self, matrix: Union[QMatrix4x4, QTransform]) -> None: ...
    def setWorldTranslation(self, translation: QVector3D) -> None: ...

class vrdSpotLightNode:
    __doc__: NoneType
    __module__: str
    coneAngleProperty: str
    penumbraAngleProperty: str
    def __copy__(self) -> None: ...
    def __delattr__(self) -> None: ...
    def __dir__(self, /): ...
    def __eq__(self) -> None: ...
    def __format__(self, format_spec, /): ...
    def __ge__(self) -> None: ...
    def __getattribute__(self) -> None: ...
    def __getstate__(self, /): ...
    def __gt__(self) -> None: ...
    def __hash__(self) -> None: ...
    def __init__(self) -> None: ...
    def __init_subclass__(cls) -> None: ...
    def __le__(self) -> None: ...
    def __lshift__(self) -> None: ...
    def __lt__(self) -> None: ...
    def __ne__(self) -> None: ...
    def __new__(cls) -> None: ...
    def __reduce__(self, /): ...
    def __reduce_ex__(self, protocol, /): ...
    def __repr__(self) -> None: ...
    def __rlshift__(self) -> None: ...
    def __rrshift__(self) -> None: ...
    def __rshift__(self) -> None: ...
    def __setattr__(self) -> None: ...
    def __sizeof__(self, /): ...
    def __str__(self) -> None: ...
    def __subclasshook__(self) -> None: ...
    def applyMaterial(self, material: vrdMaterial) -> None: ...
    def asType(self, arg__1: object) -> object: ...
    def captureTransformVariant(self, name: str) -> None: ...
    def deleteTransformVariant(self, variant: vrdTransformNodeVariant) -> None: ...
    def findTransformVariant(self, name: str) -> vrdTransformNodeVariant: ...
    def getAttenuation(self) -> vrLightTypes.Attenuation: ...
    def getBakeLayer(self) -> int: ...
    def getBoundingBox(self) -> vrdBoundingBox: ...
    def getCastShadowOnShadowMaterial(self) -> bool: ...
    def getChild(self, index: int) -> vrdNode: ...
    def getChildCount(self) -> int: ...
    def getChildIndex(self, child: vrdNode) -> int: ...
    def getChildren(self) -> List[vrdNode]: ...
    def getChildrenRecursive(self) -> List[vrdNode]: ...
    def getChildrenRef(self) -> vrdNodeList: ...
    def getConeAngle(self) -> float: ...
    def getDiffuseColor(self) -> QVector3D: ...
    def getDiffuseColorSpectrum(self) -> vrSpectrum: ...
    def getEulerRotationOrder(self) -> vrTransformTypes.EulerRotationOrder: ...
    def getGlossyColor(self) -> QVector3D: ...
    def getGlossyColorSpectrum(self) -> vrSpectrum: ...
    def getGroundShadowIntensity(self) -> float: ...
    def getIlluminateScene(self) -> bool: ...
    def getIlluminateShadowMaterial(self) -> bool: ...
    def getImportanceMultiplier(self) -> float: ...
    def getIntensity(self) -> float: ...
    def getIsPhysicallyBased(self) -> bool: ...
    def getLensFlareEffect(self) -> vrdLensFlareEffect: ...
    def getLightProfile(self) -> vrdLightProfile: ...
    def getLightTransform(self) -> vrdLightTransform: ...
    def getLightUnit(self) -> vrLightTypes.Unit: ...
    def getLocalLight(self) -> bool: ...
    def getLocked(self) -> bool: ...
    def getMaterial(self) -> vrdMaterial: ...
    def getMaterialShadowIntensity(self) -> float: ...
    def getModuleNode(self) -> vrdBaseLightNode: ...
    def getName(self) -> str: ...
    def getObjectId(self) -> int: ...
    def getOn(self) -> bool: ...
    def getOrCreateTransformNode(self) -> vrdNode: ...
    def getParent(self) -> vrdNode: ...
    def getPath(self) -> str: ...
    def getPenumbraAngle(self) -> float: ...
    def getRotatePivot(self) -> QVector3D: ...
    def getRotatePivotTranslation(self) -> QVector3D: ...
    def getRotationAsEuler(self) -> QVector3D: ...
    def getRotationAsQuaternion(self) -> QQuaternion: ...
    def getRotationOrientationAsEuler(self) -> QVector3D: ...
    def getRotationOrientationAsQuaternion(self) -> QQuaternion: ...
    def getScale(self) -> QVector3D: ...
    def getScalePivot(self) -> QVector3D: ...
    def getScalePivotTranslation(self) -> QVector3D: ...
    def getSelectableFlag(self) -> bool: ...
    def getShadowMap(self) -> vrdShadowMap: ...
    def getSharedNodes(self) -> List[vrdNode]: ...
    def getShear(self) -> QVector3D: ...
    def getSynchronizedNodes(self) -> List[vrdNode]: ...
    def getTemperature(self) -> int: ...
    def getTexture(self) -> vrdLightTexture: ...
    def getTransform(self) -> QMatrix4x4: ...
    def getTransformVariants(self) -> List[vrdTransformNodeVariant]: ...
    def getTranslation(self) -> QVector3D: ...
    def getUniquePath(self) -> str: ...
    def getUseLightTemperature(self) -> bool: ...
    def getVisibilityFlag(self) -> bool: ...
    def getVisualizationScale(self) -> float: ...
    def getVisualizationVisible(self) -> bool: ...
    def getVolumeIlluminationMode(self) -> vrLightTypes.VolumeIlluminationMode: ...
    def getWorldBoundingBox(self) -> vrdBoundingBox: ...
    def getWorldRotatePivot(self) -> QVector3D: ...
    def getWorldScalePivot(self) -> QVector3D: ...
    def getWorldTransform(self) -> QMatrix4x4: ...
    def getWorldTranslation(self) -> QVector3D: ...
    def hasParent(self, parent: vrdNode) -> bool: ...
    def isEditable(self) -> bool: ...
    def isEditedAsset(self) -> bool: ...
    def isGroup(self) -> bool: ...
    def isImplicitShared(self) -> bool: ...
    def isNull(self) -> bool: ...
    def isShared(self) -> bool: ...
    def isSharedWith(self, node: vrdNode) -> bool: ...
    def isSynchronized(self) -> bool: ...
    def isType(self, arg__1: object) -> bool: ...
    def isValid(self) -> bool: ...
    def isVisible(self) -> bool: ...
    def resetTransformation(self) -> None: ...
    def setAttenuation(self, attenuation: vrLightTypes.Attenuation) -> None: ...
    def setBakeLayer(self, layer: int) -> None: ...
    def setCastShadowOnShadowMaterial(self, castShadow: bool) -> None: ...
    def setConeAngle(self, angle: float) -> None: ...
    def setDiffuseColor(self, diffuseColor: QVector3D) -> None: ...
    def setDiffuseColorSpectrum(self, spectrum: Union[vrSpectrum, QVector3D]) -> None: ...
    def setEulerRotationOrder(self, rotationOrder: vrTransformTypes.EulerRotationOrder) -> None: ...
    def setGlossyColor(self, glossyColor: QVector3D) -> None: ...
    def setGlossyColorSpectrum(self, spectrum: Union[vrSpectrum, QVector3D]) -> None: ...
    def setGroundShadowIntensity(self, intensity: float) -> None: ...
    def setIlluminateScene(self, illuminateScene: bool) -> None: ...
    def setIlluminateShadowMaterial(self, illuminateShadosMeterial: bool) -> None: ...
    def setImportanceMultiplier(self, importanceMultiplier: float) -> None: ...
    def setIntensity(self, intensity: float) -> None: ...
    def setIsPhysicallyBased(self, on: bool) -> None: ...
    def setLightUnit(self, unit: vrLightTypes.Unit) -> None: ...
    def setLocalLight(self, isLocalLight: bool) -> None: ...
    def setLocked(self, locked: bool) -> None: ...
    def setMaterialShadowIntensity(self, intensity: float) -> None: ...
    def setName(self, name: str) -> None: ...
    def setOn(self, on: bool) -> None: ...
    def setPenumbraAngle(self, angle: float) -> None: ...
    def setRotatePivot(self, rotatePivot: QVector3D) -> None: ...
    def setRotatePivotTranslation(self, rotatePivotTranslation: QVector3D) -> None: ...
    def setRotationAsEuler(self, rotation: QVector3D) -> None: ...
    def setRotationAsQuaternion(self, rotation: QQuaternion) -> None: ...
    def setRotationOrientationAsEuler(self, rotationOrientation: QVector3D) -> None: ...
    def setRotationOrientationAsQuaternion(self, orientation: QQuaternion) -> None: ...
    def setScale(self, scale: QVector3D) -> None: ...
    def setScalePivot(self, scalePivot: QVector3D) -> None: ...
    def setScalePivotTranslation(self, scalePivotTranslation: QVector3D) -> None: ...
    def setSelectableFlag(self, selectable: bool) -> None: ...
    def setShear(self, shear: QVector3D) -> None: ...
    def setTemperature(self, kelvin: int) -> None: ...
    def setTransform(self, matrix: Union[QMatrix4x4, QTransform]) -> None: ...
    def setTranslation(self, translation: QVector3D) -> None: ...
    def setUseLightTemperature(self, use: bool) -> None: ...
    def setVisibilityFlag(self, visible: bool) -> None: ...
    def setVisualizationScale(self, scale: float) -> None: ...
    def setVisualizationVisible(self, showVisualization: bool) -> None: ...
    def setVolumeIlluminationMode(self, mode: vrLightTypes.VolumeIlluminationMode) -> None: ...
    def setWorldRotatePivot(self, rotatePivot: QVector3D) -> None: ...
    def setWorldScalePivot(self, scalePivot: QVector3D) -> None: ...
    def setWorldTransform(self, matrix: Union[QMatrix4x4, QTransform]) -> None: ...
    def setWorldTranslation(self, translation: QVector3D) -> None: ...

class vrdStereoSwitchNode:
    __doc__: NoneType
    __module__: str
    def __copy__(self) -> None: ...
    def __delattr__(self) -> None: ...
    def __dir__(self, /): ...
    def __eq__(self) -> None: ...
    def __format__(self, format_spec, /): ...
    def __ge__(self) -> None: ...
    def __getattribute__(self) -> None: ...
    def __getstate__(self, /): ...
    def __gt__(self) -> None: ...
    def __hash__(self) -> None: ...
    def __init__(self) -> None: ...
    def __init_subclass__(cls) -> None: ...
    def __le__(self) -> None: ...
    def __lshift__(self) -> None: ...
    def __lt__(self) -> None: ...
    def __ne__(self) -> None: ...
    def __new__(cls) -> None: ...
    def __reduce__(self, /): ...
    def __reduce_ex__(self, protocol, /): ...
    def __repr__(self) -> None: ...
    def __rlshift__(self) -> None: ...
    def __rrshift__(self) -> None: ...
    def __rshift__(self) -> None: ...
    def __setattr__(self) -> None: ...
    def __sizeof__(self, /): ...
    def __str__(self) -> None: ...
    def __subclasshook__(self) -> None: ...
    def applyMaterial(self, material: vrdMaterial) -> None: ...
    def asType(self, arg__1: object) -> object: ...
    def getBoundingBox(self) -> vrdBoundingBox: ...
    def getChild(self, index: int) -> vrdNode: ...
    def getChildCount(self) -> int: ...
    def getChildIndex(self, child: vrdNode) -> int: ...
    def getChildren(self) -> List[vrdNode]: ...
    def getChildrenRecursive(self) -> List[vrdNode]: ...
    def getChildrenRef(self) -> vrdNodeList: ...
    def getLocked(self) -> bool: ...
    def getMaterial(self) -> vrdMaterial: ...
    def getName(self) -> str: ...
    def getObjectId(self) -> int: ...
    def getOrCreateTransformNode(self) -> vrdNode: ...
    def getParent(self) -> vrdNode: ...
    def getPath(self) -> str: ...
    def getSelectableFlag(self) -> bool: ...
    def getSharedNodes(self) -> List[vrdNode]: ...
    def getSynchronizedNodes(self) -> List[vrdNode]: ...
    def getUniquePath(self) -> str: ...
    def getVisibilityFlag(self) -> bool: ...
    def getWorldBoundingBox(self) -> vrdBoundingBox: ...
    def getWorldTransform(self) -> QMatrix4x4: ...
    def hasParent(self, parent: vrdNode) -> bool: ...
    def isEditable(self) -> bool: ...
    def isEditedAsset(self) -> bool: ...
    def isGroup(self) -> bool: ...
    def isImplicitShared(self) -> bool: ...
    def isNull(self) -> bool: ...
    def isShared(self) -> bool: ...
    def isSharedWith(self, node: vrdNode) -> bool: ...
    def isSynchronized(self) -> bool: ...
    def isType(self, arg__1: object) -> bool: ...
    def isValid(self) -> bool: ...
    def isVisible(self) -> bool: ...
    def setLocked(self, locked: bool) -> None: ...
    def setName(self, name: str) -> None: ...
    def setSelectableFlag(self, selectable: bool) -> None: ...
    def setVisibilityFlag(self, visible: bool) -> None: ...

class vrdSubstanceEnvironmentMaterial:
    __doc__: NoneType
    __module__: str
    environmentProperty: str
    textureGeneratorMaterialProperty: str
    def GeometryType(self) -> None: ...
    def __copy__(self) -> None: ...
    def __delattr__(self) -> None: ...
    def __dir__(self, /): ...
    def __eq__(self) -> None: ...
    def __format__(self, format_spec, /): ...
    def __ge__(self) -> None: ...
    def __getattribute__(self) -> None: ...
    def __getstate__(self, /): ...
    def __gt__(self) -> None: ...
    def __hash__(self) -> None: ...
    def __init__(self) -> None: ...
    def __init_subclass__(cls) -> None: ...
    def __le__(self) -> None: ...
    def __lshift__(self) -> None: ...
    def __lt__(self) -> None: ...
    def __ne__(self) -> None: ...
    def __new__(cls) -> None: ...
    def __reduce__(self, /): ...
    def __reduce_ex__(self, protocol, /): ...
    def __repr__(self) -> None: ...
    def __rlshift__(self) -> None: ...
    def __rrshift__(self) -> None: ...
    def __rshift__(self) -> None: ...
    def __setattr__(self) -> None: ...
    def __sizeof__(self, /): ...
    def __str__(self) -> None: ...
    def __subclasshook__(self) -> None: ...
    def asType(self, arg__1: object) -> object: ...
    def duplicate(self, name: str = '') -> vrdMaterial: ...
    def getColorCorrection(self) -> vrdEnvironmentColorCorrection: ...
    def getEnvironment(self) -> vrdImage: ...
    def getExposure(self) -> float: ...
    def getFilteredEnvMapSamples(self) -> int: ...
    def getGeometryFile(self) -> str: ...
    def getGeometryType(self) -> vrdEnvironmentMaterial.GeometryType: ...
    def getIcon(self) -> QIcon: ...
    def getIlluminateVolumes(self) -> bool: ...
    def getLocked(self) -> bool: ...
    def getLuminanceMapping(self) -> float: ...
    def getName(self) -> str: ...
    def getObjectId(self) -> int: ...
    def getPreview(self) -> QImage: ...
    def getPreviewScene(self) -> str: ...
    def getRaytracing(self) -> vrdEnvironmentRaytracingSettings: ...
    def getShadowsAndIllumination(self) -> vrdEnvironmentShadowsAndIllumination: ...
    def getTextureGeneratorMaterial(self) -> vrdSubstanceMaterial: ...
    def getTextures(self) -> List[vrdTexture]: ...
    def getTransformation(self) -> vrdEnvironmentTransformation: ...
    def isAsset(self) -> bool: ...
    def isComponent(self) -> bool: ...
    def isEditable(self) -> bool: ...
    def isEditedAsset(self) -> bool: ...
    def isFlipped(self) -> bool: ...
    def isNull(self) -> bool: ...
    def isShadowPlaneVisible(self) -> bool: ...
    def isType(self, arg__1: object) -> bool: ...
    def isValid(self) -> bool: ...
    def isVisible(self) -> bool: ...
    def setExposure(self, exposure: float) -> None: ...
    def setFilteredEnvMapSamples(self, samples: int) -> None: ...
    def setFlipped(self, s: bool) -> None: ...
    def setGeometryFile(self, filename: str) -> None: ...
    def setGeometryType(self, value: vrdEnvironmentMaterial.GeometryType) -> None: ...
    def setIlluminateVolumes(self, value: bool) -> None: ...
    def setInlineAllImageSequences(self, value: bool) -> List[vrdImage]: ...
    def setLocked(self, locked: bool) -> None: ...
    def setLuminanceMapping(self, luminanceMapping: float) -> None: ...
    def setName(self, name: str) -> None: ...
    def setPreviewScene(self, name: str) -> None: ...
    def setShadowPlaneVisible(self, s: bool) -> None: ...
    def setVisible(self, s: bool) -> None: ...
    def toSphericalQImage(self, width: int, height: int, toneMapped: bool = True) -> QImage: ...

class vrdSubstanceMaterial:
    __doc__: NoneType
    __module__: str
    syncOutputSizeProperty: str
    activeGraphIndexProperty: str
    propertiesProperty: str
    def __copy__(self) -> None: ...
    def __delattr__(self) -> None: ...
    def __dir__(self, /): ...
    def __eq__(self) -> None: ...
    def __format__(self, format_spec, /): ...
    def __ge__(self) -> None: ...
    def __getattribute__(self) -> None: ...
    def __getstate__(self, /): ...
    def __gt__(self) -> None: ...
    def __hash__(self) -> None: ...
    def __init__(self) -> None: ...
    def __init_subclass__(cls) -> None: ...
    def __le__(self) -> None: ...
    def __lshift__(self) -> None: ...
    def __lt__(self) -> None: ...
    def __ne__(self) -> None: ...
    def __new__(cls) -> None: ...
    def __reduce__(self, /): ...
    def __reduce_ex__(self, protocol, /): ...
    def __repr__(self) -> None: ...
    def __rlshift__(self) -> None: ...
    def __rrshift__(self) -> None: ...
    def __rshift__(self) -> None: ...
    def __setattr__(self) -> None: ...
    def __sizeof__(self, /): ...
    def __str__(self) -> None: ...
    def __subclasshook__(self) -> None: ...
    def applyPreset(self, index: int, applyMode: vrSubstanceTypes.PresetApplyMode = vrSubstanceTypes.PresetApplyMode.UsePreference, setDefaultOutputSize: bool = False) -> None: ...
    def asType(self, arg__1: object) -> object: ...
    def clearPresets(self) -> None: ...
    def createPreset(self, name: str) -> vrdSubstancePreset: ...
    def duplicate(self, name: str = '') -> vrdMaterial: ...
    def exportPresets(self, indexes: Sequence[int], path: str) -> bool: ...
    def getActiveGraphIndex(self) -> int: ...
    def getActiveGraphName(self) -> str: ...
    def getActiveGraphProperty(self, parameterId: str) -> Any: ...
    def getAnalytic(self) -> vrdAnalyticSettings: ...
    def getArchivePath(self) -> str: ...
    def getCommon(self) -> vrdBRDFCommonSettings: ...
    def getGraphCount(self) -> int: ...
    def getGraphName(self, index: int) -> str: ...
    def getIcon(self) -> QIcon: ...
    def getLocked(self) -> bool: ...
    def getNPR(self) -> vrdNPRSettings: ...
    def getName(self) -> str: ...
    def getObjectId(self) -> int: ...
    def getPreset(self, index: int) -> vrdSubstancePreset: ...
    def getPresetCount(self) -> int: ...
    def getPresets(self) -> List[vrdSubstancePreset]: ...
    def getPreview(self) -> QImage: ...
    def getPreviewScene(self) -> str: ...
    def getProperties(self) -> vrdSubstanceProperties: ...
    def getProperty(self, graphName: str, parameterId: str) -> Any: ...
    def getRaytracing(self) -> vrdMaterialRaytracingSettings: ...
    def getRoundedEdges(self) -> vrdRoundedEdges: ...
    def getSyncOutputSize(self) -> bool: ...
    def getTextures(self) -> List[vrdTexture]: ...
    def getTransparency(self) -> vrdTransparency: ...
    def hasArchiveData(self) -> bool: ...
    def hasImage(self, name: str) -> bool: ...
    def importPresets(self, pathList: Sequence[str], importForOtherGraphs: bool) -> bool: ...
    def isArchiveValid(self) -> bool: ...
    def isAsset(self) -> bool: ...
    def isComponent(self) -> bool: ...
    def isDisplacementActive(self) -> bool: ...
    def isEditable(self) -> bool: ...
    def isEditedAsset(self) -> bool: ...
    def isInputVisible(self, dependency: str) -> bool: ...
    def isNull(self) -> bool: ...
    def isType(self, arg__1: object) -> bool: ...
    def isValid(self) -> bool: ...
    def loadArchive(self, path: str) -> bool: ...
    def recapturePreset(self, index: int) -> None: ...
    def removePresets(self, indexes: Sequence[int]) -> bool: ...
    def reorderPresets(self, indexes: Sequence[int]) -> None: ...
    def resetGraph(self) -> None: ...
    def setActiveGraphIndex(self, index: int) -> None: ...
    def setActiveGraphProperty(self, parameterId: str, value: Any) -> None: ...
    def setInlineAllImageSequences(self, value: bool) -> List[vrdImage]: ...
    def setLocked(self, locked: bool) -> None: ...
    def setName(self, name: str) -> None: ...
    def setPreviewScene(self, name: str) -> None: ...
    def setProperty(self, graphName: str, parameterId: str, value: Any) -> None: ...
    def setSyncOutputSize(self, syncOutputSize: bool) -> None: ...

class vrdSubstancePreset:
    __doc__: NoneType
    __module__: str
    nameProperty: str
    def __copy__(self) -> None: ...
    def __delattr__(self) -> None: ...
    def __dir__(self, /): ...
    def __eq__(self) -> None: ...
    def __format__(self, format_spec, /): ...
    def __ge__(self) -> None: ...
    def __getattribute__(self) -> None: ...
    def __getstate__(self, /): ...
    def __gt__(self) -> None: ...
    def __hash__(self) -> None: ...
    def __init__(self) -> None: ...
    def __init_subclass__(cls) -> None: ...
    def __le__(self) -> None: ...
    def __lshift__(self) -> None: ...
    def __lt__(self) -> None: ...
    def __ne__(self) -> None: ...
    def __new__(cls) -> None: ...
    def __reduce__(self, /): ...
    def __reduce_ex__(self, protocol, /): ...
    def __repr__(self) -> None: ...
    def __rlshift__(self) -> None: ...
    def __rrshift__(self) -> None: ...
    def __rshift__(self) -> None: ...
    def __setattr__(self) -> None: ...
    def __sizeof__(self, /): ...
    def __str__(self) -> None: ...
    def __subclasshook__(self) -> None: ...
    def asType(self, arg__1: object) -> object: ...
    def getImportPath(self) -> str: ...
    def getName(self) -> str: ...
    def getObjectId(self) -> int: ...
    def isNull(self) -> bool: ...
    def isType(self, arg__1: object) -> bool: ...
    def isValid(self) -> bool: ...
    def setName(self, name: str) -> None: ...

class vrdSubstanceProperties:
    __doc__: NoneType
    __module__: str
    def __copy__(self) -> None: ...
    def __delattr__(self) -> None: ...
    def __dir__(self, /): ...
    def __eq__(self) -> None: ...
    def __format__(self, format_spec, /): ...
    def __ge__(self) -> None: ...
    def __getattribute__(self) -> None: ...
    def __getstate__(self, /): ...
    def __gt__(self) -> None: ...
    def __hash__(self) -> None: ...
    def __init__(self) -> None: ...
    def __init_subclass__(cls) -> None: ...
    def __le__(self) -> None: ...
    def __lshift__(self) -> None: ...
    def __lt__(self) -> None: ...
    def __ne__(self) -> None: ...
    def __new__(cls) -> None: ...
    def __reduce__(self, /): ...
    def __reduce_ex__(self, protocol, /): ...
    def __repr__(self) -> None: ...
    def __rlshift__(self) -> None: ...
    def __rrshift__(self) -> None: ...
    def __rshift__(self) -> None: ...
    def __setattr__(self) -> None: ...
    def __sizeof__(self, /): ...
    def __str__(self) -> None: ...
    def __subclasshook__(self) -> None: ...
    def asType(self, arg__1: object) -> object: ...
    def getObjectId(self) -> int: ...
    def isNull(self) -> bool: ...
    def isType(self, arg__1: object) -> bool: ...
    def isValid(self) -> bool: ...
    def update(self, obj: QObject, envMatObjectId: int) -> None: ...

class vrdSubsurfaceScattering:
    __doc__: NoneType
    __module__: str
    Off: Mode
    ThinWalledTranslucency: Mode
    VolumeScattering: Mode
    Custom: MediumType
    Diamond: MediumType
    Polysilicon: MediumType
    AcrylicGlass: MediumType
    PlasticPolystyrene: MediumType
    PlasticPolycarbonates: MediumType
    Ethanol: MediumType
    Methanol: MediumType
    Water19degrees: MediumType
    Water24degrees: MediumType
    CrownGlassBorosilicateGlass: MediumType
    GlassLanthanumDenseFlint: MediumType
    GlassBariumFlint: MediumType
    GlassDenseFlint: MediumType
    QuartzFusedSilica: MediumType
    FusedGermania: MediumType
    modeProperty: str
    colorProperty: str
    colorSpectrumProperty: str
    radiusProperty: str
    radiusSpectrumProperty: str
    weightProperty: str
    roughnessProperty: str
    attenuationProperty: str
    asymmetryProperty: str
    depthProperty: str
    mediumTypeProperty: str
    refractionIndexProperty: str
    textureProperty: str
    def MediumType(self) -> None: ...
    def Mode(self) -> None: ...
    def __copy__(self) -> None: ...
    def __delattr__(self) -> None: ...
    def __dir__(self, /): ...
    def __eq__(self) -> None: ...
    def __format__(self, format_spec, /): ...
    def __ge__(self) -> None: ...
    def __getattribute__(self) -> None: ...
    def __getstate__(self, /): ...
    def __gt__(self) -> None: ...
    def __hash__(self) -> None: ...
    def __init__(self) -> None: ...
    def __init_subclass__(cls) -> None: ...
    def __le__(self) -> None: ...
    def __lshift__(self) -> None: ...
    def __lt__(self) -> None: ...
    def __ne__(self) -> None: ...
    def __new__(cls) -> None: ...
    def __reduce__(self, /): ...
    def __reduce_ex__(self, protocol, /): ...
    def __repr__(self) -> None: ...
    def __rlshift__(self) -> None: ...
    def __rrshift__(self) -> None: ...
    def __rshift__(self) -> None: ...
    def __setattr__(self) -> None: ...
    def __sizeof__(self, /): ...
    def __str__(self) -> None: ...
    def __subclasshook__(self) -> None: ...
    def asType(self, arg__1: object) -> object: ...
    def getAsymmetry(self) -> float: ...
    def getAttenuation(self) -> float: ...
    def getColor(self) -> QVector3D: ...
    def getColorSpectrum(self) -> vrSpectrum: ...
    def getDepth(self) -> int: ...
    def getMediumType(self) -> vrdSubsurfaceScattering.MediumType: ...
    def getMode(self) -> vrdSubsurfaceScattering.Mode: ...
    def getObjectId(self) -> int: ...
    def getRadius(self) -> QVector3D: ...
    def getRadiusSpectrum(self) -> vrSpectrum: ...
    def getRefractionIndex(self) -> float: ...
    def getRoughness(self) -> float: ...
    def getTexture(self) -> vrdTexture: ...
    def getWeight(self) -> float: ...
    def isNull(self) -> bool: ...
    def isType(self, arg__1: object) -> bool: ...
    def isValid(self) -> bool: ...
    def setAsymmetry(self, asymmetry: float) -> None: ...
    def setAttenuation(self, attenuation: float) -> None: ...
    def setColor(self, color: QVector3D) -> None: ...
    def setColorSpectrum(self, value: Union[vrSpectrum, QVector3D]) -> None: ...
    def setDepth(self, depth: int) -> None: ...
    def setMediumType(self, type: vrdSubsurfaceScattering.MediumType) -> None: ...
    def setMode(self, mode: vrdSubsurfaceScattering.Mode) -> None: ...
    def setRadius(self, radius: QVector3D) -> None: ...
    def setRadiusSpectrum(self, value: Union[vrSpectrum, QVector3D]) -> None: ...
    def setRefractionIndex(self, indexOfRefraction: float) -> None: ...
    def setRoughness(self, roughness: float) -> None: ...
    def setWeight(self, weight: float) -> None: ...

class vrdSurfaceNode:
    __doc__: NoneType
    __module__: str
    def __copy__(self) -> None: ...
    def __delattr__(self) -> None: ...
    def __dir__(self, /): ...
    def __eq__(self) -> None: ...
    def __format__(self, format_spec, /): ...
    def __ge__(self) -> None: ...
    def __getattribute__(self) -> None: ...
    def __getstate__(self, /): ...
    def __gt__(self) -> None: ...
    def __hash__(self) -> None: ...
    def __init__(self) -> None: ...
    def __init_subclass__(cls) -> None: ...
    def __le__(self) -> None: ...
    def __lshift__(self) -> None: ...
    def __lt__(self) -> None: ...
    def __ne__(self) -> None: ...
    def __new__(cls) -> None: ...
    def __reduce__(self, /): ...
    def __reduce_ex__(self, protocol, /): ...
    def __repr__(self) -> None: ...
    def __rlshift__(self) -> None: ...
    def __rrshift__(self) -> None: ...
    def __rshift__(self) -> None: ...
    def __setattr__(self) -> None: ...
    def __sizeof__(self, /): ...
    def __str__(self) -> None: ...
    def __subclasshook__(self) -> None: ...
    def applyMaterial(self, material: vrdMaterial) -> None: ...
    def asType(self, arg__1: object) -> object: ...
    def captureTransformVariant(self, name: str) -> None: ...
    def createTextureBake(self) -> vrdTextureBake: ...
    def deleteTransformVariant(self, variant: vrdTransformNodeVariant) -> None: ...
    def findTransformVariant(self, name: str) -> vrdTransformNodeVariant: ...
    def getActiveBakeType(self) -> vrBakeTypes.BakeType: ...
    def getBoundingBox(self) -> vrdBoundingBox: ...
    def getChild(self, index: int) -> vrdNode: ...
    def getChildCount(self) -> int: ...
    def getChildIndex(self, child: vrdNode) -> int: ...
    def getChildren(self) -> List[vrdNode]: ...
    def getChildrenRecursive(self) -> List[vrdNode]: ...
    def getChildrenRef(self) -> vrdNodeList: ...
    def getEulerRotationOrder(self) -> vrTransformTypes.EulerRotationOrder: ...
    def getIndices(self) -> List[int]: ...
    def getLocked(self) -> bool: ...
    def getMaterial(self) -> vrdMaterial: ...
    def getName(self) -> str: ...
    def getNormals(self) -> List[float]: ...
    def getObjectId(self) -> int: ...
    def getOrCreateTransformNode(self) -> vrdNode: ...
    def getParent(self) -> vrdNode: ...
    def getPath(self) -> str: ...
    def getPositions(self) -> List[float]: ...
    def getPrimitiveCount(self) -> int: ...
    def getPrimitiveType(self) -> vrGeometryTypes.PrimitiveType: ...
    def getRotatePivot(self) -> QVector3D: ...
    def getRotatePivotTranslation(self) -> QVector3D: ...
    def getRotationAsEuler(self) -> QVector3D: ...
    def getRotationAsQuaternion(self) -> QQuaternion: ...
    def getRotationOrientationAsEuler(self) -> QVector3D: ...
    def getRotationOrientationAsQuaternion(self) -> QQuaternion: ...
    def getScale(self) -> QVector3D: ...
    def getScalePivot(self) -> QVector3D: ...
    def getScalePivotTranslation(self) -> QVector3D: ...
    def getSelectableFlag(self) -> bool: ...
    def getSharedNodes(self) -> List[vrdNode]: ...
    def getShear(self) -> QVector3D: ...
    def getSynchronizedNodes(self) -> List[vrdNode]: ...
    def getTexCoords(self, texSlot: int = 0) -> List[float]: ...
    def getTexCoordsDimension(self, texSlot: int = 0) -> int: ...
    def getTextureBake(self) -> vrdTextureBake: ...
    def getTextureBakeState(self) -> vrBakeTypes.BakeState: ...
    def getTransform(self) -> QMatrix4x4: ...
    def getTransformVariants(self) -> List[vrdTransformNodeVariant]: ...
    def getTranslation(self) -> QVector3D: ...
    def getUniquePath(self) -> str: ...
    def getVertexBake(self) -> vrdVertexBake: ...
    def getVertexBakeState(self) -> vrBakeTypes.BakeState: ...
    def getVertexCount(self) -> int: ...
    def getVisibilityFlag(self) -> bool: ...
    def getWorldBoundingBox(self) -> vrdBoundingBox: ...
    def getWorldRotatePivot(self) -> QVector3D: ...
    def getWorldScalePivot(self) -> QVector3D: ...
    def getWorldTransform(self) -> QMatrix4x4: ...
    def getWorldTranslation(self) -> QVector3D: ...
    def hasParent(self, parent: vrdNode) -> bool: ...
    def hasUVSet(self, set: vrUVTypes.UVSet) -> bool: ...
    def isBSide(self) -> bool: ...
    def isComponent(self) -> bool: ...
    def isEditable(self) -> bool: ...
    def isEditedAsset(self) -> bool: ...
    def isGroup(self) -> bool: ...
    def isImplicitShared(self) -> bool: ...
    def isMesh(self) -> bool: ...
    def isNull(self) -> bool: ...
    def isShared(self) -> bool: ...
    def isSharedWith(self, node: vrdNode) -> bool: ...
    def isShell(self) -> bool: ...
    def isSurface(self) -> bool: ...
    def isSynchronized(self) -> bool: ...
    def isType(self, arg__1: object) -> bool: ...
    def isValid(self) -> bool: ...
    def isVisible(self) -> bool: ...
    def resetTransformation(self) -> None: ...
    def setActiveBakeType(self, type: vrBakeTypes.BakeType) -> None: ...
    def setBSide(self, isBSide: bool) -> None: ...
    def setEulerRotationOrder(self, rotationOrder: vrTransformTypes.EulerRotationOrder) -> None: ...
    def setIndices(self, indices: Sequence[int]) -> None: ...
    def setLocked(self, locked: bool) -> None: ...
    def setName(self, name: str) -> None: ...
    def setNormals(self, normals: Sequence[float]) -> None: ...
    def setPositions(self, positions: Sequence[float]) -> None: ...
    def setPrimitiveType(self, primitiveType: vrGeometryTypes.PrimitiveType) -> None: ...
    def setRotatePivot(self, rotatePivot: QVector3D) -> None: ...
    def setRotatePivotTranslation(self, rotatePivotTranslation: QVector3D) -> None: ...
    def setRotationAsEuler(self, rotation: QVector3D) -> None: ...
    def setRotationAsQuaternion(self, rotation: QQuaternion) -> None: ...
    def setRotationOrientationAsEuler(self, rotationOrientation: QVector3D) -> None: ...
    def setRotationOrientationAsQuaternion(self, orientation: QQuaternion) -> None: ...
    def setScale(self, scale: QVector3D) -> None: ...
    def setScalePivot(self, scalePivot: QVector3D) -> None: ...
    def setScalePivotTranslation(self, scalePivotTranslation: QVector3D) -> None: ...
    def setSelectableFlag(self, selectable: bool) -> None: ...
    def setShear(self, shear: QVector3D) -> None: ...
    def setTexCoords(self, coordinates: Sequence[float], texSlot: int = 0, dimension: int = 2) -> None: ...
    def setToBSide(self, isBSide: bool) -> None: ...
    def setTransform(self, matrix: Union[QMatrix4x4, QTransform]) -> None: ...
    def setTranslation(self, translation: QVector3D) -> None: ...
    def setVisibilityFlag(self, visible: bool) -> None: ...
    def setWorldRotatePivot(self, rotatePivot: QVector3D) -> None: ...
    def setWorldScalePivot(self, scalePivot: QVector3D) -> None: ...
    def setWorldTransform(self, matrix: Union[QMatrix4x4, QTransform]) -> None: ...
    def setWorldTranslation(self, translation: QVector3D) -> None: ...

class vrdSwitchMaterial:
    __doc__: NoneType
    __module__: str
    choiceProperty: str
    stateNamesProperty: str
    def __copy__(self) -> None: ...
    def __delattr__(self) -> None: ...
    def __dir__(self, /): ...
    def __eq__(self) -> None: ...
    def __format__(self, format_spec, /): ...
    def __ge__(self) -> None: ...
    def __getattribute__(self) -> None: ...
    def __getstate__(self, /): ...
    def __gt__(self) -> None: ...
    def __hash__(self) -> None: ...
    def __init__(self) -> None: ...
    def __init_subclass__(cls) -> None: ...
    def __le__(self) -> None: ...
    def __lshift__(self) -> None: ...
    def __lt__(self) -> None: ...
    def __ne__(self) -> None: ...
    def __new__(cls) -> None: ...
    def __reduce__(self, /): ...
    def __reduce_ex__(self, protocol, /): ...
    def __repr__(self) -> None: ...
    def __rlshift__(self) -> None: ...
    def __rrshift__(self) -> None: ...
    def __rshift__(self) -> None: ...
    def __setattr__(self) -> None: ...
    def __sizeof__(self, /): ...
    def __str__(self) -> None: ...
    def __subclasshook__(self) -> None: ...
    def asType(self, arg__1: object) -> object: ...
    def duplicate(self, name: str = '') -> vrdMaterial: ...
    def getChoice(self) -> int: ...
    def getIcon(self) -> QIcon: ...
    def getLocked(self) -> bool: ...
    def getMaterials(self) -> List[vrdMaterial]: ...
    def getMaterialsRef(self) -> vrdMaterialList: ...
    def getName(self) -> str: ...
    def getObjectId(self) -> int: ...
    def getPreview(self) -> QImage: ...
    def getPreviewScene(self) -> str: ...
    def getStateNames(self) -> List[str]: ...
    def getTextures(self) -> List[vrdTexture]: ...
    def isAsset(self) -> bool: ...
    def isComponent(self) -> bool: ...
    def isEditable(self) -> bool: ...
    def isEditedAsset(self) -> bool: ...
    def isNull(self) -> bool: ...
    def isType(self, arg__1: object) -> bool: ...
    def isValid(self) -> bool: ...
    def setChoice(self, index: int) -> None: ...
    def setInlineAllImageSequences(self, value: bool) -> List[vrdImage]: ...
    def setLocked(self, locked: bool) -> None: ...
    def setMaterials(self, materials: Sequence[vrdMaterial]) -> None: ...
    def setName(self, name: str) -> None: ...
    def setPreviewScene(self, name: str) -> None: ...

class vrdSwitchNode:
    __doc__: NoneType
    __module__: str
    choiceProperty: str
    def __copy__(self) -> None: ...
    def __delattr__(self) -> None: ...
    def __dir__(self, /): ...
    def __eq__(self) -> None: ...
    def __format__(self, format_spec, /): ...
    def __ge__(self) -> None: ...
    def __getattribute__(self) -> None: ...
    def __getstate__(self, /): ...
    def __gt__(self) -> None: ...
    def __hash__(self) -> None: ...
    def __init__(self) -> None: ...
    def __init_subclass__(cls) -> None: ...
    def __le__(self) -> None: ...
    def __lshift__(self) -> None: ...
    def __lt__(self) -> None: ...
    def __ne__(self) -> None: ...
    def __new__(cls) -> None: ...
    def __reduce__(self, /): ...
    def __reduce_ex__(self, protocol, /): ...
    def __repr__(self) -> None: ...
    def __rlshift__(self) -> None: ...
    def __rrshift__(self) -> None: ...
    def __rshift__(self) -> None: ...
    def __setattr__(self) -> None: ...
    def __sizeof__(self, /): ...
    def __str__(self) -> None: ...
    def __subclasshook__(self) -> None: ...
    def applyMaterial(self, material: vrdMaterial) -> None: ...
    def asType(self, arg__1: object) -> object: ...
    def getBoundingBox(self) -> vrdBoundingBox: ...
    def getChild(self, index: int) -> vrdNode: ...
    def getChildCount(self) -> int: ...
    def getChildIndex(self, child: vrdNode) -> int: ...
    def getChildren(self) -> List[vrdNode]: ...
    def getChildrenRecursive(self) -> List[vrdNode]: ...
    def getChildrenRef(self) -> vrdNodeList: ...
    def getChoice(self) -> int: ...
    def getLocked(self) -> bool: ...
    def getMaterial(self) -> vrdMaterial: ...
    def getName(self) -> str: ...
    def getObjectId(self) -> int: ...
    def getOrCreateTransformNode(self) -> vrdNode: ...
    def getParent(self) -> vrdNode: ...
    def getPath(self) -> str: ...
    def getSelectableFlag(self) -> bool: ...
    def getSharedNodes(self) -> List[vrdNode]: ...
    def getSynchronizedNodes(self) -> List[vrdNode]: ...
    def getUniquePath(self) -> str: ...
    def getVisibilityFlag(self) -> bool: ...
    def getWorldBoundingBox(self) -> vrdBoundingBox: ...
    def getWorldTransform(self) -> QMatrix4x4: ...
    def hasParent(self, parent: vrdNode) -> bool: ...
    def isEditable(self) -> bool: ...
    def isEditedAsset(self) -> bool: ...
    def isGroup(self) -> bool: ...
    def isImplicitShared(self) -> bool: ...
    def isNull(self) -> bool: ...
    def isShared(self) -> bool: ...
    def isSharedWith(self, node: vrdNode) -> bool: ...
    def isSynchronized(self) -> bool: ...
    def isType(self, arg__1: object) -> bool: ...
    def isValid(self) -> bool: ...
    def isVisible(self) -> bool: ...
    def setChoice(self, choice: int) -> None: ...
    def setLocked(self, locked: bool) -> None: ...
    def setName(self, name: str) -> None: ...
    def setSelectableFlag(self, selectable: bool) -> None: ...
    def setVisibilityFlag(self, visible: bool) -> None: ...

class vrdTessellationSettings:
    __doc__: NoneType
    __module__: str
    chordDeviationProperty: str
    maxChordLengthProperty: str
    normalToleranceProperty: str
    stitchingToleranceProperty: str
    useStitchingProperty: str
    def __copy__(self) -> None: ...
    def __delattr__(self) -> None: ...
    def __dir__(self, /): ...
    def __eq__(self) -> None: ...
    def __format__(self, format_spec, /): ...
    def __ge__(self) -> None: ...
    def __getattribute__(self) -> None: ...
    def __getstate__(self, /): ...
    def __gt__(self) -> None: ...
    def __hash__(self) -> None: ...
    def __init__(self) -> None: ...
    def __init_subclass__(cls) -> None: ...
    def __le__(self) -> None: ...
    def __lt__(self) -> None: ...
    def __ne__(self) -> None: ...
    def __new__(cls) -> None: ...
    def __reduce__(self, /): ...
    def __reduce_ex__(self, protocol, /): ...
    def __repr__(self) -> None: ...
    def __setattr__(self) -> None: ...
    def __sizeof__(self, /): ...
    def __str__(self) -> None: ...
    def __subclasshook__(self) -> None: ...
    def getChordDeviation(self) -> float: ...
    def getMaxChordLength(self) -> float: ...
    def getNormalTolerance(self) -> float: ...
    def getStitchingTolerance(self) -> float: ...
    def getUseStitching(self) -> bool: ...
    def setChordDeviation(self, value: float) -> None: ...
    def setMaxChordLength(self, value: float) -> None: ...
    def setNormalTolerance(self, value: float) -> None: ...
    def setStitchingTolerance(self, value: float) -> None: ...
    def setUseStitching(self, value: bool) -> None: ...

class vrdTexture:
    __doc__: NoneType
    __module__: str
    useTextureProperty: str
    imageProperty: str
    useImageSequenceProperty: str
    imageNumberProperty: str
    frameOffsetProperty: str
    inlineImageSequenceProperty: str
    linkTextureSettingsProperty: str
    mappingTypeProperty: str
    repeatModeUProperty: str
    repeatModeVProperty: str
    connectRepeatModesProperty: str
    useTextureSizeProperty: str
    textureSizeProperty: str
    repeatProperty: str
    offsetProperty: str
    rotateProperty: str
    anisotropyProperty: str
    planarProjectionCenterProperty: str
    planarProjectionOrientationProperty: str
    planarProjectionSizeProperty: str
    planarProjectionKeepAspectRatioProperty: str
    planarProjectionSingleSidedProperty: str
    planarProjectionFitSizeProperty: str
    planarProjectionObjectCenterProperty: str
    triplanarBlendProperty: str
    uniformRepeatProperty: str
    triplanarXRepeatProperty: str
    triplanarYRepeatProperty: str
    triplanarZRepeatProperty: str
    triplanarXOffsetProperty: str
    triplanarYOffsetProperty: str
    triplanarZOffsetProperty: str
    triplanarXRotationProperty: str
    triplanarYRotationProperty: str
    triplanarZRotationProperty: str
    manipulateProperty: str
    useInfiniteTilingProperty: str
    infiniteTilingGridSizeProperty: str
    infiniteTilingMaxRotationProperty: str
    infiniteTilingContrastProperty: str
    infiniteTilingHueWeightProperty: str
    infiniteTilingSaturationWeightProperty: str
    infiniteTilingValueWeightProperty: str
    useAlphaProperty: str
    useCutoutProperty: str
    gammaProperty: str
    invertTextureProperty: str
    def __copy__(self) -> None: ...
    def __delattr__(self) -> None: ...
    def __dir__(self, /): ...
    def __eq__(self) -> None: ...
    def __format__(self, format_spec, /): ...
    def __ge__(self) -> None: ...
    def __getattribute__(self) -> None: ...
    def __getstate__(self, /): ...
    def __gt__(self) -> None: ...
    def __hash__(self) -> None: ...
    def __init__(self) -> None: ...
    def __init_subclass__(cls) -> None: ...
    def __le__(self) -> None: ...
    def __lshift__(self) -> None: ...
    def __lt__(self) -> None: ...
    def __ne__(self) -> None: ...
    def __new__(cls) -> None: ...
    def __reduce__(self, /): ...
    def __reduce_ex__(self, protocol, /): ...
    def __repr__(self) -> None: ...
    def __rlshift__(self) -> None: ...
    def __rrshift__(self) -> None: ...
    def __rshift__(self) -> None: ...
    def __setattr__(self) -> None: ...
    def __sizeof__(self, /): ...
    def __str__(self) -> None: ...
    def __subclasshook__(self) -> None: ...
    def asType(self, arg__1: object) -> object: ...
    def getAnisotropy(self) -> float: ...
    def getComponentName(self) -> str: ...
    def getConnectRepeatModes(self) -> bool: ...
    def getFrameOffset(self) -> int: ...
    def getGamma(self) -> float: ...
    def getImage(self) -> vrdImage: ...
    def getImageNumber(self) -> int: ...
    def getInfiniteTilingContrast(self) -> float: ...
    def getInfiniteTilingGridSize(self) -> int: ...
    def getInfiniteTilingHueWeight(self) -> float: ...
    def getInfiniteTilingMaxRotation(self) -> float: ...
    def getInfiniteTilingSaturationWeight(self) -> float: ...
    def getInfiniteTilingValueWeight(self) -> float: ...
    def getInlineImageSequence(self) -> bool: ...
    def getInvertTexture(self) -> bool: ...
    def getLinkTextureSettings(self) -> bool: ...
    def getManipulate(self) -> bool: ...
    def getMappingType(self) -> vrTextureTypes.MappingType: ...
    def getObjectId(self) -> int: ...
    def getOffset(self) -> QVector2D: ...
    def getPlanarProjectionCenter(self) -> QVector3D: ...
    def getPlanarProjectionKeepAspectRatio(self) -> bool: ...
    def getPlanarProjectionOrientation(self) -> QVector2D: ...
    def getPlanarProjectionSingleSided(self) -> bool: ...
    def getPlanarProjectionSize(self) -> QVector3D: ...
    def getRepeat(self) -> QVector2D: ...
    def getRepeatModeU(self) -> vrTextureTypes.RepeatMode: ...
    def getRepeatModeV(self) -> vrTextureTypes.RepeatMode: ...
    def getRotate(self) -> float: ...
    def getTextureSize(self) -> QVector2D: ...
    def getTriplanarBlend(self) -> float: ...
    def getTriplanarXOffset(self) -> QVector2D: ...
    def getTriplanarXRepeat(self) -> QVector2D: ...
    def getTriplanarXRotation(self) -> float: ...
    def getTriplanarYOffset(self) -> QVector2D: ...
    def getTriplanarYRepeat(self) -> QVector2D: ...
    def getTriplanarYRotation(self) -> float: ...
    def getTriplanarZOffset(self) -> QVector2D: ...
    def getTriplanarZRepeat(self) -> QVector2D: ...
    def getTriplanarZRotation(self) -> float: ...
    def getUniformRepeat(self) -> bool: ...
    def getUseAlpha(self) -> bool: ...
    def getUseCutout(self) -> bool: ...
    def getUseImageSequence(self) -> bool: ...
    def getUseInfiniteTiling(self) -> bool: ...
    def getUseTexture(self) -> bool: ...
    def getUseTextureSize(self) -> bool: ...
    def isNull(self) -> bool: ...
    def isType(self, arg__1: object) -> bool: ...
    def isValid(self) -> bool: ...
    def setAnisotropy(self, anisotropy: float) -> None: ...
    def setConnectRepeatModes(self, s: bool) -> None: ...
    def setFrameOffset(self, frameOffset: int) -> None: ...
    def setGamma(self, gamma: float) -> None: ...
    def setImage(self, img: vrdImage) -> None: ...
    def setImageNumber(self, imageNumber: int) -> None: ...
    def setInfiniteTilingContrast(self, contrast: float) -> None: ...
    def setInfiniteTilingGridSize(self, gridSize: int) -> None: ...
    def setInfiniteTilingHueWeight(self, hueWeight: float) -> None: ...
    def setInfiniteTilingMaxRotation(self, maxRotation: float) -> None: ...
    def setInfiniteTilingSaturationWeight(self, saturationWeight: float) -> None: ...
    def setInfiniteTilingValueWeight(self, valueWeight: float) -> None: ...
    def setInlineImageSequence(self, s: bool) -> None: ...
    def setInvertTexture(self, invertTexture: bool) -> None: ...
    def setLinkTextureSettings(self, s: bool) -> None: ...
    def setManipulate(self, s: bool) -> None: ...
    def setMappingType(self, type: vrTextureTypes.MappingType) -> None: ...
    def setOffset(self, offset: QVector2D) -> None: ...
    def setPlanarProjectionCenter(self, center: QVector3D) -> None: ...
    def setPlanarProjectionFitSize(self) -> None: ...
    def setPlanarProjectionKeepAspectRatio(self, s: bool) -> None: ...
    def setPlanarProjectionObjectCenter(self) -> None: ...
    def setPlanarProjectionOrientation(self, orientation: QVector2D) -> None: ...
    def setPlanarProjectionPlane(self, center: QVector3D, direction: QVector3D) -> None: ...
    def setPlanarProjectionSingleSided(self, s: bool) -> None: ...
    def setPlanarProjectionSize(self, size: QVector3D) -> None: ...
    def setRepeat(self, repeat: QVector2D) -> None: ...
    def setRepeatModeU(self, mode: vrTextureTypes.RepeatMode) -> None: ...
    def setRepeatModeV(self, mode: vrTextureTypes.RepeatMode) -> None: ...
    def setRotate(self, rotate: float) -> None: ...
    def setTextureSize(self, size: QVector2D) -> None: ...
    def setTriplanarBlend(self, blend: float) -> None: ...
    def setTriplanarXOffset(self, offset: QVector2D) -> None: ...
    def setTriplanarXRepeat(self, repeat: QVector2D) -> None: ...
    def setTriplanarXRotation(self, rotation: float) -> None: ...
    def setTriplanarYOffset(self, offset: QVector2D) -> None: ...
    def setTriplanarYRepeat(self, repeat: QVector2D) -> None: ...
    def setTriplanarYRotation(self, rotation: float) -> None: ...
    def setTriplanarZOffset(self, offset: QVector2D) -> None: ...
    def setTriplanarZRepeat(self, repeat: QVector2D) -> None: ...
    def setTriplanarZRotation(self, rotation: float) -> None: ...
    def setUniformRepeat(self, s: bool) -> None: ...
    def setUseAlpha(self, s: bool) -> None: ...
    def setUseCutout(self, s: bool) -> None: ...
    def setUseImageSequence(self, s: bool) -> None: ...
    def setUseInfiniteTiling(self, s: bool) -> None: ...
    def setUseTexture(self, s: bool) -> None: ...
    def setUseTextureSize(self, s: bool) -> None: ...
    def supportsGamma(self) -> bool: ...
    def supportsInvertTexture(self) -> bool: ...
    def supportsMappingType(self) -> bool: ...
    def supportsUseAlpha(self) -> bool: ...
    def supportsUseCutout(self) -> bool: ...

class vrdTextureBake:
    __doc__: NoneType
    __module__: str
    lightmapProperty: str
    def __copy__(self) -> None: ...
    def __delattr__(self) -> None: ...
    def __dir__(self, /): ...
    def __eq__(self) -> None: ...
    def __format__(self, format_spec, /): ...
    def __ge__(self) -> None: ...
    def __getattribute__(self) -> None: ...
    def __getstate__(self, /): ...
    def __gt__(self) -> None: ...
    def __hash__(self) -> None: ...
    def __init__(self) -> None: ...
    def __init_subclass__(cls) -> None: ...
    def __le__(self) -> None: ...
    def __lshift__(self) -> None: ...
    def __lt__(self) -> None: ...
    def __ne__(self) -> None: ...
    def __new__(cls) -> None: ...
    def __reduce__(self, /): ...
    def __reduce_ex__(self, protocol, /): ...
    def __repr__(self) -> None: ...
    def __rlshift__(self) -> None: ...
    def __rrshift__(self) -> None: ...
    def __rshift__(self) -> None: ...
    def __setattr__(self) -> None: ...
    def __sizeof__(self, /): ...
    def __str__(self) -> None: ...
    def __subclasshook__(self) -> None: ...
    def asType(self, arg__1: object) -> object: ...
    def clearBake(self) -> None: ...
    def createBaseLightmap(self) -> vrdLightmap: ...
    def createSeparateLightmap(self) -> vrdLightmap: ...
    def deleteBaseLightmap(self) -> None: ...
    def deleteSeparateLightmap(self) -> None: ...
    def getBaseLightmap(self) -> vrdLightmap: ...
    def getLightmap(self) -> vrdLightmap: ...
    def getLightmaps(self) -> List[vrdLightmap]: ...
    def getObjectId(self) -> int: ...
    def getSeparateLightmap(self) -> vrdLightmap: ...
    def isNull(self) -> bool: ...
    def isType(self, arg__1: object) -> bool: ...
    def isValid(self) -> bool: ...

class vrdTextureBakeSettings:
    __doc__: NoneType
    __module__: str
    rendererProperty: str
    samplesProperty: str
    minimumResolutionProperty: str
    maximumResolutionProperty: str
    texelDensityProperty: str
    edgeDilationProperty: str
    useDenoisingProperty: str
    denoiserTypeProperty: str
    def __copy__(self) -> None: ...
    def __delattr__(self) -> None: ...
    def __dir__(self, /): ...
    def __eq__(self) -> None: ...
    def __format__(self, format_spec, /): ...
    def __ge__(self) -> None: ...
    def __getattribute__(self) -> None: ...
    def __getstate__(self, /): ...
    def __gt__(self) -> None: ...
    def __hash__(self) -> None: ...
    def __init__(self) -> None: ...
    def __init_subclass__(cls) -> None: ...
    def __le__(self) -> None: ...
    def __lt__(self) -> None: ...
    def __ne__(self) -> None: ...
    def __new__(cls) -> None: ...
    def __reduce__(self, /): ...
    def __reduce_ex__(self, protocol, /): ...
    def __repr__(self) -> None: ...
    def __setattr__(self) -> None: ...
    def __sizeof__(self, /): ...
    def __str__(self) -> None: ...
    def __subclasshook__(self) -> None: ...
    def getDenoiserType(self) -> vrBakeTypes.DenoiserType: ...
    def getEdgeDilation(self) -> int: ...
    def getExternalReferenceLocation(self) -> str: ...
    def getHideTransparentObjects(self) -> bool: ...
    def getMaximumResolution(self) -> int: ...
    def getMinimumResolution(self) -> int: ...
    def getRenderer(self) -> vrBakeTypes.Renderer: ...
    def getSamples(self) -> int: ...
    def getShareLightmapsForClones(self) -> bool: ...
    def getTexelDensity(self) -> float: ...
    def getUseDenoising(self) -> bool: ...
    def getUseExistingResolution(self) -> bool: ...
    def setDenoiserType(self, denoiserType: vrBakeTypes.DenoiserType) -> None: ...
    def setEdgeDilation(self, value: int) -> None: ...
    def setExternalReferenceLocation(self, value: str) -> None: ...
    def setHideTransparentObjects(self, value: bool) -> None: ...
    def setMaximumResolution(self, value: int) -> None: ...
    def setMinimumResolution(self, value: int) -> None: ...
    def setRenderer(self, renderer: vrBakeTypes.Renderer) -> None: ...
    def setSamples(self, value: int) -> None: ...
    def setShareLightmapsForClones(self, shareLightmaps: bool) -> None: ...
    def setTexelDensity(self, value: float) -> None: ...
    def setUseDenoising(self, value: bool) -> None: ...
    def setUseExistingResolution(self, value: bool) -> None: ...

class vrdTextureChunk:
    __doc__: NoneType
    __module__: str
    imageProperty: str
    minFilterProperty: str
    magFilterProperty: str
    wrapModeSProperty: str
    wrapModeTProperty: str
    wrapModeRProperty: str
    lodBiasProperty: str
    anisotropyProperty: str
    internalFormatProperty: str
    def InternalFormat(self) -> None: ...
    def MagFilter(self) -> None: ...
    def MinFilter(self) -> None: ...
    def WrapMode(self) -> None: ...
    def __copy__(self) -> None: ...
    def __delattr__(self) -> None: ...
    def __dir__(self, /): ...
    def __eq__(self) -> None: ...
    def __format__(self, format_spec, /): ...
    def __ge__(self) -> None: ...
    def __getattribute__(self) -> None: ...
    def __getstate__(self, /): ...
    def __gt__(self) -> None: ...
    def __hash__(self) -> None: ...
    def __init__(self) -> None: ...
    def __init_subclass__(cls) -> None: ...
    def __le__(self) -> None: ...
    def __lshift__(self) -> None: ...
    def __lt__(self) -> None: ...
    def __ne__(self) -> None: ...
    def __new__(cls) -> None: ...
    def __reduce__(self, /): ...
    def __reduce_ex__(self, protocol, /): ...
    def __repr__(self) -> None: ...
    def __rlshift__(self) -> None: ...
    def __rrshift__(self) -> None: ...
    def __rshift__(self) -> None: ...
    def __setattr__(self) -> None: ...
    def __sizeof__(self, /): ...
    def __str__(self) -> None: ...
    def __subclasshook__(self) -> None: ...
    def asType(self, arg__1: object) -> object: ...
    def getAnisotropy(self) -> float: ...
    def getImage(self) -> vrdImage: ...
    def getInternalFormat(self) -> vrdTextureChunk.InternalFormat: ...
    def getLodBias(self) -> float: ...
    def getMagFilter(self) -> vrdTextureChunk.MagFilter: ...
    def getMinFilter(self) -> vrdTextureChunk.MinFilter: ...
    def getObjectId(self) -> int: ...
    def getWrapModeR(self) -> vrdTextureChunk.WrapMode: ...
    def getWrapModeS(self) -> vrdTextureChunk.WrapMode: ...
    def getWrapModeT(self) -> vrdTextureChunk.WrapMode: ...
    def isNull(self) -> bool: ...
    def isType(self, arg__1: object) -> bool: ...
    def isValid(self) -> bool: ...
    def setAnisotropy(self, anisotropy: float) -> None: ...
    def setImage(self, img: vrdImage) -> None: ...
    def setInternalFormat(self, format: vrdTextureChunk.InternalFormat) -> None: ...
    def setLodBias(self, bias: float) -> None: ...
    def setMagFilter(self, minFilter: vrdTextureChunk.MagFilter) -> None: ...
    def setMinFilter(self, minFilter: vrdTextureChunk.MinFilter) -> None: ...
    def setWrapModeR(self, mode: vrdTextureChunk.WrapMode) -> None: ...
    def setWrapModeS(self, mode: vrdTextureChunk.WrapMode) -> None: ...
    def setWrapModeT(self, mode: vrdTextureChunk.WrapMode) -> None: ...

class vrdTextureSettings:
    __doc__: NoneType
    __module__: str
    mappingTypeProperty: str
    textureSizeProperty: str
    triplanarBlendProperty: str
    triplanarBlendModeProperty: str
    uniformRepeatProperty: str
    triplanarXRepeatProperty: str
    triplanarYRepeatProperty: str
    triplanarZRepeatProperty: str
    triplanarXOffsetProperty: str
    triplanarYOffsetProperty: str
    triplanarZOffsetProperty: str
    triplanarXRotationProperty: str
    triplanarYRotationProperty: str
    triplanarZRotationProperty: str
    repeatProperty: str
    rotationProperty: str
    def __copy__(self) -> None: ...
    def __delattr__(self) -> None: ...
    def __dir__(self, /): ...
    def __eq__(self) -> None: ...
    def __format__(self, format_spec, /): ...
    def __ge__(self) -> None: ...
    def __getattribute__(self) -> None: ...
    def __getstate__(self, /): ...
    def __gt__(self) -> None: ...
    def __hash__(self) -> None: ...
    def __init__(self) -> None: ...
    def __init_subclass__(cls) -> None: ...
    def __le__(self) -> None: ...
    def __lshift__(self) -> None: ...
    def __lt__(self) -> None: ...
    def __ne__(self) -> None: ...
    def __new__(cls) -> None: ...
    def __reduce__(self, /): ...
    def __reduce_ex__(self, protocol, /): ...
    def __repr__(self) -> None: ...
    def __rlshift__(self) -> None: ...
    def __rrshift__(self) -> None: ...
    def __rshift__(self) -> None: ...
    def __setattr__(self) -> None: ...
    def __sizeof__(self, /): ...
    def __str__(self) -> None: ...
    def __subclasshook__(self) -> None: ...
    def asType(self, arg__1: object) -> object: ...
    def getMappingType(self) -> vrTextureTypes.MappingType: ...
    def getObjectId(self) -> int: ...
    def getRepeat(self) -> QVector2D: ...
    def getRotation(self) -> float: ...
    def getTextureSize(self) -> QVector2D: ...
    def getTriplanarBlend(self) -> float: ...
    def getTriplanarBlendMode(self) -> vrTextureTypes.TriplanarBlendMode: ...
    def getTriplanarXOffset(self) -> QVector2D: ...
    def getTriplanarXRepeat(self) -> QVector2D: ...
    def getTriplanarXRotation(self) -> float: ...
    def getTriplanarYOffset(self) -> QVector2D: ...
    def getTriplanarYRepeat(self) -> QVector2D: ...
    def getTriplanarYRotation(self) -> float: ...
    def getTriplanarZOffset(self) -> QVector2D: ...
    def getTriplanarZRepeat(self) -> QVector2D: ...
    def getTriplanarZRotation(self) -> float: ...
    def getUniformRepeat(self) -> bool: ...
    def isNull(self) -> bool: ...
    def isType(self, arg__1: object) -> bool: ...
    def isValid(self) -> bool: ...
    def setMappingType(self, type: vrTextureTypes.MappingType) -> None: ...
    def setRepeat(self, repeat: QVector2D) -> None: ...
    def setRotation(self, rotation: float) -> None: ...
    def setTextureSize(self, size: QVector2D) -> None: ...
    def setTriplanarBlend(self, blend: float) -> None: ...
    def setTriplanarBlendMode(self, mode: vrTextureTypes.TriplanarBlendMode) -> None: ...
    def setTriplanarXOffset(self, offset: QVector2D) -> None: ...
    def setTriplanarXRepeat(self, repeat: QVector2D) -> None: ...
    def setTriplanarXRotation(self, rotation: float) -> None: ...
    def setTriplanarYOffset(self, offset: QVector2D) -> None: ...
    def setTriplanarYRepeat(self, repeat: QVector2D) -> None: ...
    def setTriplanarYRotation(self, rotation: float) -> None: ...
    def setTriplanarZOffset(self, offset: QVector2D) -> None: ...
    def setTriplanarZRepeat(self, repeat: QVector2D) -> None: ...
    def setTriplanarZRotation(self, rotation: float) -> None: ...
    def setUniformRepeat(self, s: bool) -> None: ...

class vrdTireMaterial:
    __doc__: NoneType
    __module__: str
    diffuseColorProperty: str
    diffuseColorSpectrumProperty: str
    glossyColorProperty: str
    glossyColorSpectrumProperty: str
    roughnessProperty: str
    reflectivityProperty: str
    textureSettingsProperty: str
    diffuseMarkingsProperty: str
    useDiffuseMarkingsProperty: str
    diffuseProfileProperty: str
    useDiffuseProfileProperty: str
    diffuseInputGammaProperty: str
    useGlossyMarkingsProperty: str
    glossyMarkingsProperty: str
    useGlossyProfileProperty: str
    glossyProfileProperty: str
    glossyInputGammaProperty: str
    useBumpMarkingsProperty: str
    bumpMarkingsProperty: str
    useBumpProfileProperty: str
    bumpProfileProperty: str
    bumpIntensityProperty: str
    parallaxIntensityProperty: str
    incandescenceProperty: str
    displacementTextureProperty: str
    bumpFlipUProperty: str
    bumpFlipVProperty: str
    def __copy__(self) -> None: ...
    def __delattr__(self) -> None: ...
    def __dir__(self, /): ...
    def __eq__(self) -> None: ...
    def __format__(self, format_spec, /): ...
    def __ge__(self) -> None: ...
    def __getattribute__(self) -> None: ...
    def __getstate__(self, /): ...
    def __gt__(self) -> None: ...
    def __hash__(self) -> None: ...
    def __init__(self) -> None: ...
    def __init_subclass__(cls) -> None: ...
    def __le__(self) -> None: ...
    def __lshift__(self) -> None: ...
    def __lt__(self) -> None: ...
    def __ne__(self) -> None: ...
    def __new__(cls) -> None: ...
    def __reduce__(self, /): ...
    def __reduce_ex__(self, protocol, /): ...
    def __repr__(self) -> None: ...
    def __rlshift__(self) -> None: ...
    def __rrshift__(self) -> None: ...
    def __rshift__(self) -> None: ...
    def __setattr__(self) -> None: ...
    def __sizeof__(self, /): ...
    def __str__(self) -> None: ...
    def __subclasshook__(self) -> None: ...
    def asType(self, arg__1: object) -> object: ...
    def duplicate(self, name: str = '') -> vrdMaterial: ...
    def getAnalytic(self) -> vrdAnalyticSettings: ...
    def getBumpFlipU(self) -> bool: ...
    def getBumpFlipV(self) -> bool: ...
    def getBumpIntensity(self) -> float: ...
    def getBumpMarkings(self) -> vrdImage: ...
    def getBumpProfile(self) -> vrdImage: ...
    def getCommon(self) -> vrdBRDFCommonSettings: ...
    def getDiffuseColor(self) -> QVector3D: ...
    def getDiffuseColorSpectrum(self) -> vrSpectrum: ...
    def getDiffuseInputGamma(self) -> float: ...
    def getDiffuseMarkings(self) -> vrdImage: ...
    def getDiffuseProfile(self) -> vrdImage: ...
    def getDisplacementTexture(self) -> vrdDisplacementTexture: ...
    def getGlossyColor(self) -> QVector3D: ...
    def getGlossyColorSpectrum(self) -> vrSpectrum: ...
    def getGlossyInputGamma(self) -> float: ...
    def getGlossyMarkings(self) -> vrdImage: ...
    def getGlossyProfile(self) -> vrdImage: ...
    def getIcon(self) -> QIcon: ...
    def getIncandescence(self) -> vrdIncandescence: ...
    def getLocked(self) -> bool: ...
    def getNPR(self) -> vrdNPRSettings: ...
    def getName(self) -> str: ...
    def getObjectId(self) -> int: ...
    def getParallaxIntensity(self) -> float: ...
    def getPreview(self) -> QImage: ...
    def getPreviewScene(self) -> str: ...
    def getRaytracing(self) -> vrdMaterialRaytracingSettings: ...
    def getReflectivity(self) -> float: ...
    def getRoughness(self) -> float: ...
    def getRoundedEdges(self) -> vrdRoundedEdges: ...
    def getTextureSettings(self) -> vrdTireTextureSettings: ...
    def getTextures(self) -> List[vrdTexture]: ...
    def getTransparency(self) -> vrdTransparency: ...
    def getUseBumpMarkings(self) -> bool: ...
    def getUseBumpProfile(self) -> bool: ...
    def getUseDiffuseMarkings(self) -> bool: ...
    def getUseDiffuseProfile(self) -> bool: ...
    def getUseGlossyMarkings(self) -> bool: ...
    def getUseGlossyProfile(self) -> bool: ...
    def isAsset(self) -> bool: ...
    def isComponent(self) -> bool: ...
    def isDisplacementActive(self) -> bool: ...
    def isEditable(self) -> bool: ...
    def isEditedAsset(self) -> bool: ...
    def isNull(self) -> bool: ...
    def isType(self, arg__1: object) -> bool: ...
    def isValid(self) -> bool: ...
    def setBumpFlipU(self, s: bool) -> None: ...
    def setBumpFlipV(self, s: bool) -> None: ...
    def setBumpIntensity(self, bumpIntensity: float) -> None: ...
    def setBumpMarkings(self, image: vrdImage) -> None: ...
    def setBumpProfile(self, image: vrdImage) -> None: ...
    def setDiffuseColor(self, value: QVector3D) -> None: ...
    def setDiffuseColorSpectrum(self, value: Union[vrSpectrum, QVector3D]) -> None: ...
    def setDiffuseInputGamma(self, gamma: float) -> None: ...
    def setDiffuseMarkings(self, image: vrdImage) -> None: ...
    def setDiffuseProfile(self, image: vrdImage) -> None: ...
    def setGlossyColor(self, value: QVector3D) -> None: ...
    def setGlossyColorSpectrum(self, value: Union[vrSpectrum, QVector3D]) -> None: ...
    def setGlossyInputGamma(self, gamma: float) -> None: ...
    def setGlossyMarkings(self, image: vrdImage) -> None: ...
    def setGlossyProfile(self, image: vrdImage) -> None: ...
    def setInlineAllImageSequences(self, value: bool) -> List[vrdImage]: ...
    def setLocked(self, locked: bool) -> None: ...
    def setName(self, name: str) -> None: ...
    def setParallaxIntensity(self, parallaxIntensity: float) -> None: ...
    def setPreviewScene(self, name: str) -> None: ...
    def setReflectivity(self, v: float) -> None: ...
    def setRoughness(self, roughness: float) -> None: ...
    def setUseBumpMarkings(self, use: bool) -> None: ...
    def setUseBumpProfile(self, use: bool) -> None: ...
    def setUseDiffuseMarkings(self, use: bool) -> None: ...
    def setUseDiffuseProfile(self, use: bool) -> None: ...
    def setUseGlossyMarkings(self, use: bool) -> None: ...
    def setUseGlossyProfile(self, use: bool) -> None: ...

class vrdTireTextureSettings:
    __doc__: NoneType
    __module__: str
    valuesFromObjectProperty: str
    rotationAxisProperty: str
    mappingCenterProperty: str
    repeatUVProperty: str
    markingsScaleProperty: str
    blendPositionProperty: str
    anisotropyProperty: str
    def __copy__(self) -> None: ...
    def __delattr__(self) -> None: ...
    def __dir__(self, /): ...
    def __eq__(self) -> None: ...
    def __format__(self, format_spec, /): ...
    def __ge__(self) -> None: ...
    def __getattribute__(self) -> None: ...
    def __getstate__(self, /): ...
    def __gt__(self) -> None: ...
    def __hash__(self) -> None: ...
    def __init__(self) -> None: ...
    def __init_subclass__(cls) -> None: ...
    def __le__(self) -> None: ...
    def __lshift__(self) -> None: ...
    def __lt__(self) -> None: ...
    def __ne__(self) -> None: ...
    def __new__(cls) -> None: ...
    def __reduce__(self, /): ...
    def __reduce_ex__(self, protocol, /): ...
    def __repr__(self) -> None: ...
    def __rlshift__(self) -> None: ...
    def __rrshift__(self) -> None: ...
    def __rshift__(self) -> None: ...
    def __setattr__(self) -> None: ...
    def __sizeof__(self, /): ...
    def __str__(self) -> None: ...
    def __subclasshook__(self) -> None: ...
    def asType(self, arg__1: object) -> object: ...
    def getAnisotropy(self) -> float: ...
    def getBlendPosition(self) -> float: ...
    def getMappingCenter(self) -> QVector3D: ...
    def getMarkingsScale(self) -> float: ...
    def getObjectId(self) -> int: ...
    def getRepeatUV(self) -> QVector2D: ...
    def getRotationAxis(self) -> vrTextureTypes.Axis: ...
    def isNull(self) -> bool: ...
    def isType(self, arg__1: object) -> bool: ...
    def isValid(self) -> bool: ...
    def setAnisotropy(self, v: float) -> None: ...
    def setBlendPosition(self, v: float) -> None: ...
    def setMappingCenter(self, v: QVector3D) -> None: ...
    def setMarkingsScale(self, v: float) -> None: ...
    def setRepeatUV(self, v: QVector2D) -> None: ...
    def setRotationAxis(self, v: vrTextureTypes.Axis) -> None: ...
    def setValuesFromObject(self) -> None: ...

class vrdTonemapper:
    __doc__: NoneType
    __module__: str
    tonemapperTypeProperty: str
    exposureProperty: str
    whitePointProperty: str
    contrastProperty: str
    whiteBalanceProperty: str
    shoulderStrengthProperty: str
    toeStrengthProperty: str
    iSOProperty: str
    responseCurveModeProperty: str
    redResponseCurveProperty: str
    greenResponseCurveProperty: str
    blueResponseCurveProperty: str
    luminanceResponseCurveProperty: str
    colorspaceProperty: str
    candelaRangeProperty: str
    candelaMappingModeProperty: str
    sensorResponseProperty: str
    def __copy__(self) -> None: ...
    def __delattr__(self) -> None: ...
    def __dir__(self, /): ...
    def __eq__(self) -> None: ...
    def __format__(self, format_spec, /): ...
    def __ge__(self) -> None: ...
    def __getattribute__(self) -> None: ...
    def __getstate__(self, /): ...
    def __gt__(self) -> None: ...
    def __hash__(self) -> None: ...
    def __init__(self) -> None: ...
    def __init_subclass__(cls) -> None: ...
    def __le__(self) -> None: ...
    def __lshift__(self) -> None: ...
    def __lt__(self) -> None: ...
    def __ne__(self) -> None: ...
    def __new__(cls) -> None: ...
    def __reduce__(self, /): ...
    def __reduce_ex__(self, protocol, /): ...
    def __repr__(self) -> None: ...
    def __rlshift__(self) -> None: ...
    def __rrshift__(self) -> None: ...
    def __rshift__(self) -> None: ...
    def __setattr__(self) -> None: ...
    def __sizeof__(self, /): ...
    def __str__(self) -> None: ...
    def __subclasshook__(self) -> None: ...
    def asType(self, arg__1: object) -> object: ...
    def getBlueResponseCurve(self) -> List[QVector2D]: ...
    def getCandelaMappingMode(self) -> vrCameraTypes.CameraCandelaMapping: ...
    def getCandelaRange(self) -> QVector2D: ...
    def getColorspace(self) -> vrCameraTypes.CameraColorspace: ...
    def getContrast(self) -> float: ...
    def getExposure(self) -> float: ...
    def getGreenResponseCurve(self) -> List[QVector2D]: ...
    def getISO(self) -> float: ...
    def getLuminanceResponseCurve(self) -> List[QVector2D]: ...
    def getLuminousExposure(self) -> float: ...
    def getObjectId(self) -> int: ...
    def getRedResponseCurve(self) -> List[QVector2D]: ...
    def getResponseCurveFilename(self) -> str: ...
    def getResponseCurveMode(self) -> vrCameraTypes.CameraResponseCurveMode: ...
    def getSensorResponse(self) -> vrCameraTypes.CameraSensorResponse: ...
    def getShoulderStrength(self) -> float: ...
    def getToeStrength(self) -> float: ...
    def getTonemapperType(self) -> vrCameraTypes.CameraTonemapper: ...
    def getWhiteBalance(self) -> float: ...
    def getWhitePoint(self) -> float: ...
    def isNull(self) -> bool: ...
    def isType(self, arg__1: object) -> bool: ...
    def isValid(self) -> bool: ...
    def loadResponseCurve(self, fileName: str) -> bool: ...
    def saveResponseCurve(self, fileName: str) -> bool: ...
    def setBlueResponseCurve(self, values: Sequence[QVector2D]) -> None: ...
    def setCandelaMappingMode(self, mapping: vrCameraTypes.CameraCandelaMapping) -> None: ...
    def setCandelaRange(self, rangeMinMax: QVector2D) -> None: ...
    def setColorspace(self, value: vrCameraTypes.CameraColorspace) -> None: ...
    def setContrast(self, value: float) -> None: ...
    def setExposure(self, value: float) -> None: ...
    def setGreenResponseCurve(self, values: Sequence[QVector2D]) -> None: ...
    def setISO(self, value: float) -> None: ...
    def setLuminanceResponseCurve(self, values: Sequence[QVector2D]) -> None: ...
    def setRedResponseCurve(self, values: Sequence[QVector2D]) -> None: ...
    def setResponseCurveMode(self, mode: vrCameraTypes.CameraResponseCurveMode) -> None: ...
    def setSensorResponse(self, value: vrCameraTypes.CameraSensorResponse) -> None: ...
    def setShoulderStrength(self, value: float) -> None: ...
    def setToeStrength(self, value: float) -> None: ...
    def setTonemapperType(self, mapper: vrCameraTypes.CameraTonemapper) -> None: ...
    def setWhiteBalance(self, value: float) -> None: ...
    def setWhitePoint(self, value: float) -> None: ...

class vrdTrackedHand:
    __doc__: NoneType
    __module__: str
    def __copy__(self) -> None: ...
    def __delattr__(self) -> None: ...
    def __dir__(self, /): ...
    def __eq__(self) -> None: ...
    def __format__(self, format_spec, /): ...
    def __ge__(self) -> None: ...
    def __getattribute__(self) -> None: ...
    def __getstate__(self, /): ...
    def __gt__(self) -> None: ...
    def __hash__(self) -> None: ...
    def __init__(self) -> None: ...
    def __init_subclass__(cls) -> None: ...
    def __le__(self) -> None: ...
    def __lshift__(self) -> None: ...
    def __lt__(self) -> None: ...
    def __ne__(self) -> None: ...
    def __new__(cls) -> None: ...
    def __reduce__(self, /): ...
    def __reduce_ex__(self, protocol, /): ...
    def __repr__(self) -> None: ...
    def __rlshift__(self) -> None: ...
    def __rrshift__(self) -> None: ...
    def __rshift__(self) -> None: ...
    def __setattr__(self) -> None: ...
    def __sizeof__(self, /): ...
    def __str__(self) -> None: ...
    def __subclasshook__(self) -> None: ...
    def asType(self, arg__1: object) -> object: ...
    def getJointTransform(self, finger: vrHandTypes.FingerType, jointId: int) -> QMatrix4x4: ...
    def getObjectId(self) -> int: ...
    def getPinchStrength(self) -> float: ...
    def getRole(self) -> vrHandTypes.HandRole: ...
    def getTransform(self) -> QMatrix4x4: ...
    def isNull(self) -> bool: ...
    def isTracked(self) -> bool: ...
    def isType(self, arg__1: object) -> bool: ...
    def setGesture(self, gesture: vrHandTypes.HandTrackingGesture) -> None: ...
    def setJointTransform(self, transform: Union[QMatrix4x4, QTransform], finger: vrHandTypes.FingerType, jointId: int) -> None: ...
    def setPinchStrength(self, value: float) -> None: ...
    def setTracked(self, value: bool) -> None: ...
    def setTransform(self, matrix: Union[QMatrix4x4, QTransform]) -> None: ...

class vrdTransformNode(vrdNode):
    __doc__: NoneType
    __module__: str
    translationProperty: str
    worldTranslationProperty: str
    scaleProperty: str
    rotationAsEulerProperty: str
    rotationOrientationAsEulerProperty: str
    shearProperty: str
    scalePivotProperty: str
    worldScalePivotProperty: str
    scalePivotTranslationProperty: str
    rotatePivotProperty: str
    worldRotatePivotProperty: str
    rotatePivotTranslationProperty: str
    eulerRotationOrderProperty: str
    def __copy__(self) -> None: ...
    def __delattr__(self) -> None: ...
    def __dir__(self, /): ...
    def __eq__(self) -> None: ...
    def __format__(self, format_spec, /): ...
    def __ge__(self) -> None: ...
    def __getattribute__(self) -> None: ...
    def __getstate__(self, /): ...
    def __gt__(self) -> None: ...
    def __hash__(self) -> None: ...
    def __init__(self) -> None: ...
    def __init_subclass__(cls) -> None: ...
    def __le__(self) -> None: ...
    def __lshift__(self) -> None: ...
    def __lt__(self) -> None: ...
    def __ne__(self) -> None: ...
    def __new__(cls) -> None: ...
    def __reduce__(self, /): ...
    def __reduce_ex__(self, protocol, /): ...
    def __repr__(self) -> None: ...
    def __rlshift__(self) -> None: ...
    def __rrshift__(self) -> None: ...
    def __rshift__(self) -> None: ...
    def __setattr__(self) -> None: ...
    def __sizeof__(self, /): ...
    def __str__(self) -> None: ...
    def __subclasshook__(self) -> None: ...
    def applyMaterial(self, material: vrdMaterial) -> None: ...
    def asType(self, arg__1: object) -> object: ...
    def captureTransformVariant(self, name: str) -> None: ...
    def deleteTransformVariant(self, variant: vrdTransformNodeVariant) -> None: ...
    def findTransformVariant(self, name: str) -> vrdTransformNodeVariant: ...
    def getBoundingBox(self) -> vrdBoundingBox: ...
    def getChild(self, index: int) -> vrdNode: ...
    def getChildCount(self) -> int: ...
    def getChildIndex(self, child: vrdNode) -> int: ...
    def getChildren(self) -> List[vrdNode]: ...
    def getChildrenRecursive(self) -> List[vrdNode]: ...
    def getChildrenRef(self) -> vrdNodeList: ...
    def getEulerRotationOrder(self) -> vrTransformTypes.EulerRotationOrder: ...
    def getLocked(self) -> bool: ...
    def getMaterial(self) -> vrdMaterial: ...
    def getName(self) -> str: ...
    def getObjectId(self) -> int: ...
    def getOrCreateTransformNode(self) -> vrdNode: ...
    def getParent(self) -> vrdNode: ...
    def getPath(self) -> str: ...
    def getRotatePivot(self) -> QVector3D: ...
    def getRotatePivotTranslation(self) -> QVector3D: ...
    def getRotationAsEuler(self) -> QVector3D: ...
    def getRotationAsQuaternion(self) -> QQuaternion: ...
    def getRotationOrientationAsEuler(self) -> QVector3D: ...
    def getRotationOrientationAsQuaternion(self) -> QQuaternion: ...
    def getScale(self) -> QVector3D: ...
    def getScalePivot(self) -> QVector3D: ...
    def getScalePivotTranslation(self) -> QVector3D: ...
    def getSelectableFlag(self) -> bool: ...
    def getSharedNodes(self) -> List[vrdNode]: ...
    def getShear(self) -> QVector3D: ...
    def getSynchronizedNodes(self) -> List[vrdNode]: ...
    def getTransform(self) -> QMatrix4x4: ...
    def getTransformVariants(self) -> List[vrdTransformNodeVariant]: ...
    def getTranslation(self) -> QVector3D: ...
    def getUniquePath(self) -> str: ...
    def getVisibilityFlag(self) -> bool: ...
    def getWorldBoundingBox(self) -> vrdBoundingBox: ...
    def getWorldRotatePivot(self) -> QVector3D: ...
    def getWorldScalePivot(self) -> QVector3D: ...
    def getWorldTransform(self) -> QMatrix4x4: ...
    def getWorldTranslation(self) -> QVector3D: ...
    def hasParent(self, parent: vrdNode) -> bool: ...
    def isEditable(self) -> bool: ...
    def isEditedAsset(self) -> bool: ...
    def isGroup(self) -> bool: ...
    def isImplicitShared(self) -> bool: ...
    def isNull(self) -> bool: ...
    def isShared(self) -> bool: ...
    def isSharedWith(self, node: vrdNode) -> bool: ...
    def isSynchronized(self) -> bool: ...
    def isType(self, arg__1: object) -> bool: ...
    def isValid(self) -> bool: ...
    def isVisible(self) -> bool: ...
    def resetTransformation(self) -> None: ...
    def setEulerRotationOrder(self, rotationOrder: vrTransformTypes.EulerRotationOrder) -> None: ...
    def setLocked(self, locked: bool) -> None: ...
    def setName(self, name: str) -> None: ...
    def setRotatePivot(self, rotatePivot: QVector3D) -> None: ...
    def setRotatePivotTranslation(self, rotatePivotTranslation: QVector3D) -> None: ...
    def setRotationAsEuler(self, rotation: QVector3D) -> None: ...
    def setRotationAsQuaternion(self, rotation: QQuaternion) -> None: ...
    def setRotationOrientationAsEuler(self, rotationOrientation: QVector3D) -> None: ...
    def setRotationOrientationAsQuaternion(self, orientation: QQuaternion) -> None: ...
    def setScale(self, scale: QVector3D) -> None: ...
    def setScalePivot(self, scalePivot: QVector3D) -> None: ...
    def setScalePivotTranslation(self, scalePivotTranslation: QVector3D) -> None: ...
    def setSelectableFlag(self, selectable: bool) -> None: ...
    def setShear(self, shear: QVector3D) -> None: ...
    def setTransform(self, matrix: Union[QMatrix4x4, QTransform]) -> None: ...
    def setTranslation(self, translation: QVector3D) -> None: ...
    def setVisibilityFlag(self, visible: bool) -> None: ...
    def setWorldRotatePivot(self, rotatePivot: QVector3D) -> None: ...
    def setWorldScalePivot(self, scalePivot: QVector3D) -> None: ...
    def setWorldTransform(self, matrix: Union[QMatrix4x4, QTransform]) -> None: ...
    def setWorldTranslation(self, translation: QVector3D) -> None: ...

class vrdTransformNodeVariant:
    __doc__: NoneType
    __module__: str
    nameProperty: str
    translationProperty: str
    scaleProperty: str
    rotationAsEulerProperty: str
    rotationOrientationAsEulerProperty: str
    scalePivotProperty: str
    scalePivotTranslationProperty: str
    rotatePivotProperty: str
    rotatePivotTranslationProperty: str
    applyMaskProperty: str
    eulerRotationOrderProperty: str
    def __copy__(self) -> None: ...
    def __delattr__(self) -> None: ...
    def __dir__(self, /): ...
    def __eq__(self) -> None: ...
    def __format__(self, format_spec, /): ...
    def __ge__(self) -> None: ...
    def __getattribute__(self) -> None: ...
    def __getstate__(self, /): ...
    def __gt__(self) -> None: ...
    def __hash__(self) -> None: ...
    def __init__(self) -> None: ...
    def __init_subclass__(cls) -> None: ...
    def __le__(self) -> None: ...
    def __lshift__(self) -> None: ...
    def __lt__(self) -> None: ...
    def __ne__(self) -> None: ...
    def __new__(cls) -> None: ...
    def __reduce__(self, /): ...
    def __reduce_ex__(self, protocol, /): ...
    def __repr__(self) -> None: ...
    def __rlshift__(self) -> None: ...
    def __rrshift__(self) -> None: ...
    def __rshift__(self) -> None: ...
    def __setattr__(self) -> None: ...
    def __sizeof__(self, /): ...
    def __str__(self) -> None: ...
    def __subclasshook__(self) -> None: ...
    def apply(self) -> None: ...
    def asType(self, arg__1: object) -> object: ...
    def getApplyMask(self) -> vrTransformTypes.VariantValueBitMask: ...
    def getEulerRotationOrder(self) -> vrTransformTypes.EulerRotationOrder: ...
    def getName(self) -> str: ...
    def getObjectId(self) -> int: ...
    def getRotatePivot(self) -> QVector3D: ...
    def getRotatePivotTranslation(self) -> QVector3D: ...
    def getRotationAsEuler(self) -> QVector3D: ...
    def getRotationOrientationAsEuler(self) -> QVector3D: ...
    def getScale(self) -> QVector3D: ...
    def getScalePivot(self) -> QVector3D: ...
    def getScalePivotTranslation(self) -> QVector3D: ...
    def getTranslation(self) -> QVector3D: ...
    def getWorldRotatePivot(self) -> QVector3D: ...
    def getWorldScalePivot(self) -> QVector3D: ...
    def getWorldTranslation(self) -> QVector3D: ...
    def isNull(self) -> bool: ...
    def isType(self, arg__1: object) -> bool: ...
    def isValid(self) -> bool: ...
    def setApplyMask(self, mask: vrTransformTypes.VariantValueBitMask) -> None: ...
    def setEulerRotationOrder(self, rotationOrder: vrTransformTypes.EulerRotationOrder) -> None: ...
    def setName(self, name: str) -> None: ...
    def setRotatePivot(self, rotatePivot: QVector3D) -> None: ...
    def setRotatePivotTranslation(self, rotatePivotTranslation: QVector3D) -> None: ...
    def setRotationAsEuler(self, rotation: QVector3D) -> None: ...
    def setRotationOrientationAsEuler(self, rotationOrientation: QVector3D) -> None: ...
    def setScale(self, scale: QVector3D) -> None: ...
    def setScalePivot(self, scalePivot: QVector3D) -> None: ...
    def setScalePivotTranslation(self, scalePivotTranslation: QVector3D) -> None: ...
    def setTranslation(self, translation: QVector3D) -> None: ...
    def setWorldRotatePivot(self, rotatePivot: QVector3D) -> None: ...
    def setWorldScalePivot(self, scalePivot: QVector3D) -> None: ...
    def setWorldTranslation(self, translation: QVector3D) -> None: ...

class vrdTransparency:
    __doc__: NoneType
    __module__: str
    seeThroughProperty: str
    seeThroughSpectrumProperty: str
    textureProperty: str
    def __copy__(self) -> None: ...
    def __delattr__(self) -> None: ...
    def __dir__(self, /): ...
    def __eq__(self) -> None: ...
    def __format__(self, format_spec, /): ...
    def __ge__(self) -> None: ...
    def __getattribute__(self) -> None: ...
    def __getstate__(self, /): ...
    def __gt__(self) -> None: ...
    def __hash__(self) -> None: ...
    def __init__(self) -> None: ...
    def __init_subclass__(cls) -> None: ...
    def __le__(self) -> None: ...
    def __lshift__(self) -> None: ...
    def __lt__(self) -> None: ...
    def __ne__(self) -> None: ...
    def __new__(cls) -> None: ...
    def __reduce__(self, /): ...
    def __reduce_ex__(self, protocol, /): ...
    def __repr__(self) -> None: ...
    def __rlshift__(self) -> None: ...
    def __rrshift__(self) -> None: ...
    def __rshift__(self) -> None: ...
    def __setattr__(self) -> None: ...
    def __sizeof__(self, /): ...
    def __str__(self) -> None: ...
    def __subclasshook__(self) -> None: ...
    def asType(self, arg__1: object) -> object: ...
    def getObjectId(self) -> int: ...
    def getSeeThrough(self) -> QVector3D: ...
    def getSeeThroughSpectrum(self) -> vrSpectrum: ...
    def getTexture(self) -> vrdTexture: ...
    def isNull(self) -> bool: ...
    def isType(self, arg__1: object) -> bool: ...
    def isValid(self) -> bool: ...
    def setSeeThrough(self, value: QVector3D) -> None: ...
    def setSeeThroughSpectrum(self, value: Union[vrSpectrum, QVector3D]) -> None: ...

class vrdTurntable:
    __doc__: NoneType
    __module__: str
    angleProperty: str
    distanceProperty: str
    heightProperty: str
    playingProperty: str
    animationDurationProperty: str
    loopProperty: str
    directionProperty: str
    def __copy__(self) -> None: ...
    def __delattr__(self) -> None: ...
    def __dir__(self, /): ...
    def __eq__(self) -> None: ...
    def __format__(self, format_spec, /): ...
    def __ge__(self) -> None: ...
    def __getattribute__(self) -> None: ...
    def __getstate__(self, /): ...
    def __gt__(self) -> None: ...
    def __hash__(self) -> None: ...
    def __init__(self) -> None: ...
    def __init_subclass__(cls) -> None: ...
    def __le__(self) -> None: ...
    def __lshift__(self) -> None: ...
    def __lt__(self) -> None: ...
    def __ne__(self) -> None: ...
    def __new__(cls) -> None: ...
    def __reduce__(self, /): ...
    def __reduce_ex__(self, protocol, /): ...
    def __repr__(self) -> None: ...
    def __rlshift__(self) -> None: ...
    def __rrshift__(self) -> None: ...
    def __rshift__(self) -> None: ...
    def __setattr__(self) -> None: ...
    def __sizeof__(self, /): ...
    def __str__(self) -> None: ...
    def __subclasshook__(self) -> None: ...
    def asType(self, arg__1: object) -> object: ...
    def getAngle(self) -> float: ...
    def getAnimationDuration(self) -> float: ...
    def getDirection(self) -> vrCameraTypes.TurntableDirection: ...
    def getDistance(self) -> float: ...
    def getHeight(self) -> float: ...
    def getLoop(self) -> bool: ...
    def getObjectId(self) -> int: ...
    def getPlaying(self) -> bool: ...
    def isNull(self) -> bool: ...
    def isType(self, arg__1: object) -> bool: ...
    def isValid(self) -> bool: ...
    def setAngle(self, angle: float) -> None: ...
    def setAnimationDuration(self, seconds: float) -> None: ...
    def setDirection(self, direction: vrCameraTypes.TurntableDirection) -> None: ...
    def setDistance(self, distance: float) -> None: ...
    def setHeight(self, height: float) -> None: ...
    def setLoop(self, enable: bool) -> None: ...
    def setPlaying(self, value: bool) -> None: ...
    def updateFromView(self) -> None: ...

class vrdUVBaseProjectionSettings:
    __doc__: NoneType
    __module__: str
    def __copy__(self) -> None: ...
    def __delattr__(self) -> None: ...
    def __dir__(self, /): ...
    def __eq__(self) -> None: ...
    def __format__(self, format_spec, /): ...
    def __ge__(self) -> None: ...
    def __getattribute__(self) -> None: ...
    def __getstate__(self, /): ...
    def __gt__(self) -> None: ...
    def __hash__(self) -> None: ...
    def __init__(self) -> None: ...
    def __init_subclass__(cls) -> None: ...
    def __le__(self) -> None: ...
    def __lt__(self) -> None: ...
    def __ne__(self) -> None: ...
    def __new__(cls) -> None: ...
    def __reduce__(self, /): ...
    def __reduce_ex__(self, protocol, /): ...
    def __repr__(self) -> None: ...
    def __setattr__(self) -> None: ...
    def __sizeof__(self, /): ...
    def __str__(self) -> None: ...
    def __subclasshook__(self) -> None: ...
    def getAspectRatio(self) -> float: ...
    def getKeepAspectRatio(self) -> bool: ...
    def getProjectionCenter(self) -> QVector3D: ...
    def getProjectionRotation(self) -> QVector3D: ...
    def getProjectionScale(self) -> QVector3D: ...
    def getTextureOffset(self) -> QVector2D: ...
    def getTextureScale(self) -> QVector2D: ...
    def getTextureSize(self) -> QSizeF: ...
    def print(self) -> None: ...
    def setAspectRatio(self, aspectRatio: float) -> None: ...
    def setKeepAspectRatio(self, keepAspectRatio: bool) -> None: ...
    def setProjectionCenter(self, center: QVector3D) -> None: ...
    def setProjectionRotation(self, rotation: QVector3D) -> None: ...
    def setProjectionScale(self, scale: QVector3D) -> None: ...
    def setTextureOffset(self, offset: QVector2D) -> None: ...
    def setTextureScale(self, scale: QVector2D) -> None: ...
    def setTextureSize(self, size: Union[QSizeF, QSize]) -> None: ...

class vrdUVCylindricalProjectionSettings:
    __doc__: NoneType
    __module__: str
    def __copy__(self) -> None: ...
    def __delattr__(self) -> None: ...
    def __dir__(self, /): ...
    def __eq__(self) -> None: ...
    def __format__(self, format_spec, /): ...
    def __ge__(self) -> None: ...
    def __getattribute__(self) -> None: ...
    def __getstate__(self, /): ...
    def __gt__(self) -> None: ...
    def __hash__(self) -> None: ...
    def __init__(self) -> None: ...
    def __init_subclass__(cls) -> None: ...
    def __le__(self) -> None: ...
    def __lt__(self) -> None: ...
    def __ne__(self) -> None: ...
    def __new__(cls) -> None: ...
    def __reduce__(self, /): ...
    def __reduce_ex__(self, protocol, /): ...
    def __repr__(self) -> None: ...
    def __setattr__(self) -> None: ...
    def __sizeof__(self, /): ...
    def __str__(self) -> None: ...
    def __subclasshook__(self) -> None: ...
    def getAspectRatio(self) -> float: ...
    def getCylindricRotation2D(self) -> float: ...
    def getKeepAspectRatio(self) -> bool: ...
    def getProjectionCenter(self) -> QVector3D: ...
    def getProjectionRotation(self) -> QVector3D: ...
    def getProjectionScale(self) -> QVector3D: ...
    def getProjectionUAngle(self) -> float: ...
    def getTextureOffset(self) -> QVector2D: ...
    def getTextureScale(self) -> QVector2D: ...
    def getTextureSize(self) -> QSizeF: ...
    def print(self) -> None: ...
    def setAspectRatio(self, aspectRatio: float) -> None: ...
    def setCylindricRotation2D(self, angle: float) -> None: ...
    def setKeepAspectRatio(self, keepAspectRatio: bool) -> None: ...
    def setProjectionCenter(self, center: QVector3D) -> None: ...
    def setProjectionRotation(self, rotation: QVector3D) -> None: ...
    def setProjectionScale(self, scale: QVector3D) -> None: ...
    def setProjectionUAngle(self, uAngle: float) -> None: ...
    def setTextureOffset(self, offset: QVector2D) -> None: ...
    def setTextureScale(self, scale: QVector2D) -> None: ...
    def setTextureSize(self, size: Union[QSizeF, QSize]) -> None: ...

class vrdUVLayoutSettings:
    __doc__: NoneType
    __module__: str
    def __copy__(self) -> None: ...
    def __delattr__(self) -> None: ...
    def __dir__(self, /): ...
    def __eq__(self) -> None: ...
    def __format__(self, format_spec, /): ...
    def __ge__(self) -> None: ...
    def __getattribute__(self) -> None: ...
    def __getstate__(self, /): ...
    def __gt__(self) -> None: ...
    def __hash__(self) -> None: ...
    def __init__(self) -> None: ...
    def __init_subclass__(cls) -> None: ...
    def __le__(self) -> None: ...
    def __lt__(self) -> None: ...
    def __ne__(self) -> None: ...
    def __new__(cls) -> None: ...
    def __reduce__(self, /): ...
    def __reduce_ex__(self, protocol, /): ...
    def __repr__(self) -> None: ...
    def __setattr__(self) -> None: ...
    def __sizeof__(self, /): ...
    def __str__(self) -> None: ...
    def __subclasshook__(self) -> None: ...
    def getBox(self) -> QVector4D: ...
    def getIslandPadding(self) -> float: ...
    def getIterations(self) -> int: ...
    def getPostScaleMode(self) -> vrUVTypes.PostScaleMode: ...
    def getPreRotateMode(self) -> vrUVTypes.PreRotateMode: ...
    def getPreScaleMode(self) -> vrUVTypes.PreScaleMode: ...
    def getResolution(self) -> int: ...
    def getRotate(self) -> bool: ...
    def getRotateMax(self) -> float: ...
    def getRotateMin(self) -> float: ...
    def getRotateStep(self) -> float: ...
    def getTileAssignMode(self) -> vrUVTypes.TileAssignMode: ...
    def getTilePadding(self) -> float: ...
    def getTilesU(self) -> int: ...
    def getTilesV(self) -> int: ...
    def getTranslate(self) -> bool: ...
    def setBox(self, box: QVector4D) -> None: ...
    def setIslandPadding(self, padding: float) -> None: ...
    def setIterations(self, i: int) -> None: ...
    def setPostScaleMode(self, mode: vrUVTypes.PostScaleMode) -> None: ...
    def setPreRotateMode(self, mode: vrUVTypes.PreRotateMode) -> None: ...
    def setPreScaleMode(self, mode: vrUVTypes.PreScaleMode) -> None: ...
    def setResolution(self, resolution: int) -> None: ...
    def setRotate(self, enable: bool) -> None: ...
    def setRotateMax(self, rMaxDeg: float) -> None: ...
    def setRotateMin(self, rMinDeg: float) -> None: ...
    def setRotateStep(self, rStepDeg: float) -> None: ...
    def setTileAssignMode(self, mode: vrUVTypes.TileAssignMode) -> None: ...
    def setTilePadding(self, padding: float) -> None: ...
    def setTilesU(self, tilesU: int) -> None: ...
    def setTilesV(self, tilesV: int) -> None: ...
    def setTranslate(self, enable: bool) -> None: ...

class vrdUVOptimizeSettings:
    __doc__: NoneType
    __module__: str
    def __copy__(self) -> None: ...
    def __delattr__(self) -> None: ...
    def __dir__(self, /): ...
    def __eq__(self) -> None: ...
    def __format__(self, format_spec, /): ...
    def __ge__(self) -> None: ...
    def __getattribute__(self) -> None: ...
    def __getstate__(self, /): ...
    def __gt__(self) -> None: ...
    def __hash__(self) -> None: ...
    def __init__(self) -> None: ...
    def __init_subclass__(cls) -> None: ...
    def __le__(self) -> None: ...
    def __lt__(self) -> None: ...
    def __ne__(self) -> None: ...
    def __new__(cls) -> None: ...
    def __reduce__(self, /): ...
    def __reduce_ex__(self, protocol, /): ...
    def __repr__(self) -> None: ...
    def __setattr__(self) -> None: ...
    def __sizeof__(self, /): ...
    def __str__(self) -> None: ...
    def __subclasshook__(self) -> None: ...
    def getAngleVsDistanceConservation(self) -> float: ...
    def getIterations(self) -> int: ...
    def getMapSize(self) -> int: ...
    def getPower(self) -> int: ...
    def getPreventBorderIntersections(self) -> bool: ...
    def getPreventTriangleFlips(self) -> bool: ...
    def getRoomSpace(self) -> int: ...
    def setAngleVsDistanceConservation(self, conservation: float) -> None: ...
    def setIterations(self, iterations: int) -> None: ...
    def setMapSize(self, mapSize: int) -> None: ...
    def setPower(self, power: int) -> None: ...
    def setPreventBorderIntersections(self, prevent: bool) -> None: ...
    def setPreventTriangleFlips(self, prevent: bool) -> None: ...
    def setRoomSpace(self, roomSpace: int) -> None: ...

class vrdUVPlanarProjectionSettings:
    __doc__: NoneType
    __module__: str
    def __copy__(self) -> None: ...
    def __delattr__(self) -> None: ...
    def __dir__(self, /): ...
    def __eq__(self) -> None: ...
    def __format__(self, format_spec, /): ...
    def __ge__(self) -> None: ...
    def __getattribute__(self) -> None: ...
    def __getstate__(self, /): ...
    def __gt__(self) -> None: ...
    def __hash__(self) -> None: ...
    def __init__(self) -> None: ...
    def __init_subclass__(cls) -> None: ...
    def __le__(self) -> None: ...
    def __lt__(self) -> None: ...
    def __ne__(self) -> None: ...
    def __new__(cls) -> None: ...
    def __reduce__(self, /): ...
    def __reduce_ex__(self, protocol, /): ...
    def __repr__(self) -> None: ...
    def __setattr__(self) -> None: ...
    def __sizeof__(self, /): ...
    def __str__(self) -> None: ...
    def __subclasshook__(self) -> None: ...
    def getAspectRatio(self) -> float: ...
    def getKeepAspectRatio(self) -> bool: ...
    def getProjectionCenter(self) -> QVector3D: ...
    def getProjectionRotation(self) -> QVector3D: ...
    def getProjectionScale(self) -> QVector3D: ...
    def getTextureOffset(self) -> QVector2D: ...
    def getTextureScale(self) -> QVector2D: ...
    def getTextureSize(self) -> QSizeF: ...
    def print(self) -> None: ...
    def setAspectRatio(self, aspectRatio: float) -> None: ...
    def setKeepAspectRatio(self, keepAspectRatio: bool) -> None: ...
    def setProjectionCenter(self, center: QVector3D) -> None: ...
    def setProjectionRotation(self, rotation: QVector3D) -> None: ...
    def setProjectionScale(self, scale: QVector3D) -> None: ...
    def setTextureOffset(self, offset: QVector2D) -> None: ...
    def setTextureScale(self, scale: QVector2D) -> None: ...
    def setTextureSize(self, size: Union[QSizeF, QSize]) -> None: ...

class vrdUVSeamSettings:
    __doc__: NoneType
    __module__: str
    modeProperty: str
    organicUsePipesCutterProperty: str
    organicSegmentationAmountProperty: str
    manufacturedAngleProperty: str
    manufacturedAreaRatioProperty: str
    bakingAngleProperty: str
    bakingSizeOfMinPatchProperty: str
    def __copy__(self) -> None: ...
    def __delattr__(self) -> None: ...
    def __dir__(self, /): ...
    def __eq__(self) -> None: ...
    def __format__(self, format_spec, /): ...
    def __ge__(self) -> None: ...
    def __getattribute__(self) -> None: ...
    def __getstate__(self, /): ...
    def __gt__(self) -> None: ...
    def __hash__(self) -> None: ...
    def __init__(self) -> None: ...
    def __init_subclass__(cls) -> None: ...
    def __le__(self) -> None: ...
    def __lt__(self) -> None: ...
    def __ne__(self) -> None: ...
    def __new__(cls) -> None: ...
    def __reduce__(self, /): ...
    def __reduce_ex__(self, protocol, /): ...
    def __repr__(self) -> None: ...
    def __setattr__(self) -> None: ...
    def __sizeof__(self, /): ...
    def __str__(self) -> None: ...
    def __subclasshook__(self) -> None: ...
    def getBakingAngle(self) -> float: ...
    def getBakingSizeOfMinPatch(self) -> int: ...
    def getManufacturedAngle(self) -> float: ...
    def getManufacturedAreaRatio(self) -> float: ...
    def getMode(self) -> vrUVTypes.SeamMode: ...
    def getOrganicSegmentationAmount(self) -> float: ...
    def getOrganicUsePipesCutter(self) -> bool: ...
    def setBakingAngle(self, angle: float) -> None: ...
    def setBakingSizeOfMinPatch(self, minPatchSize: int) -> None: ...
    def setManufacturedAngle(self, angle: float) -> None: ...
    def setManufacturedAreaRatio(self, ratio: float) -> None: ...
    def setMode(self, mode: vrUVTypes.SeamMode) -> None: ...
    def setOrganicSegmentationAmount(self, segmentationAmount: float) -> None: ...
    def setOrganicUsePipesCutter(self, usePipesCutter: bool) -> None: ...

class vrdUVTriplanarProjectionSettings:
    __doc__: NoneType
    __module__: str
    def __copy__(self) -> None: ...
    def __delattr__(self) -> None: ...
    def __dir__(self, /): ...
    def __eq__(self) -> None: ...
    def __format__(self, format_spec, /): ...
    def __ge__(self) -> None: ...
    def __getattribute__(self) -> None: ...
    def __getstate__(self, /): ...
    def __gt__(self) -> None: ...
    def __hash__(self) -> None: ...
    def __init__(self) -> None: ...
    def __init_subclass__(cls) -> None: ...
    def __le__(self) -> None: ...
    def __lt__(self) -> None: ...
    def __ne__(self) -> None: ...
    def __new__(cls) -> None: ...
    def __reduce__(self, /): ...
    def __reduce_ex__(self, protocol, /): ...
    def __repr__(self) -> None: ...
    def __setattr__(self) -> None: ...
    def __sizeof__(self, /): ...
    def __str__(self) -> None: ...
    def __subclasshook__(self) -> None: ...
    def getCenter(self) -> QVector3D: ...
    def getFewerIslandsEnabled(self) -> bool: ...
    def getOffsetU(self) -> QVector3D: ...
    def getOffsetV(self) -> QVector3D: ...
    def getRepeatU(self) -> QVector3D: ...
    def getRepeatV(self) -> QVector3D: ...
    def getRotation2D(self) -> QVector3D: ...
    def getRotation3D(self) -> QVector3D: ...
    def getSize(self) -> QSizeF: ...
    def setCenter(self, center: QVector3D) -> None: ...
    def setFewerIslandsEnabled(self, enabled: bool) -> None: ...
    def setOffsetU(self, offset: QVector3D) -> None: ...
    def setOffsetV(self, offset: QVector3D) -> None: ...
    def setRepeatU(self, repeat: QVector3D) -> None: ...
    def setRepeatV(self, repeat: QVector3D) -> None: ...
    def setRotation2D(self, rotation: QVector3D) -> None: ...
    def setRotation3D(self, rotation: QVector3D) -> None: ...
    def setSize(self, size: Union[QSizeF, QSize]) -> None: ...

class vrdUVUnfoldSettings:
    __doc__: NoneType
    __module__: str
    def __copy__(self) -> None: ...
    def __delattr__(self) -> None: ...
    def __dir__(self, /): ...
    def __eq__(self) -> None: ...
    def __format__(self, format_spec, /): ...
    def __ge__(self) -> None: ...
    def __getattribute__(self) -> None: ...
    def __getstate__(self, /): ...
    def __gt__(self) -> None: ...
    def __hash__(self) -> None: ...
    def __init__(self) -> None: ...
    def __init_subclass__(cls) -> None: ...
    def __le__(self) -> None: ...
    def __lt__(self) -> None: ...
    def __ne__(self) -> None: ...
    def __new__(cls) -> None: ...
    def __reduce__(self, /): ...
    def __reduce_ex__(self, protocol, /): ...
    def __repr__(self) -> None: ...
    def __setattr__(self) -> None: ...
    def __sizeof__(self, /): ...
    def __str__(self) -> None: ...
    def __subclasshook__(self) -> None: ...
    def getIterations(self) -> int: ...
    def getMapSize(self) -> int: ...
    def getPreventBorderIntersections(self) -> bool: ...
    def getPreventTriangleFlips(self) -> bool: ...
    def getRoomSpace(self) -> int: ...
    def setIterations(self, iterations: int) -> None: ...
    def setMapSize(self, mapSize: int) -> None: ...
    def setPreventBorderIntersections(self, prevent: bool) -> None: ...
    def setPreventTriangleFlips(self, prevent: bool) -> None: ...
    def setRoomSpace(self, roomSpace: int) -> None: ...

class vrdUiEngine:
    __doc__: NoneType
    __module__: str
    enabledProperty: str
    nameProperty: str
    widthProperty: str
    heightProperty: str
    materialProperty: str
    clickThroughProperty: str
    reloadProperty: str
    def __copy__(self) -> None: ...
    def __delattr__(self) -> None: ...
    def __dir__(self, /): ...
    def __eq__(self) -> None: ...
    def __format__(self, format_spec, /): ...
    def __ge__(self) -> None: ...
    def __getattribute__(self) -> None: ...
    def __getstate__(self, /): ...
    def __gt__(self) -> None: ...
    def __hash__(self) -> None: ...
    def __init__(self) -> None: ...
    def __init_subclass__(cls) -> None: ...
    def __le__(self) -> None: ...
    def __lshift__(self) -> None: ...
    def __lt__(self) -> None: ...
    def __ne__(self) -> None: ...
    def __new__(cls) -> None: ...
    def __reduce__(self, /): ...
    def __reduce_ex__(self, protocol, /): ...
    def __repr__(self) -> None: ...
    def __rlshift__(self) -> None: ...
    def __rrshift__(self) -> None: ...
    def __rshift__(self) -> None: ...
    def __setattr__(self) -> None: ...
    def __sizeof__(self, /): ...
    def __str__(self) -> None: ...
    def __subclasshook__(self) -> None: ...
    def asType(self, arg__1: object) -> object: ...
    def doReload(self) -> None: ...
    def getClickThrough(self) -> float: ...
    def getEnabled(self) -> bool: ...
    def getHeight(self) -> int: ...
    def getMaterial(self) -> vrdMaterial: ...
    def getName(self) -> str: ...
    def getObjectId(self) -> int: ...
    def getWidth(self) -> int: ...
    def hasFocus(self) -> bool: ...
    def isNull(self) -> bool: ...
    def isType(self, arg__1: object) -> bool: ...
    def setClickThrough(self, alpha: float) -> None: ...
    def setEnabled(self, state: bool) -> None: ...
    def setHeight(self, height: int) -> None: ...
    def setMaterial(self, material: vrdMaterial) -> None: ...
    def setName(self, name: str) -> None: ...
    def setSize(self, width: int, height: int) -> None: ...
    def setWidth(self, width: int) -> None: ...

class vrdUnicolorCarpaintMaterial:
    __doc__: NoneType
    __module__: str
    baseColorProperty: str
    baseColorSpectrumProperty: str
    clearcoatProperty: str
    incandescenceProperty: str
    displacementTextureProperty: str
    def __copy__(self) -> None: ...
    def __delattr__(self) -> None: ...
    def __dir__(self, /): ...
    def __eq__(self) -> None: ...
    def __format__(self, format_spec, /): ...
    def __ge__(self) -> None: ...
    def __getattribute__(self) -> None: ...
    def __getstate__(self, /): ...
    def __gt__(self) -> None: ...
    def __hash__(self) -> None: ...
    def __init__(self) -> None: ...
    def __init_subclass__(cls) -> None: ...
    def __le__(self) -> None: ...
    def __lshift__(self) -> None: ...
    def __lt__(self) -> None: ...
    def __ne__(self) -> None: ...
    def __new__(cls) -> None: ...
    def __reduce__(self, /): ...
    def __reduce_ex__(self, protocol, /): ...
    def __repr__(self) -> None: ...
    def __rlshift__(self) -> None: ...
    def __rrshift__(self) -> None: ...
    def __rshift__(self) -> None: ...
    def __setattr__(self) -> None: ...
    def __sizeof__(self, /): ...
    def __str__(self) -> None: ...
    def __subclasshook__(self) -> None: ...
    def asType(self, arg__1: object) -> object: ...
    def duplicate(self, name: str = '') -> vrdMaterial: ...
    def getAnalytic(self) -> vrdAnalyticSettings: ...
    def getBaseColor(self) -> QVector3D: ...
    def getBaseColorSpectrum(self) -> vrSpectrum: ...
    def getClearcoat(self) -> vrdClearcoat: ...
    def getCommon(self) -> vrdBRDFCommonSettings: ...
    def getDisplacementTexture(self) -> vrdDisplacementTexture: ...
    def getIcon(self) -> QIcon: ...
    def getIncandescence(self) -> vrdIncandescence: ...
    def getLocked(self) -> bool: ...
    def getNPR(self) -> vrdNPRSettings: ...
    def getName(self) -> str: ...
    def getObjectId(self) -> int: ...
    def getPreview(self) -> QImage: ...
    def getPreviewScene(self) -> str: ...
    def getRaytracing(self) -> vrdMaterialRaytracingSettings: ...
    def getRoundedEdges(self) -> vrdRoundedEdges: ...
    def getTextures(self) -> List[vrdTexture]: ...
    def getTransparency(self) -> vrdTransparency: ...
    def isAsset(self) -> bool: ...
    def isComponent(self) -> bool: ...
    def isDisplacementActive(self) -> bool: ...
    def isEditable(self) -> bool: ...
    def isEditedAsset(self) -> bool: ...
    def isNull(self) -> bool: ...
    def isType(self, arg__1: object) -> bool: ...
    def isValid(self) -> bool: ...
    def setBaseColor(self, color: QVector3D) -> None: ...
    def setBaseColorSpectrum(self, value: Union[vrSpectrum, QVector3D]) -> None: ...
    def setInlineAllImageSequences(self, value: bool) -> List[vrdImage]: ...
    def setLocked(self, locked: bool) -> None: ...
    def setName(self, name: str) -> None: ...
    def setPreviewScene(self, name: str) -> None: ...

class vrdVRDevice:
    __doc__: NoneType
    __module__: str
    def __copy__(self) -> None: ...
    def __delattr__(self) -> None: ...
    def __dir__(self, /): ...
    def __eq__(self) -> None: ...
    def __format__(self, format_spec, /): ...
    def __ge__(self) -> None: ...
    def __getattribute__(self) -> None: ...
    def __getstate__(self, /): ...
    def __gt__(self) -> None: ...
    def __hash__(self) -> None: ...
    def __init__(self) -> None: ...
    def __init_subclass__(cls) -> None: ...
    def __le__(self) -> None: ...
    def __lshift__(self) -> None: ...
    def __lt__(self) -> None: ...
    def __ne__(self) -> None: ...
    def __new__(cls) -> None: ...
    def __reduce__(self, /): ...
    def __reduce_ex__(self, protocol, /): ...
    def __repr__(self) -> None: ...
    def __rlshift__(self) -> None: ...
    def __rrshift__(self) -> None: ...
    def __rshift__(self) -> None: ...
    def __setattr__(self) -> None: ...
    def __sizeof__(self, /): ...
    def __str__(self) -> None: ...
    def __subclasshook__(self) -> None: ...
    def addVirtualButton(self, button: vrdVirtualTouchpadButton, physicalButton: str) -> None: ...
    def asType(self, arg__1: object) -> object: ...
    def disableRay(self) -> None: ...
    def enableRay(self, axis: str) -> None: ...
    def getButtonState(self, button: str) -> vrdButtonState: ...
    def getName(self) -> str: ...
    def getNode(self) -> vrdNode: ...
    def getObjectId(self) -> int: ...
    def getSerialNumber(self) -> str: ...
    def getTrackingMatrix(self) -> QMatrix4x4: ...
    def getVisualizationMode(self) -> int: ...
    def getVisualizationNode(self) -> vrdNode: ...
    def getWristOrientationAngle(self) -> float: ...
    def isNull(self) -> bool: ...
    def isType(self, arg__1: object) -> bool: ...
    def isVisible(self) -> bool: ...
    def pick(self) -> vrdRayIntersection: ...
    def setButtonPressed(self, state: bool, button: str) -> None: ...
    def setButtonTouched(self, state: bool, button: str) -> None: ...
    def setTrackingMatrix(self, matrix: Union[QMatrix4x4, QTransform]) -> None: ...
    def setVisible(self, visible: bool) -> None: ...
    def setVisualizationMode(self, mode: int) -> None: ...
    def signal(self) -> vrdVRDeviceSignal: ...
    def vibrate(self, milliseconds: int, axisId: int) -> None: ...

class vrdVRDeviceSignal:
    __doc__: NoneType
    __module__: str
    staticMetaObject: QMetaObject
    def __delattr__(self) -> None: ...
    def __dir__(self, /): ...
    def __eq__(self) -> None: ...
    def __format__(self, format_spec, /): ...
    def __ge__(self) -> None: ...
    def __getattribute__(self) -> None: ...
    def __getstate__(self, /): ...
    def __gt__(self) -> None: ...
    def __hash__(self) -> None: ...
    def __init__(self) -> None: ...
    def __init_subclass__(cls) -> None: ...
    def __le__(self) -> None: ...
    def __lt__(self) -> None: ...
    def __ne__(self) -> None: ...
    def __new__(cls) -> None: ...
    def __reduce__(self, /): ...
    def __reduce_ex__(self, protocol, /): ...
    def __repr__(self) -> None: ...
    def __setattr__(self) -> None: ...
    def __sizeof__(self, /): ...
    def __str__(self) -> None: ...
    def __subclasshook__(self) -> None: ...
    def blockSignals(self, b: bool) -> bool: ...
    def childEvent(self, event: QChildEvent) -> None: ...
    def children(self) -> List[QObject]: ...
    def collisionStarted(self) -> None: ...
    def collisionStopped(self) -> None: ...
    def connect(self) -> None: ...
    def connectNotify(self, signal: QMetaMethod) -> None: ...
    def customEvent(self, event: QEvent) -> None: ...
    def deleteLater(self) -> None: ...
    def destroyed(self) -> None: ...
    def disconnect(self) -> None: ...
    def disconnectNotify(self, signal: QMetaMethod) -> None: ...
    def dumpObjectInfo(self) -> None: ...
    def dumpObjectTree(self) -> None: ...
    def dynamicPropertyNames(self) -> List[QByteArray]: ...
    def emit(self, arg__1: bytes, *args: None) -> bool: ...
    def event(self, event: QEvent) -> bool: ...
    def eventFilter(self, watched: QObject, event: QEvent) -> bool: ...
    def findChild(self, type: type, name: str = {}, options: Qt.FindChildOptions = Qt.FindChildOption.FindChildrenRecursively) -> object: ...
    def inherits(self, classname: bytes) -> bool: ...
    def installEventFilter(self, filterObj: QObject) -> None: ...
    def isSignalConnected(self, signal: QMetaMethod) -> bool: ...
    def isWidgetType(self) -> bool: ...
    def isWindowType(self) -> bool: ...
    def killTimer(self, id: int) -> None: ...
    def metaObject(self) -> QMetaObject: ...
    def moveToThread(self, thread: QThread) -> None: ...
    def moved(self) -> None: ...
    def objectName(self) -> str: ...
    def objectNameChanged(self) -> None: ...
    def parent(self) -> QObject: ...
    def property(self, name: str) -> Any: ...
    def receivers(self, signal: bytes) -> int: ...
    def removeEventFilter(self, obj: QObject) -> None: ...
    def sender(self) -> QObject: ...
    def senderSignalIndex(self) -> int: ...
    def setObjectName(self, name: str) -> None: ...
    def setParent(self, parent: QObject) -> None: ...
    def setProperty(self, name: str, value: Any) -> bool: ...
    def signalsBlocked(self) -> bool: ...
    def startTimer(self, interval: int, timerType: Qt.TimerType = Qt.TimerType.CoarseTimer) -> int: ...
    def thread(self) -> QThread: ...
    def timerEvent(self, event: QTimerEvent) -> None: ...
    def tr(self) -> None: ...

class vrdVarjoRenderSettings:
    __doc__: NoneType
    __module__: str
    def __copy__(self) -> None: ...
    def __delattr__(self) -> None: ...
    def __dir__(self, /): ...
    def __eq__(self) -> None: ...
    def __format__(self, format_spec, /): ...
    def __ge__(self) -> None: ...
    def __getattribute__(self) -> None: ...
    def __getstate__(self, /): ...
    def __gt__(self) -> None: ...
    def __hash__(self) -> None: ...
    def __init__(self) -> None: ...
    def __init_subclass__(cls) -> None: ...
    def __le__(self) -> None: ...
    def __lt__(self) -> None: ...
    def __ne__(self) -> None: ...
    def __new__(cls) -> None: ...
    def __reduce__(self, /): ...
    def __reduce_ex__(self, protocol, /): ...
    def __repr__(self) -> None: ...
    def __setattr__(self) -> None: ...
    def __sizeof__(self, /): ...
    def __str__(self) -> None: ...
    def __subclasshook__(self) -> None: ...
    def getUseNativeFoveatedRendering(self) -> bool: ...
    def setUseNativeFoveatedRendering(self, on: bool) -> None: ...

class vrdVelvetMaterial:
    __doc__: NoneType
    __module__: str
    diffuseColorProperty: str
    diffuseColorSpectrumProperty: str
    glossyColorProperty: str
    glossyColorSpectrumProperty: str
    darkeningProperty: str
    falloffProperty: str
    textureSettingsProperty: str
    diffuseTextureProperty: str
    glossyTextureProperty: str
    bumpTextureProperty: str
    incandescenceProperty: str
    subsurfaceScatteringProperty: str
    displacementTextureProperty: str
    def __copy__(self) -> None: ...
    def __delattr__(self) -> None: ...
    def __dir__(self, /): ...
    def __eq__(self) -> None: ...
    def __format__(self, format_spec, /): ...
    def __ge__(self) -> None: ...
    def __getattribute__(self) -> None: ...
    def __getstate__(self, /): ...
    def __gt__(self) -> None: ...
    def __hash__(self) -> None: ...
    def __init__(self) -> None: ...
    def __init_subclass__(cls) -> None: ...
    def __le__(self) -> None: ...
    def __lshift__(self) -> None: ...
    def __lt__(self) -> None: ...
    def __ne__(self) -> None: ...
    def __new__(cls) -> None: ...
    def __reduce__(self, /): ...
    def __reduce_ex__(self, protocol, /): ...
    def __repr__(self) -> None: ...
    def __rlshift__(self) -> None: ...
    def __rrshift__(self) -> None: ...
    def __rshift__(self) -> None: ...
    def __setattr__(self) -> None: ...
    def __sizeof__(self, /): ...
    def __str__(self) -> None: ...
    def __subclasshook__(self) -> None: ...
    def asType(self, arg__1: object) -> object: ...
    def duplicate(self, name: str = '') -> vrdMaterial: ...
    def getAnalytic(self) -> vrdAnalyticSettings: ...
    def getBumpTexture(self) -> vrdBumpTexture: ...
    def getCommon(self) -> vrdBRDFCommonSettings: ...
    def getDarkening(self) -> float: ...
    def getDiffuseColor(self) -> QVector3D: ...
    def getDiffuseColorSpectrum(self) -> vrSpectrum: ...
    def getDiffuseTexture(self) -> vrdTexture: ...
    def getDisplacementTexture(self) -> vrdDisplacementTexture: ...
    def getFalloff(self) -> float: ...
    def getGlossyColor(self) -> QVector3D: ...
    def getGlossyColorSpectrum(self) -> vrSpectrum: ...
    def getGlossyTexture(self) -> vrdTexture: ...
    def getIcon(self) -> QIcon: ...
    def getIncandescence(self) -> vrdIncandescence: ...
    def getLocked(self) -> bool: ...
    def getNPR(self) -> vrdNPRSettings: ...
    def getName(self) -> str: ...
    def getObjectId(self) -> int: ...
    def getPreview(self) -> QImage: ...
    def getPreviewScene(self) -> str: ...
    def getRaytracing(self) -> vrdMaterialRaytracingSettings: ...
    def getRoundedEdges(self) -> vrdRoundedEdges: ...
    def getSubsurfaceScattering(self) -> vrdSubsurfaceScattering: ...
    def getTextureSettings(self) -> vrdTextureSettings: ...
    def getTextures(self) -> List[vrdTexture]: ...
    def getTransparency(self) -> vrdTransparency: ...
    def isAsset(self) -> bool: ...
    def isComponent(self) -> bool: ...
    def isDisplacementActive(self) -> bool: ...
    def isEditable(self) -> bool: ...
    def isEditedAsset(self) -> bool: ...
    def isNull(self) -> bool: ...
    def isType(self, arg__1: object) -> bool: ...
    def isValid(self) -> bool: ...
    def setDarkening(self, v: float) -> None: ...
    def setDiffuseColor(self, value: QVector3D) -> None: ...
    def setDiffuseColorSpectrum(self, value: Union[vrSpectrum, QVector3D]) -> None: ...
    def setFalloff(self, v: float) -> None: ...
    def setGlossyColor(self, value: QVector3D) -> None: ...
    def setGlossyColorSpectrum(self, value: Union[vrSpectrum, QVector3D]) -> None: ...
    def setInlineAllImageSequences(self, value: bool) -> List[vrdImage]: ...
    def setLocked(self, locked: bool) -> None: ...
    def setName(self, name: str) -> None: ...
    def setPreviewScene(self, name: str) -> None: ...

class vrdVertexBake:
    __doc__: NoneType
    __module__: str
    vertexBakeSettingsProperty: str
    illuminationBakeSettingsProperty: str
    def __copy__(self) -> None: ...
    def __delattr__(self) -> None: ...
    def __dir__(self, /): ...
    def __eq__(self) -> None: ...
    def __format__(self, format_spec, /): ...
    def __ge__(self) -> None: ...
    def __getattribute__(self) -> None: ...
    def __getstate__(self, /): ...
    def __gt__(self) -> None: ...
    def __hash__(self) -> None: ...
    def __init__(self) -> None: ...
    def __init_subclass__(cls) -> None: ...
    def __le__(self) -> None: ...
    def __lshift__(self) -> None: ...
    def __lt__(self) -> None: ...
    def __ne__(self) -> None: ...
    def __new__(cls) -> None: ...
    def __reduce__(self, /): ...
    def __reduce_ex__(self, protocol, /): ...
    def __repr__(self) -> None: ...
    def __rlshift__(self) -> None: ...
    def __rrshift__(self) -> None: ...
    def __rshift__(self) -> None: ...
    def __setattr__(self) -> None: ...
    def __sizeof__(self, /): ...
    def __str__(self) -> None: ...
    def __subclasshook__(self) -> None: ...
    def asType(self, arg__1: object) -> object: ...
    def clearBake(self, clearDirectIllumination: bool = True, clearIndirectIllumination: bool = True) -> None: ...
    def getIlluminationBakeSettings(self) -> vrdIlluminationBakeSettings: ...
    def getObjectId(self) -> int: ...
    def getVertexBakeSettings(self) -> vrdVertexBakeSettings: ...
    def isNull(self) -> bool: ...
    def isType(self, arg__1: object) -> bool: ...
    def isValid(self) -> bool: ...

class vrdVertexBakeSettings:
    __doc__: NoneType
    __module__: str
    directIlluminationQualityProperty: str
    indirectIlluminationQualityProperty: str
    subdivisionProperty: str
    subdivisionQualityProperty: str
    minimumEdgeLengthProperty: str
    intensityThresholdProperty: str
    def __copy__(self) -> None: ...
    def __delattr__(self) -> None: ...
    def __dir__(self, /): ...
    def __eq__(self) -> None: ...
    def __format__(self, format_spec, /): ...
    def __ge__(self) -> None: ...
    def __getattribute__(self) -> None: ...
    def __getstate__(self, /): ...
    def __gt__(self) -> None: ...
    def __hash__(self) -> None: ...
    def __init__(self) -> None: ...
    def __init_subclass__(cls) -> None: ...
    def __le__(self) -> None: ...
    def __lt__(self) -> None: ...
    def __ne__(self) -> None: ...
    def __new__(cls) -> None: ...
    def __reduce__(self, /): ...
    def __reduce_ex__(self, protocol, /): ...
    def __repr__(self) -> None: ...
    def __setattr__(self) -> None: ...
    def __sizeof__(self, /): ...
    def __str__(self) -> None: ...
    def __subclasshook__(self) -> None: ...
    def getDirectIlluminationQuality(self) -> vrBakeTypes.IlluminationQuality: ...
    def getIndirectIlluminationQuality(self) -> vrBakeTypes.IlluminationQuality: ...
    def getIntensityThreshold(self) -> float: ...
    def getMinimumEdgeLength(self) -> float: ...
    def getSubdivision(self) -> bool: ...
    def getSubdivisionQuality(self) -> vrBakeTypes.SubdivisionQuality: ...
    def setDirectIlluminationQuality(self, quality: vrBakeTypes.IlluminationQuality) -> None: ...
    def setIndirectIlluminationQuality(self, quality: vrBakeTypes.IlluminationQuality) -> None: ...
    def setIntensityThreshold(self, value: float) -> None: ...
    def setMinimumEdgeLength(self, value: float) -> None: ...
    def setSubdivision(self, value: bool) -> None: ...
    def setSubdivisionQuality(self, quality: vrBakeTypes.SubdivisionQuality) -> None: ...

class vrdViewpointNode:
    __doc__: NoneType
    __module__: str
    overrideTrackSettingsProperty: str
    trackFadeInDurationOverrideProperty: str
    trackTransitionDurationOverrideProperty: str
    trackPauseDurationOverrideProperty: str
    showInVRMenuProperty: str
    def __copy__(self) -> None: ...
    def __delattr__(self) -> None: ...
    def __dir__(self, /): ...
    def __eq__(self) -> None: ...
    def __format__(self, format_spec, /): ...
    def __ge__(self) -> None: ...
    def __getattribute__(self) -> None: ...
    def __getstate__(self, /): ...
    def __gt__(self) -> None: ...
    def __hash__(self) -> None: ...
    def __init__(self) -> None: ...
    def __init_subclass__(cls) -> None: ...
    def __le__(self) -> None: ...
    def __lshift__(self) -> None: ...
    def __lt__(self) -> None: ...
    def __ne__(self) -> None: ...
    def __new__(cls) -> None: ...
    def __reduce__(self, /): ...
    def __reduce_ex__(self, protocol, /): ...
    def __repr__(self) -> None: ...
    def __rlshift__(self) -> None: ...
    def __rrshift__(self) -> None: ...
    def __rshift__(self) -> None: ...
    def __setattr__(self) -> None: ...
    def __sizeof__(self, /): ...
    def __str__(self) -> None: ...
    def __subclasshook__(self) -> None: ...
    def activate(self, disableTransition: bool = False, blockForAnimation: bool = False) -> None: ...
    def adjustAtPosition(self, root: vrdNode = Default(vrdNode)) -> None: ...
    def applyMaterial(self, material: vrdMaterial) -> None: ...
    def asType(self, arg__1: object) -> object: ...
    def calculateClippingPlanes(self) -> None: ...
    def captureTransformVariant(self, name: str) -> None: ...
    def createPreview(self, force: bool = False) -> None: ...
    def deleteTransformVariant(self, variant: vrdTransformNodeVariant) -> None: ...
    def findTransformVariant(self, name: str) -> vrdTransformNodeVariant: ...
    def getApplyColorCorrectionToBackground(self) -> bool: ...
    def getApplyColorCorrectionToForeground(self) -> bool: ...
    def getAutofocus(self) -> bool: ...
    def getAutofocusTransitionTime(self) -> int: ...
    def getBlendAmount(self) -> float: ...
    def getBlendMapLeftEye(self) -> vrdImage: ...
    def getBlendMapRightEye(self) -> vrdImage: ...
    def getBlendMode(self) -> vrCameraTypes.BlendMode: ...
    def getBoundingBox(self) -> vrdBoundingBox: ...
    def getChild(self, index: int) -> vrdNode: ...
    def getChildCount(self) -> int: ...
    def getChildIndex(self, child: vrdNode) -> int: ...
    def getChildren(self) -> List[vrdNode]: ...
    def getChildrenRecursive(self) -> List[vrdNode]: ...
    def getChildrenRef(self) -> vrdNodeList: ...
    def getColorCorrectionBrightness(self) -> float: ...
    def getColorCorrectionContrast(self) -> float: ...
    def getColorCorrectionHueOffset(self) -> float: ...
    def getColorCorrectionSaturation(self) -> float: ...
    def getCustomFrustumEnabled(self) -> bool: ...
    def getCustomProjectionMatrix(self) -> QMatrix4x4: ...
    def getDepthOfField(self) -> bool: ...
    def getDepthOfFieldMode(self) -> vrCameraTypes.DepthOfFieldMode: ...
    def getDistanceFog(self) -> bool: ...
    def getDistanceFogColor(self) -> QColor: ...
    def getDistanceFogDensity(self) -> float: ...
    def getDistanceFogEnableNoiseSizeUniform(self) -> bool: ...
    def getDistanceFogFalloff(self) -> vrCameraTypes.FogFalloffMode: ...
    def getDistanceFogNoise(self) -> float: ...
    def getDistanceFogNoiseOffset(self) -> QVector3D: ...
    def getDistanceFogNoiseSize(self) -> QVector3D: ...
    def getDistanceFogRange(self) -> float: ...
    def getDistortion(self) -> bool: ...
    def getDistortionMapLeftEye(self) -> vrdImage: ...
    def getDistortionMapRightEye(self) -> vrdImage: ...
    def getEulerRotationOrder(self) -> vrTransformTypes.EulerRotationOrder: ...
    def getFStop(self) -> float: ...
    def getFarClippingDistance(self) -> float: ...
    def getFocalLength(self) -> float: ...
    def getFocusDistance(self) -> float: ...
    def getFov(self) -> float: ...
    def getFovMode(self) -> vrCameraTypes.FovMode: ...
    def getFromAtUp(self) -> vrCameraFromAtUp: ...
    def getFromAtUpWorld(self) -> vrCameraFromAtUp: ...
    def getFrustum(self) -> QVector4D: ...
    def getFrustumBottom(self) -> float: ...
    def getFrustumLeft(self) -> float: ...
    def getFrustumRight(self) -> float: ...
    def getFrustumTop(self) -> float: ...
    def getGlare(self) -> bool: ...
    def getGlareIntensity(self) -> float: ...
    def getGlareRotation(self) -> float: ...
    def getGlareSize(self) -> float: ...
    def getGlareStreaks(self) -> int: ...
    def getGlareThreshold(self) -> float: ...
    def getGlow(self) -> bool: ...
    def getGlowFalloff(self) -> float: ...
    def getGlowIntensity(self) -> float: ...
    def getGlowSize(self) -> float: ...
    def getGlowThreshold(self) -> float: ...
    def getHeightFog(self) -> bool: ...
    def getHeightFogBlend(self) -> float: ...
    def getHeightFogColor(self) -> QColor: ...
    def getHeightFogDensity(self) -> float: ...
    def getHeightFogEnableNoiseSizeUniform(self) -> bool: ...
    def getHeightFogFalloff(self) -> vrCameraTypes.FogFalloffMode: ...
    def getHeightFogNoise(self) -> float: ...
    def getHeightFogNoiseOffset(self) -> QVector3D: ...
    def getHeightFogNoiseSize(self) -> QVector3D: ...
    def getHeightFogRange(self) -> QVector2D: ...
    def getInteractiveDofQuality(self) -> vrCameraTypes.InteractiveDofQuality: ...
    def getLensFlare(self) -> bool: ...
    def getLocked(self) -> bool: ...
    def getMaterial(self) -> vrdMaterial: ...
    def getMotionBlur(self) -> bool: ...
    def getName(self) -> str: ...
    def getNearClippingDistance(self) -> float: ...
    def getObjectId(self) -> int: ...
    def getOrCreateTransformNode(self) -> vrdNode: ...
    def getOrthographicSize(self) -> float: ...
    def getOverrideTrackSettings(self) -> bool: ...
    def getParent(self) -> vrdNode: ...
    def getPath(self) -> str: ...
    def getPerspectiveMatch(self) -> vrdPerspectiveMatch: ...
    def getPreview(self) -> vrdImage: ...
    def getPrincipalPointOffset(self) -> QVector2D: ...
    def getProjectionMode(self) -> vrCameraTypes.CameraProjectionMode: ...
    def getRoll(self) -> float: ...
    def getRotatePivot(self) -> QVector3D: ...
    def getRotatePivotTranslation(self) -> QVector3D: ...
    def getRotationAsEuler(self) -> QVector3D: ...
    def getRotationAsQuaternion(self) -> QQuaternion: ...
    def getRotationOrientationAsEuler(self) -> QVector3D: ...
    def getRotationOrientationAsQuaternion(self) -> QQuaternion: ...
    def getScale(self) -> QVector3D: ...
    def getScalePivot(self) -> QVector3D: ...
    def getScalePivotTranslation(self) -> QVector3D: ...
    def getSelectableFlag(self) -> bool: ...
    def getSensorSize(self) -> QVector2D: ...
    def getSharedNodes(self) -> List[vrdNode]: ...
    def getShear(self) -> QVector3D: ...
    def getShowInVRMenu(self) -> bool: ...
    def getShutterSpeed(self) -> float: ...
    def getSkew(self) -> float: ...
    def getStereoEyeSeparation(self) -> float: ...
    def getStereoLayout(self) -> vrCameraTypes.CameraStereoLayout: ...
    def getStereoPolarMergeAngle(self) -> float: ...
    def getSynchronizedNodes(self) -> List[vrdNode]: ...
    def getTonemapper(self) -> vrdTonemapper: ...
    def getTrackFadeInDurationOverride(self) -> float: ...
    def getTrackPauseDurationOverride(self) -> float: ...
    def getTrackTransitionDurationOverride(self) -> float: ...
    def getTransform(self) -> QMatrix4x4: ...
    def getTransformVariants(self) -> List[vrdTransformNodeVariant]: ...
    def getTranslation(self) -> QVector3D: ...
    def getUniquePath(self) -> str: ...
    def getUseHightAsVRGround(self) -> bool: ...
    def getViewpointTransition(self) -> bool: ...
    def getViewpointTransitionDuration(self) -> float: ...
    def getVignetteFeather(self) -> float: ...
    def getVignetteRadius(self) -> float: ...
    def getVignetteRoundness(self) -> float: ...
    def getVisibilityFlag(self) -> bool: ...
    def getWireframeRendering(self) -> bool: ...
    def getWorldBoundingBox(self) -> vrdBoundingBox: ...
    def getWorldRotatePivot(self) -> QVector3D: ...
    def getWorldScalePivot(self) -> QVector3D: ...
    def getWorldTransform(self) -> QMatrix4x4: ...
    def getWorldTranslation(self) -> QVector3D: ...
    def hasParent(self, parent: vrdNode) -> bool: ...
    def hasPreview(self) -> bool: ...
    def isEditable(self) -> bool: ...
    def isEditedAsset(self) -> bool: ...
    def isEqual(self, camera: vrdCameraBaseNode) -> bool: ...
    def isGroup(self) -> bool: ...
    def isImplicitShared(self) -> bool: ...
    def isNull(self) -> bool: ...
    def isOrthographic(self) -> bool: ...
    def isShared(self) -> bool: ...
    def isSharedWith(self, node: vrdNode) -> bool: ...
    def isSynchronized(self) -> bool: ...
    def isType(self, arg__1: object) -> bool: ...
    def isValid(self) -> bool: ...
    def isVisible(self) -> bool: ...
    def loadBlendMap(self, fileName: str, eye: vrCameraTypes.CameraEye) -> bool: ...
    def loadDistortionMap(self, fileName: str, eye: vrCameraTypes.CameraEye) -> bool: ...
    def mirrorView(self, axis: vrCameraTypes.CameraAxis) -> None: ...
    def resetTransformation(self) -> None: ...
    def resetView(self) -> None: ...
    def setApplyColorCorrectionToBackground(self, enabled: bool) -> None: ...
    def setApplyColorCorrectionToForeground(self, enabled: bool) -> None: ...
    def setAutofocus(self, enabled: bool) -> None: ...
    def setAutofocusTransitionTime(self, value: int) -> None: ...
    def setBlendAmount(self, value: float) -> None: ...
    def setBlendMapLeftEye(self, image: vrdImage) -> None: ...
    def setBlendMapRightEye(self, image: vrdImage) -> None: ...
    def setBlendMode(self, mode: vrCameraTypes.BlendMode) -> None: ...
    def setColorCorrectionBrightness(self, value: float) -> None: ...
    def setColorCorrectionContrast(self, value: float) -> None: ...
    def setColorCorrectionHueOffset(self, value: float) -> None: ...
    def setColorCorrectionSaturation(self, value: float) -> None: ...
    def setCustomFrustumEnabled(self, enabled: bool) -> None: ...
    def setCustomProjectionMatrix(self, matrix: Union[QMatrix4x4, QTransform]) -> None: ...
    def setDepthOfField(self, enabled: bool) -> None: ...
    def setDepthOfFieldMode(self, mode: vrCameraTypes.DepthOfFieldMode) -> None: ...
    def setDistanceFog(self, enable: bool) -> None: ...
    def setDistanceFogColor(self, color: Union[QColor, QRgba64, Any, Qt.GlobalColor, str, int]) -> None: ...
    def setDistanceFogDensity(self, density: float) -> None: ...
    def setDistanceFogEnableNoiseSizeUniform(self, enable: bool) -> None: ...
    def setDistanceFogFalloff(self, value: vrCameraTypes.FogFalloffMode) -> None: ...
    def setDistanceFogNoise(self, intensity: float) -> None: ...
    def setDistanceFogNoiseOffset(self, offset: QVector3D) -> None: ...
    def setDistanceFogNoiseSize(self, size: QVector3D) -> None: ...
    def setDistanceFogRange(self, nearDistance: float) -> None: ...
    def setDistortion(self, enabled: bool) -> None: ...
    def setDistortionMapLeftEye(self, image: vrdImage) -> None: ...
    def setDistortionMapRightEye(self, image: vrdImage) -> None: ...
    def setEulerRotationOrder(self, rotationOrder: vrTransformTypes.EulerRotationOrder) -> None: ...
    def setFStop(self, value: float) -> None: ...
    def setFarClippingDistance(self, value: float) -> None: ...
    def setFocalLength(self, value: float) -> None: ...
    def setFocusDistance(self, distance: float) -> None: ...
    def setFov(self, value: float) -> None: ...
    def setFovMode(self, mode: vrCameraTypes.FovMode) -> None: ...
    def setFromAtUp(self, fromAtUp: vrCameraFromAtUp) -> None: ...
    def setFromAtUpWorld(self, fromAtUp: vrCameraFromAtUp) -> None: ...
    def setFrustum(self, frustum: QVector4D) -> None: ...
    def setFrustumBottom(self, value: float) -> None: ...
    def setFrustumLeft(self, value: float) -> None: ...
    def setFrustumRight(self, value: float) -> None: ...
    def setFrustumTop(self, value: float) -> None: ...
    def setGlare(self, enabled: bool) -> None: ...
    def setGlareIntensity(self, value: float) -> None: ...
    def setGlareRotation(self, value: float) -> None: ...
    def setGlareSize(self, value: float) -> None: ...
    def setGlareStreaks(self, value: int) -> None: ...
    def setGlareThreshold(self, value: float) -> None: ...
    def setGlow(self, enabled: bool) -> None: ...
    def setGlowFalloff(self, value: float) -> None: ...
    def setGlowIntensity(self, value: float) -> None: ...
    def setGlowSize(self, value: float) -> None: ...
    def setGlowThreshold(self, value: float) -> None: ...
    def setHeightFog(self, enable: bool) -> None: ...
    def setHeightFogBlend(self, blend: float) -> None: ...
    def setHeightFogColor(self, color: Union[QColor, QRgba64, Any, Qt.GlobalColor, str, int]) -> None: ...
    def setHeightFogDensity(self, density: float) -> None: ...
    def setHeightFogEnableNoiseSizeUniform(self, enable: bool) -> None: ...
    def setHeightFogFalloff(self, value: vrCameraTypes.FogFalloffMode) -> None: ...
    def setHeightFogNoise(self, intensity: float) -> None: ...
    def setHeightFogNoiseOffset(self, offset: QVector3D) -> None: ...
    def setHeightFogNoiseSize(self, size: QVector3D) -> None: ...
    def setHeightFogRange(self, range: QVector2D) -> None: ...
    def setInteractiveDofQuality(self, value: vrCameraTypes.InteractiveDofQuality) -> None: ...
    def setLensFlare(self, enabled: bool) -> None: ...
    def setLocked(self, locked: bool) -> None: ...
    def setMotionBlur(self, enabled: bool) -> None: ...
    def setName(self, name: str) -> None: ...
    def setNearClippingDistance(self, value: float) -> None: ...
    def setOrthographicSize(self, size: float) -> None: ...
    def setOverrideTrackSettings(self, enable: bool) -> None: ...
    def setPrincipalPointOffset(self, offset: QVector2D) -> None: ...
    def setProjectionMode(self, mode: vrCameraTypes.CameraProjectionMode) -> None: ...
    def setRoll(self, value: float) -> None: ...
    def setRotatePivot(self, rotatePivot: QVector3D) -> None: ...
    def setRotatePivotTranslation(self, rotatePivotTranslation: QVector3D) -> None: ...
    def setRotationAsEuler(self, rotation: QVector3D) -> None: ...
    def setRotationAsQuaternion(self, rotation: QQuaternion) -> None: ...
    def setRotationOrientationAsEuler(self, rotationOrientation: QVector3D) -> None: ...
    def setRotationOrientationAsQuaternion(self, orientation: QQuaternion) -> None: ...
    def setScale(self, scale: QVector3D) -> None: ...
    def setScalePivot(self, scalePivot: QVector3D) -> None: ...
    def setScalePivotTranslation(self, scalePivotTranslation: QVector3D) -> None: ...
    def setSelectableFlag(self, selectable: bool) -> None: ...
    def setSensorSize(self, size: QVector2D) -> None: ...
    def setShear(self, shear: QVector3D) -> None: ...
    def setShowInVRMenu(self, value: bool) -> None: ...
    def setShutterSpeed(self, value: float) -> None: ...
    def setSkew(self, value: float) -> None: ...
    def setStereoEyeSeparation(self, value: float) -> None: ...
    def setStereoLayout(self, layout: vrCameraTypes.CameraStereoLayout) -> None: ...
    def setStereoPolarMergeAngle(self, value: float) -> None: ...
    def setToCurrentView(self) -> None: ...
    def setTrackFadeInDurationOverride(self, value: float) -> None: ...
    def setTrackPauseDurationOverride(self, value: float) -> None: ...
    def setTrackTransitionDurationOverride(self, value: float) -> None: ...
    def setTransform(self, matrix: Union[QMatrix4x4, QTransform]) -> None: ...
    def setTranslation(self, translation: QVector3D) -> None: ...
    def setUseHightAsVRGround(self, value: bool) -> None: ...
    def setViewpointTransition(self, enabled: bool) -> None: ...
    def setViewpointTransitionDuration(self, seconds: float) -> None: ...
    def setVignetteFeather(self, value: float) -> None: ...
    def setVignetteRadius(self, value: float) -> None: ...
    def setVignetteRoundness(self, value: float) -> None: ...
    def setVisibilityFlag(self, visible: bool) -> None: ...
    def setWireframeRendering(self, enabled: bool) -> None: ...
    def setWorldRotatePivot(self, rotatePivot: QVector3D) -> None: ...
    def setWorldScalePivot(self, scalePivot: QVector3D) -> None: ...
    def setWorldTransform(self, matrix: Union[QMatrix4x4, QTransform]) -> None: ...
    def setWorldTranslation(self, translation: QVector3D) -> None: ...

class vrdVirtualTouchpadButton:
    __doc__: NoneType
    __module__: str
    def __copy__(self) -> None: ...
    def __delattr__(self) -> None: ...
    def __dir__(self, /): ...
    def __eq__(self) -> None: ...
    def __format__(self, format_spec, /): ...
    def __ge__(self) -> None: ...
    def __getattribute__(self) -> None: ...
    def __getstate__(self, /): ...
    def __gt__(self) -> None: ...
    def __hash__(self) -> None: ...
    def __init__(self) -> None: ...
    def __init_subclass__(cls) -> None: ...
    def __le__(self) -> None: ...
    def __lt__(self) -> None: ...
    def __ne__(self) -> None: ...
    def __new__(cls) -> None: ...
    def __reduce__(self, /): ...
    def __reduce_ex__(self, protocol, /): ...
    def __repr__(self) -> None: ...
    def __setattr__(self) -> None: ...
    def __sizeof__(self, /): ...
    def __str__(self) -> None: ...
    def __subclasshook__(self) -> None: ...
    def getEndAngle(self) -> float: ...
    def getMaxRadius(self) -> float: ...
    def getMinRadius(self) -> float: ...
    def getName(self) -> str: ...
    def getStartAngle(self) -> float: ...
    def getVirtualButtonId(self) -> int: ...
    def setEndAngle(self, end: float) -> None: ...
    def setMaxRadius(self, max: float) -> None: ...
    def setMinRadius(self, min: float) -> None: ...
    def setName(self, name: str) -> None: ...
    def setStartAngle(self, start: float) -> None: ...

class vrdWebEngine:
    __doc__: NoneType
    __module__: str
    urlProperty: str
    textureProperty: str
    def TextureSlotType(self) -> None: ...
    def __copy__(self) -> None: ...
    def __delattr__(self) -> None: ...
    def __dir__(self, /): ...
    def __eq__(self) -> None: ...
    def __format__(self, format_spec, /): ...
    def __ge__(self) -> None: ...
    def __getattribute__(self) -> None: ...
    def __getstate__(self, /): ...
    def __gt__(self) -> None: ...
    def __hash__(self) -> None: ...
    def __init__(self) -> None: ...
    def __init_subclass__(cls) -> None: ...
    def __le__(self) -> None: ...
    def __lshift__(self) -> None: ...
    def __lt__(self) -> None: ...
    def __ne__(self) -> None: ...
    def __new__(cls) -> None: ...
    def __reduce__(self, /): ...
    def __reduce_ex__(self, protocol, /): ...
    def __repr__(self) -> None: ...
    def __rlshift__(self) -> None: ...
    def __rrshift__(self) -> None: ...
    def __rshift__(self) -> None: ...
    def __setattr__(self) -> None: ...
    def __sizeof__(self, /): ...
    def __str__(self) -> None: ...
    def __subclasshook__(self) -> None: ...
    def asType(self, arg__1: object) -> object: ...
    def doReload(self) -> None: ...
    def getClickThrough(self) -> float: ...
    def getEnabled(self) -> bool: ...
    def getHeight(self) -> int: ...
    def getMaterial(self) -> vrdMaterial: ...
    def getName(self) -> str: ...
    def getObjectId(self) -> int: ...
    def getTexture(self) -> vrdWebEngine.TextureSlotType: ...
    def getUrl(self) -> str: ...
    def getUsedInSceneplate(self) -> bool: ...
    def getWidth(self) -> int: ...
    def hasFocus(self) -> bool: ...
    def isNull(self) -> bool: ...
    def isType(self, arg__1: object) -> bool: ...
    def isValid(self) -> bool: ...
    def sendEvent(self, event: str, data: str) -> None: ...
    def setClickThrough(self, alpha: float) -> None: ...
    def setEnabled(self, state: bool) -> None: ...
    def setHeight(self, height: int) -> None: ...
    def setMaterial(self, material: vrdMaterial) -> None: ...
    def setName(self, name: str) -> None: ...
    def setSize(self, width: int, height: int) -> None: ...
    def setTexture(self, textureSlot: vrdWebEngine.TextureSlotType) -> None: ...
    def setUrl(self, url: str) -> None: ...
    def setWidth(self, width: int) -> None: ...

class vrdWovenClothMaterial:
    __doc__: NoneType
    __module__: str
    Custom: ClothPreset
    CottonJersey: ClothPreset
    CottonTwill31: ClothPreset
    Jeans: ClothPreset
    LinenFine: ClothPreset
    LinenCoarse: ClothPreset
    Nylon: ClothPreset
    Satin: ClothPreset
    Silk: ClothPreset
    TableClothCotton: ClothPreset
    Viscose: ClothPreset
    PlainPattern: WeaveType
    Twill31Pattern: WeaveType
    Twill51Pattern: WeaveType
    DenimPattern: WeaveType
    SatinPattern: WeaveType
    SilkPattern: WeaveType
    StapleYarn: YarnType
    FilamentYarn: YarnType
    diffuseColorProperty: str
    diffuseColorSpectrumProperty: str
    darkeningProperty: str
    warpYarnColorProperty: str
    warpYarnColorSpectrumProperty: str
    weftYarnColorProperty: str
    weftYarnColorSpectrumProperty: str
    presetChoiceProperty: str
    weaveTypeProperty: str
    yarnTypeProperty: str
    yarnTwistAngleProperty: str
    highlightWidthProperty: str
    exposureProperty: str
    noiseIntensityProperty: str
    moireRemovalProperty: str
    warpYarnCurvatureProperty: str
    weftYarnCurvatureProperty: str
    textureSettingsProperty: str
    diffuseTextureProperty: str
    yarnTextureProperty: str
    bumpTextureProperty: str
    incandescenceProperty: str
    subsurfaceScatteringProperty: str
    displacementTextureProperty: str
    def ClothPreset(self) -> None: ...
    def WeaveType(self) -> None: ...
    def YarnType(self) -> None: ...
    def __copy__(self) -> None: ...
    def __delattr__(self) -> None: ...
    def __dir__(self, /): ...
    def __eq__(self) -> None: ...
    def __format__(self, format_spec, /): ...
    def __ge__(self) -> None: ...
    def __getattribute__(self) -> None: ...
    def __getstate__(self, /): ...
    def __gt__(self) -> None: ...
    def __hash__(self) -> None: ...
    def __init__(self) -> None: ...
    def __init_subclass__(cls) -> None: ...
    def __le__(self) -> None: ...
    def __lshift__(self) -> None: ...
    def __lt__(self) -> None: ...
    def __ne__(self) -> None: ...
    def __new__(cls) -> None: ...
    def __reduce__(self, /): ...
    def __reduce_ex__(self, protocol, /): ...
    def __repr__(self) -> None: ...
    def __rlshift__(self) -> None: ...
    def __rrshift__(self) -> None: ...
    def __rshift__(self) -> None: ...
    def __setattr__(self) -> None: ...
    def __sizeof__(self, /): ...
    def __str__(self) -> None: ...
    def __subclasshook__(self) -> None: ...
    def asType(self, arg__1: object) -> object: ...
    def duplicate(self, name: str = '') -> vrdMaterial: ...
    def getAnalytic(self) -> vrdAnalyticSettings: ...
    def getBumpTexture(self) -> vrdBumpTexture: ...
    def getCommon(self) -> vrdBRDFCommonSettings: ...
    def getDarkening(self) -> float: ...
    def getDiffuseColor(self) -> QVector3D: ...
    def getDiffuseColorSpectrum(self) -> vrSpectrum: ...
    def getDiffuseTexture(self) -> vrdTexture: ...
    def getDisplacementTexture(self) -> vrdDisplacementTexture: ...
    def getExposure(self) -> float: ...
    def getHighlightWidth(self) -> float: ...
    def getIcon(self) -> QIcon: ...
    def getIncandescence(self) -> vrdIncandescence: ...
    def getLocked(self) -> bool: ...
    def getMoireRemoval(self) -> float: ...
    def getNPR(self) -> vrdNPRSettings: ...
    def getName(self) -> str: ...
    def getNoiseIntensity(self) -> float: ...
    def getObjectId(self) -> int: ...
    def getPresetChoice(self) -> vrdWovenClothMaterial.ClothPreset: ...
    def getPreview(self) -> QImage: ...
    def getPreviewScene(self) -> str: ...
    def getRaytracing(self) -> vrdMaterialRaytracingSettings: ...
    def getRoundedEdges(self) -> vrdRoundedEdges: ...
    def getSubsurfaceScattering(self) -> vrdSubsurfaceScattering: ...
    def getTextureSettings(self) -> vrdTextureSettings: ...
    def getTextures(self) -> List[vrdTexture]: ...
    def getTransparency(self) -> vrdTransparency: ...
    def getWarpYarnColor(self) -> QVector3D: ...
    def getWarpYarnColorSpectrum(self) -> vrSpectrum: ...
    def getWarpYarnCurvature(self) -> float: ...
    def getWeaveType(self) -> vrdWovenClothMaterial.WeaveType: ...
    def getWeftYarnColor(self) -> QVector3D: ...
    def getWeftYarnColorSpectrum(self) -> vrSpectrum: ...
    def getWeftYarnCurvature(self) -> float: ...
    def getYarnTexture(self) -> vrdTexture: ...
    def getYarnTwistAngle(self) -> float: ...
    def getYarnType(self) -> vrdWovenClothMaterial.YarnType: ...
    def isAsset(self) -> bool: ...
    def isComponent(self) -> bool: ...
    def isDisplacementActive(self) -> bool: ...
    def isEditable(self) -> bool: ...
    def isEditedAsset(self) -> bool: ...
    def isNull(self) -> bool: ...
    def isType(self, arg__1: object) -> bool: ...
    def isValid(self) -> bool: ...
    def setDarkening(self, v: float) -> None: ...
    def setDiffuseColor(self, value: QVector3D) -> None: ...
    def setDiffuseColorSpectrum(self, value: Union[vrSpectrum, QVector3D]) -> None: ...
    def setExposure(self, exposure: float) -> None: ...
    def setHighlightWidth(self, v: float) -> None: ...
    def setInlineAllImageSequences(self, value: bool) -> List[vrdImage]: ...
    def setLocked(self, locked: bool) -> None: ...
    def setMoireRemoval(self, v: float) -> None: ...
    def setName(self, name: str) -> None: ...
    def setNoiseIntensity(self, v: float) -> None: ...
    def setPresetChoice(self, v: vrdWovenClothMaterial.ClothPreset) -> None: ...
    def setPreviewScene(self, name: str) -> None: ...
    def setWarpYarnColor(self, value: QVector3D) -> None: ...
    def setWarpYarnColorSpectrum(self, value: Union[vrSpectrum, QVector3D]) -> None: ...
    def setWarpYarnCurvature(self, v: float) -> None: ...
    def setWeaveType(self, v: vrdWovenClothMaterial.WeaveType) -> None: ...
    def setWeftYarnColor(self, value: QVector3D) -> None: ...
    def setWeftYarnColorSpectrum(self, value: Union[vrSpectrum, QVector3D]) -> None: ...
    def setWeftYarnCurvature(self, v: float) -> None: ...
    def setYarnTwistAngle(self, v: float) -> None: ...
    def setYarnType(self, v: vrdWovenClothMaterial.YarnType) -> None: ...

class vrdXRayMaterial:
    __doc__: NoneType
    __module__: str
    baseColorProperty: str
    baseColorSpectrumProperty: str
    singleSidedProperty: str
    castShadowsProperty: str
    fresnelTransparencyBiasProperty: str
    fresnelTransparencyScaleProperty: str
    fresnelTransparencyPowerProperty: str
    fresnelColorProperty: str
    fresnelColorSpectrumProperty: str
    fresnelColorBiasProperty: str
    fresnelColorScaleProperty: str
    fresnelColorPowerProperty: str
    def __copy__(self) -> None: ...
    def __delattr__(self) -> None: ...
    def __dir__(self, /): ...
    def __eq__(self) -> None: ...
    def __format__(self, format_spec, /): ...
    def __ge__(self) -> None: ...
    def __getattribute__(self) -> None: ...
    def __getstate__(self, /): ...
    def __gt__(self) -> None: ...
    def __hash__(self) -> None: ...
    def __init__(self) -> None: ...
    def __init_subclass__(cls) -> None: ...
    def __le__(self) -> None: ...
    def __lshift__(self) -> None: ...
    def __lt__(self) -> None: ...
    def __ne__(self) -> None: ...
    def __new__(cls) -> None: ...
    def __reduce__(self, /): ...
    def __reduce_ex__(self, protocol, /): ...
    def __repr__(self) -> None: ...
    def __rlshift__(self) -> None: ...
    def __rrshift__(self) -> None: ...
    def __rshift__(self) -> None: ...
    def __setattr__(self) -> None: ...
    def __sizeof__(self, /): ...
    def __str__(self) -> None: ...
    def __subclasshook__(self) -> None: ...
    def asType(self, arg__1: object) -> object: ...
    def duplicate(self, name: str = '') -> vrdMaterial: ...
    def getAnalytic(self) -> vrdAnalyticSettings: ...
    def getBaseColor(self) -> QVector3D: ...
    def getBaseColorSpectrum(self) -> vrSpectrum: ...
    def getCastShadows(self) -> bool: ...
    def getCommon(self) -> vrdBRDFCommonSettings: ...
    def getFresnelColor(self) -> QVector3D: ...
    def getFresnelColorBias(self) -> float: ...
    def getFresnelColorPower(self) -> float: ...
    def getFresnelColorScale(self) -> float: ...
    def getFresnelColorSpectrum(self) -> vrSpectrum: ...
    def getFresnelTransparencyBias(self) -> float: ...
    def getFresnelTransparencyPower(self) -> float: ...
    def getFresnelTransparencyScale(self) -> float: ...
    def getIcon(self) -> QIcon: ...
    def getLocked(self) -> bool: ...
    def getNPR(self) -> vrdNPRSettings: ...
    def getName(self) -> str: ...
    def getObjectId(self) -> int: ...
    def getPreview(self) -> QImage: ...
    def getPreviewScene(self) -> str: ...
    def getRaytracing(self) -> vrdMaterialRaytracingSettings: ...
    def getRoundedEdges(self) -> vrdRoundedEdges: ...
    def getSingleSided(self) -> bool: ...
    def getTextures(self) -> List[vrdTexture]: ...
    def getTransparency(self) -> vrdTransparency: ...
    def isAsset(self) -> bool: ...
    def isComponent(self) -> bool: ...
    def isDisplacementActive(self) -> bool: ...
    def isEditable(self) -> bool: ...
    def isEditedAsset(self) -> bool: ...
    def isNull(self) -> bool: ...
    def isType(self, arg__1: object) -> bool: ...
    def isValid(self) -> bool: ...
    def setBaseColor(self, color: QVector3D) -> None: ...
    def setBaseColorSpectrum(self, value: Union[vrSpectrum, QVector3D]) -> None: ...
    def setCastShadows(self, s: bool) -> None: ...
    def setFresnelColor(self, color: QVector3D) -> None: ...
    def setFresnelColorBias(self, v: float) -> None: ...
    def setFresnelColorPower(self, v: float) -> None: ...
    def setFresnelColorScale(self, v: float) -> None: ...
    def setFresnelColorSpectrum(self, value: Union[vrSpectrum, QVector3D]) -> None: ...
    def setFresnelTransparencyBias(self, v: float) -> None: ...
    def setFresnelTransparencyPower(self, v: float) -> None: ...
    def setFresnelTransparencyScale(self, v: float) -> None: ...
    def setInlineAllImageSequences(self, value: bool) -> List[vrdImage]: ...
    def setLocked(self, locked: bool) -> None: ...
    def setName(self, name: str) -> None: ...
    def setPreviewScene(self, name: str) -> None: ...
    def setSingleSided(self, s: bool) -> None: ...

class vrdXRiteMeasuredMaterial:
    __doc__: NoneType
    __module__: str
    measurementProperty: str
    def __copy__(self) -> None: ...
    def __delattr__(self) -> None: ...
    def __dir__(self, /): ...
    def __eq__(self) -> None: ...
    def __format__(self, format_spec, /): ...
    def __ge__(self) -> None: ...
    def __getattribute__(self) -> None: ...
    def __getstate__(self, /): ...
    def __gt__(self) -> None: ...
    def __hash__(self) -> None: ...
    def __init__(self) -> None: ...
    def __init_subclass__(cls) -> None: ...
    def __le__(self) -> None: ...
    def __lshift__(self) -> None: ...
    def __lt__(self) -> None: ...
    def __ne__(self) -> None: ...
    def __new__(cls) -> None: ...
    def __reduce__(self, /): ...
    def __reduce_ex__(self, protocol, /): ...
    def __repr__(self) -> None: ...
    def __rlshift__(self) -> None: ...
    def __rrshift__(self) -> None: ...
    def __rshift__(self) -> None: ...
    def __setattr__(self) -> None: ...
    def __sizeof__(self, /): ...
    def __str__(self) -> None: ...
    def __subclasshook__(self) -> None: ...
    def asType(self, arg__1: object) -> object: ...
    def duplicate(self, name: str = '') -> vrdMaterial: ...
    def getChoice(self) -> int: ...
    def getIcon(self) -> QIcon: ...
    def getLocked(self) -> bool: ...
    def getMaterials(self) -> List[vrdMaterial]: ...
    def getMaterialsRef(self) -> vrdMaterialList: ...
    def getMeasurement(self) -> str: ...
    def getName(self) -> str: ...
    def getObjectId(self) -> int: ...
    def getPreview(self) -> QImage: ...
    def getPreviewScene(self) -> str: ...
    def getStateNames(self) -> List[str]: ...
    def getTextures(self) -> List[vrdTexture]: ...
    def isAsset(self) -> bool: ...
    def isComponent(self) -> bool: ...
    def isEditable(self) -> bool: ...
    def isEditedAsset(self) -> bool: ...
    def isNull(self) -> bool: ...
    def isType(self, arg__1: object) -> bool: ...
    def isValid(self) -> bool: ...
    def setChoice(self, index: int) -> None: ...
    def setInlineAllImageSequences(self, value: bool) -> List[vrdImage]: ...
    def setLocked(self, locked: bool) -> None: ...
    def setMaterials(self, materials: Sequence[vrdMaterial]) -> None: ...
    def setMeasurement(self, filename: str) -> None: ...
    def setName(self, name: str) -> None: ...
    def setPreviewScene(self, name: str) -> None: ...