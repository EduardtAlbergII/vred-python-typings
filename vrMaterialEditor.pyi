from vrMaterialPtr import MaterialPtr, vrMaterialPtr
from typing import Any

__name__: str
__doc__: str
__package__: str
__spec__: ModuleSpec

def __loader__(self) -> None: ...
def applyEnvToAllMaterials(self) -> None: ...
def applyEnvToSelectedNodes(self, mat: MaterialPtr, nodes: list) -> None: ...
def applySubstancePresetByIndex(self, mat: MaterialPtr, index: int) -> None: ...
def applySubstancePresetByName(self, mat: MaterialPtr, name: str) -> None: ...
def applySubstancePresetWithDefaultOutputSizeByIndex(self, mat: MaterialPtr, index: int) -> None: ...
def applySubstancePresetWithDefaultOutputSizeByName(self, mat: MaterialPtr, name: str) -> None: ...
def clearSubstancePresetCache(self) -> None: ...
def deleteMaterials(self, mat_name: Any) -> None: ...
def enableSubstancePresetCache(self, enabled: Any) -> None: ...
def getSelectedMaterials(self) -> list: ...
def getSubstanceArchivePath(self, mat: MaterialPtr) -> None: ...
def getSubstancePresets(self, mat: MaterialPtr) -> None: ...
def importMaterialLibraryAndApply(self, filename: str) -> None: ...
def loadMeasurement(self, mat: MaterialPtr, measurementFilePath: str) -> None: ...
def loadSubstanceArchive(self, mat: MaterialPtr, archiveFilePath: str) -> None: ...
def loadSubstancePresets(self, mat: MaterialPtr, presetsFilePath: str) -> None: ...
def selectMaterial(self, mat: MaterialPtr) -> None: ...
def selectMaterialByIndex(self, i: int) -> None: ...
def selectMaterialByName(self, name: str) -> None: ...
def selectMaterialByNode(self, id: int) -> None: ...
def selectMaterials(self, mats: list) -> None: ...
def setMaterialAmbientColor(self, index: int, hue: int, saturation: int, value: int) -> None: ...
def setMaterialDiffuseColor(self, index: int, hue: int, saturation: int, value: int) -> None: ...
def setMeasuredCarpaintGlossyAsDiffuseLobes(self, mat: vrMaterialPtr, lobes: int) -> None: ...
def undeleteMaterials(self, mat_name: Any) -> None: ...
def updateMaterials(self) -> None: ...
def updateSubstanceMaterial(self, mat: MaterialPtr) -> None: ...
