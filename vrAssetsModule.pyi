from builtins import NoneType
from vrNodePtr import vrNodePtr
from vrMaterialPtr import vrMaterialPtr

__name__: str
__doc__: NoneType
__package__: str
__spec__: ModuleSpec
VR_ASSET_MATERIAL: int
VR_ASSET_ENVIRONMENT: int
VR_ASSET_GEOMETRY: int
VR_ASSET_SCENEPLATE: int

def __loader__(self) -> None: ...
def applyMaterialAssetsByName(self, path: str) -> None: ...
def createEnvironmentAsset(self, environmentNode: vrNodePtr, assetManagerDirectory: str) -> bool: ...
def createGeometryAsset(self, node: vrNodePtr, assetManagerDirectory: str) -> bool: ...
def createMaterialAsset(self, material: vrMaterialPtr, assetManagerDirectory: str) -> bool: ...
def createSceneplateAsset(self, node: vrNodePtr, assetManagerDirectory: str) -> bool: ...
def getSelectedAssetDirectory(self, assetType: int) -> str: ...
def getSelectedMaterialAssetDirectory(self) -> None: ...
def loadEnvironmentAssetByName(self, assetName: str, assetPath: str) -> bool: ...
def loadEnvironmentAssetByUUID(self, assetUUID: str) -> bool: ...
def loadGeometryAssetByName(self, assetName: str, assetPath: str) -> vrNodePtr: ...
def loadGeometryAssetByUUID(self, assetUUID: str) -> vrNodePtr: ...
def loadMaterialAssetByName(self, assetName: str, assetPath: str) -> vrMaterialPtr: ...
def loadMaterialAssetByUUID(self, assetUUID: str) -> vrMaterialPtr: ...
def loadSceneplateAssetByName(self, assetName: str, assetPath: str) -> vrNodePtr: ...
def loadSceneplateAssetByUUID(self, assetUUID: str) -> vrNodePtr: ...
def overwriteEnvironmentAsset(self, environmentAsset: vrNodePtr) -> bool: ...
def overwriteGeometryAsset(self, assetRootNode: vrNodePtr) -> bool: ...
def overwriteMaterialAsset(self, material: vrMaterialPtr) -> bool: ...
def overwriteSceneplateAsset(self, assetRootNode: vrNodePtr) -> bool: ...
def reloadAllAssetDirectories(self) -> None: ...
def reloadAssetDirectory(self, url: str) -> None: ...
