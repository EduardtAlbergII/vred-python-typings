from vrNodePtr import vrNodePtr
from vrOSGTypes import Vec2f, Pnt3f, Vec3f

__name__: str
__doc__: str
__package__: str
__spec__: ModuleSpec
Finger_Thumb: int
Finger_Index: int
Finger_Middle: int
Finger_Ring: int
Finger_Pinky: int
Pose_Pointing: int
Pose_Picking: int
Pose_ThumbsUp: int
Pose_Fist: int
Hand_Left: int
Hand_Right: int
Hand_Undefined: int
Visualization_Controller: int
Visualization_Hand: int
Visualization_ControllerAndHand: int

def __loader__(self) -> None: ...

class vrOculusTouchController:
    __module__: str
    __doc__: str
    __instance_size__: int
    def __class__(self) -> None: ...
    def __delattr__(self) -> None: ...
    def __dir__(self, /): ...
    def __eq__(self) -> None: ...
    def __format__(self, format_spec, /): ...
    def __ge__(self) -> None: ...
    def __getattribute__(self) -> None: ...
    def __getstate__(self, /): ...
    def __gt__(self) -> None: ...
    def __hash__(self) -> None: ...
    def __init__(self, name: str) -> None: ...
    def __init_subclass__(cls) -> None: ...
    def __le__(self) -> None: ...
    def __lt__(self) -> None: ...
    def __ne__(self) -> None: ...
    def __new__(cls) -> None: ...
    def __reduce__(self) -> None: ...
    def __reduce_ex__(self, protocol, /): ...
    def __repr__(self) -> None: ...
    def __setattr__(self) -> None: ...
    def __sizeof__(self, /): ...
    def __str__(self) -> None: ...
    def __subclasshook__(self) -> None: ...
    def addLoop(self) -> None: ...
    def button0IsPressed(self) -> None: ...
    def button0IsTouched(self) -> None: ...
    def button0Pressed(self) -> None: ...
    def button0Released(self) -> None: ...
    def button0Touched(self) -> None: ...
    def button0Untouched(self) -> None: ...
    def button1IsPressed(self) -> None: ...
    def button1IsTouched(self) -> None: ...
    def button1Pressed(self) -> None: ...
    def button1Released(self) -> None: ...
    def button1Touched(self) -> None: ...
    def button1Untouched(self) -> None: ...
    def callAllConnected(self) -> None: ...
    def connect(self, o: object, arg1: object, arg2: object) -> bool: ...
    def connectSignal(self, signal: str, slot: object, arg1: object, arg2: object) -> bool: ...
    def controllerMoved(self) -> None: ...
    def emitSignal(self, signal: str, arg1: object, arg2: object) -> None: ...
    def getControllerNode(self) -> vrNodePtr: ...
    def getHandRole(self) -> int: ...
    def getHandTriggerRatio(self) -> float: ...
    def getModuleName(self) -> None: ...
    def getThumbstickPosition(self) -> Vec2f: ...
    def getTriggerRatio(self) -> float: ...
    def getVisualizationMode(self) -> int: ...
    def getWorldMatrix(self) -> list: ...
    def handPoseStarted(self, poseId: int) -> None: ...
    def handPoseStopped(self, poseId: int) -> None: ...
    def handRoleChanged(self, role: int) -> None: ...
    def handTouchContinues(self, touchedNodeId: int, fingerId: int) -> None: ...
    def handTouchStarted(self, touchedNodeId: int, fingerId: int) -> None: ...
    def handTouchStopped(self, touchedNodeId: int, fingerId: int) -> None: ...
    def handTriggerChanged(self, value: float) -> None: ...
    def handTriggerIsPressed(self) -> None: ...
    def handTriggerPressed(self) -> None: ...
    def handTriggerReleased(self) -> None: ...
    def isActive(self) -> bool: ...
    def isButton0Pressed(self) -> bool: ...
    def isButton0Touched(self) -> bool: ...
    def isButton1Pressed(self) -> bool: ...
    def isButton1Touched(self) -> bool: ...
    def isHandAnimationEnabled(self) -> bool: ...
    def isHandInteractionEnabled(self) -> bool: ...
    def isHandPoseActive(self, poseId: int) -> None: ...
    def isHandTouchPointVisualizationEnabled(self) -> bool: ...
    def isHandTriggerPressed(self) -> bool: ...
    def isThumbRestTouched(self) -> bool: ...
    def isThumbstickPressed(self) -> bool: ...
    def isThumbstickTouched(self) -> bool: ...
    def isTriggerPressed(self) -> bool: ...
    def isTriggerTouched(self) -> bool: ...
    def isVisible(self) -> bool: ...
    def loop(self) -> None: ...
    def pickNode(self) -> vrNodePtr: ...
    def pickNodeEx(self) -> tuple: ...
    def pickNodeWithFinger(self, fingerId: int) -> tuple: ...
    def recEvent(self, state: int) -> None: ...
    def removeConnections(self) -> None: ...
    def setActive(self, state: int) -> None: ...
    def setCustomPickingDirection(self, origin: Pnt3f, direction: Vec3f, color: Vec3f) -> None: ...
    def setHandAnimationEnabled(self, enabled: bool) -> None: ...
    def setHandInteractionEnabled(self, enabled: bool) -> None: ...
    def setHandTouchPointVisualizationEnabled(self, enabled: bool) -> None: ...
    def setPickingAxis(self, axis: int) -> None: ...
    def setUpdateGUIEnabled(self, state: bool) -> None: ...
    def setVisible(self, visible: bool) -> None: ...
    def setVisualizationMode(self, mode: int) -> None: ...
    def showPickingAxis(self, on: bool) -> None: ...
    def subLoop(self) -> None: ...
    def thumbRestIsTouched(self) -> None: ...
    def thumbRestTouched(self) -> None: ...
    def thumbRestUntouched(self) -> None: ...
    def thumbstickChanged(self, position: tuple) -> None: ...
    def thumbstickIsPressed(self) -> None: ...
    def thumbstickIsTouched(self) -> None: ...
    def thumbstickPressed(self) -> None: ...
    def thumbstickReleased(self) -> None: ...
    def thumbstickTouched(self) -> None: ...
    def thumbstickUntouched(self) -> None: ...
    def triggerChanged(self, value: float) -> None: ...
    def triggerHapticPulse(self, axis: int, duration: int) -> None: ...
    def triggerIsPressed(self) -> None: ...
    def triggerIsTouched(self) -> None: ...
    def triggerPressed(self) -> None: ...
    def triggerReleased(self) -> None: ...
    def triggerTouched(self) -> None: ...
    def triggerUntouched(self) -> None: ...
    def triggerVibration(self, frequency: float, amplitude: float) -> None: ...
